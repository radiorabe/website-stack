type Query {
  protocol(filter: protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [protocol!]!
  protocol_by_id(id: ID!, version: String): protocol
  protocol_aggregated(groupBy: [String], filter: protocol_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [protocol_aggregated!]!
  protocol_by_version(version: String!, id: ID!): version_protocol
  page_history_protocol(filter: page_history_protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_protocol!]!
  page_history_protocol_by_id(id: ID!, version: String): page_history_protocol
  page_history_protocol_aggregated(groupBy: [String], filter: page_history_protocol_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_protocol_aggregated!]!
  page_history_protocol_by_version(version: String!, id: ID!): version_page_history_protocol
  page_contact_contact_address(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_contact_address!]!
  page_contact_contact_address_by_id(id: ID!, version: String): page_contact_contact_address
  page_contact_contact_address_aggregated(groupBy: [String], filter: page_contact_contact_address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_contact_contact_address_aggregated!]!
  page_contact_contact_address_by_version(version: String!, id: ID!): version_page_contact_contact_address
  image_box(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [image_box!]!
  image_box_by_id(id: ID!, version: String): image_box
  image_box_aggregated(groupBy: [String], filter: image_box_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [image_box_aggregated!]!
  image_box_by_version(version: String!, id: ID!): version_image_box
  posts_editor_nodes(filter: posts_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts_editor_nodes!]!
  posts_editor_nodes_by_id(id: ID!, version: String): posts_editor_nodes
  posts_editor_nodes_aggregated(groupBy: [String], filter: posts_editor_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [posts_editor_nodes_aggregated!]!
  posts_editor_nodes_by_version(version: String!, id: ID!): version_posts_editor_nodes
  page_contact_files(filter: page_contact_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_files!]!
  page_contact_files_by_id(id: ID!, version: String): page_contact_files
  page_contact_files_aggregated(groupBy: [String], filter: page_contact_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_contact_files_aggregated!]!
  page_contact_files_by_version(version: String!, id: ID!): version_page_contact_files
  party_location(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [party_location!]!
  party_location_by_id(id: ID!, version: String): party_location
  party_location_aggregated(groupBy: [String], filter: party_location_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [party_location_aggregated!]!
  party_location_by_version(version: String!, id: ID!): version_party_location
  page_member_statements(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_member_statements!]!
  page_member_statements_by_id(id: ID!, version: String): page_member_statements
  page_member_statements_aggregated(groupBy: [String], filter: page_member_statements_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_member_statements_aggregated!]!
  page_member_statements_by_version(version: String!, id: ID!): version_page_member_statements
  member_product(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [member_product!]!
  member_product_by_id(id: ID!, version: String): member_product
  member_product_aggregated(groupBy: [String], filter: member_product_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [member_product_aggregated!]!
  member_product_by_version(version: String!, id: ID!): version_member_product
  config(version: String): config
  config_by_version(version: String!): version_config
  programs_directus_users(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users!]!
  programs_directus_users_by_id(id: ID!, version: String): programs_directus_users
  programs_directus_users_aggregated(groupBy: [String], filter: programs_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [programs_directus_users_aggregated!]!
  programs_directus_users_by_version(version: String!, id: ID!): version_programs_directus_users
  programs(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs!]!
  programs_by_id(id: ID!, version: String): programs
  programs_aggregated(groupBy: [String], filter: programs_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [programs_aggregated!]!
  programs_by_version(version: String!, id: ID!): version_programs
  posts(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts!]!
  posts_by_id(id: ID!, version: String): posts
  posts_aggregated(groupBy: [String], filter: posts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [posts_aggregated!]!
  posts_by_version(version: String!, id: ID!): version_posts
  page_contact(version: String): page_contact
  page_contact_by_version(version: String!): version_page_contact
  posts_directus_users_1(filter: posts_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts_directus_users_1!]!
  posts_directus_users_1_by_id(id: ID!, version: String): posts_directus_users_1
  posts_directus_users_1_aggregated(groupBy: [String], filter: posts_directus_users_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [posts_directus_users_1_aggregated!]!
  posts_directus_users_1_by_version(version: String!, id: ID!): version_posts_directus_users_1
  page_programs(version: String): page_programs
  page_programs_by_version(version: String!): version_page_programs
  page_agb(version: String): page_agb
  page_agb_by_version(version: String!): version_page_agb
  quote(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [quote!]!
  quote_by_id(id: ID!, version: String): quote
  quote_aggregated(groupBy: [String], filter: quote_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [quote_aggregated!]!
  quote_by_version(version: String!, id: ID!): version_quote
  info_box(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [info_box!]!
  info_box_by_id(id: ID!, version: String): info_box
  info_box_aggregated(groupBy: [String], filter: info_box_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [info_box_aggregated!]!
  info_box_by_version(version: String!, id: ID!): version_info_box
  page_impressum(version: String): page_impressum
  page_impressum_by_version(version: String!): version_page_impressum
  page_team(version: String): page_team
  page_team_by_version(version: String!): version_page_team
  page_program_programs_3(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_3!]!
  page_program_programs_3_by_id(id: ID!, version: String): page_program_programs_3
  page_program_programs_3_aggregated(groupBy: [String], filter: page_program_programs_3_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_3_aggregated!]!
  page_program_programs_3_by_version(version: String!, id: ID!): version_page_program_programs_3
  page_team_directus_users(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users!]!
  page_team_directus_users_by_id(id: ID!, version: String): page_team_directus_users
  page_team_directus_users_aggregated(groupBy: [String], filter: page_team_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_team_directus_users_aggregated!]!
  page_team_directus_users_by_version(version: String!, id: ID!): version_page_team_directus_users
  page_program_programs(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs!]!
  page_program_programs_by_id(id: ID!, version: String): page_program_programs
  page_program_programs_aggregated(groupBy: [String], filter: page_program_programs_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_aggregated!]!
  page_program_programs_by_version(version: String!, id: ID!): version_page_program_programs
  page_team_directus_users_1(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_1!]!
  page_team_directus_users_1_by_id(id: ID!, version: String): page_team_directus_users_1
  page_team_directus_users_1_aggregated(groupBy: [String], filter: page_team_directus_users_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_team_directus_users_1_aggregated!]!
  page_team_directus_users_1_by_version(version: String!, id: ID!): version_page_team_directus_users_1
  page_team_directus_users_2(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_2!]!
  page_team_directus_users_2_by_id(id: ID!, version: String): page_team_directus_users_2
  page_team_directus_users_2_aggregated(groupBy: [String], filter: page_team_directus_users_2_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_team_directus_users_2_aggregated!]!
  page_team_directus_users_2_by_version(version: String!, id: ID!): version_page_team_directus_users_2
  page_program_programs_1(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_1!]!
  page_program_programs_1_by_id(id: ID!, version: String): page_program_programs_1
  page_program_programs_1_aggregated(groupBy: [String], filter: page_program_programs_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_1_aggregated!]!
  page_program_programs_1_by_version(version: String!, id: ID!): version_page_program_programs_1
  page_program_programs_2(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_2!]!
  page_program_programs_2_by_id(id: ID!, version: String): page_program_programs_2
  page_program_programs_2_aggregated(groupBy: [String], filter: page_program_programs_2_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_2_aggregated!]!
  page_program_programs_2_by_version(version: String!, id: ID!): version_page_program_programs_2
  page_history_files(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files!]!
  page_history_files_by_id(id: ID!, version: String): page_history_files
  page_history_files_aggregated(groupBy: [String], filter: page_history_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_files_aggregated!]!
  page_history_files_by_version(version: String!, id: ID!): version_page_history_files
  page_program(version: String): page_program
  page_program_by_version(version: String!): version_page_program
  page_receive(version: String): page_receive
  page_receive_by_version(version: String!): version_page_receive
  party_tips(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [party_tips!]!
  party_tips_by_id(id: ID!, version: String): party_tips
  party_tips_aggregated(groupBy: [String], filter: party_tips_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [party_tips_aggregated!]!
  party_tips_by_version(version: String!, id: ID!): version_party_tips
  page_history(version: String): page_history
  page_history_by_version(version: String!): version_page_history
  page_member(version: String): page_member
  page_member_by_version(version: String!): version_page_member
  contact_address(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [contact_address!]!
  contact_address_by_id(id: ID!, version: String): contact_address
  contact_address_aggregated(groupBy: [String], filter: contact_address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [contact_address_aggregated!]!
  contact_address_by_version(version: String!, id: ID!): version_contact_address
  page_receive_nodes(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_receive_nodes!]!
  page_receive_nodes_by_id(id: ID!, version: String): page_receive_nodes
  page_receive_nodes_aggregated(groupBy: [String], filter: page_receive_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_receive_nodes_aggregated!]!
  page_receive_nodes_by_version(version: String!, id: ID!): version_page_receive_nodes
  page_history_nodes(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_nodes!]!
  page_history_nodes_by_id(id: ID!, version: String): page_history_nodes
  page_history_nodes_aggregated(groupBy: [String], filter: page_history_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_nodes_aggregated!]!
  page_history_nodes_by_version(version: String!, id: ID!): version_page_history_nodes
  statements(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [statements!]!
  statements_by_id(id: ID!, version: String): statements
  statements_aggregated(groupBy: [String], filter: statements_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [statements_aggregated!]!
  statements_by_version(version: String!, id: ID!): version_statements
  orders(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [orders!]!
  orders_by_id(id: ID!, version: String): orders
  orders_aggregated(groupBy: [String], filter: orders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [orders_aggregated!]!
  orders_by_version(version: String!, id: ID!): version_orders
  directus_sync_id_map(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_sync_id_map!]!
  directus_sync_id_map_by_id(id: ID!, version: String): directus_sync_id_map
  directus_sync_id_map_aggregated(groupBy: [String], filter: directus_sync_id_map_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_sync_id_map_aggregated!]!
  directus_sync_id_map_by_version(version: String!, id: ID!): version_directus_sync_id_map
}

type Mutation {
  create_protocol_items(filter: protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_protocol_input!]): [protocol!]!
  create_protocol_item(data: create_protocol_input!): protocol
  create_page_history_protocol_items(filter: page_history_protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_protocol_input!]): [page_history_protocol!]!
  create_page_history_protocol_item(data: create_page_history_protocol_input!): page_history_protocol
  create_page_contact_contact_address_items(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_contact_contact_address_input!]): [page_contact_contact_address!]!
  create_page_contact_contact_address_item(data: create_page_contact_contact_address_input!): page_contact_contact_address
  create_image_box_items(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_image_box_input!]): [image_box!]!
  create_image_box_item(data: create_image_box_input!): image_box
  create_posts_editor_nodes_items(filter: posts_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_posts_editor_nodes_input!]): [posts_editor_nodes!]!
  create_posts_editor_nodes_item(data: create_posts_editor_nodes_input!): posts_editor_nodes
  create_page_contact_files_items(filter: page_contact_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_contact_files_input!]): [page_contact_files!]!
  create_page_contact_files_item(data: create_page_contact_files_input!): page_contact_files
  create_party_location_items(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_party_location_input!]): [party_location!]!
  create_party_location_item(data: create_party_location_input!): party_location
  create_page_member_statements_items(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_member_statements_input!]): [page_member_statements!]!
  create_page_member_statements_item(data: create_page_member_statements_input!): page_member_statements
  create_member_product_items(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_member_product_input!]): [member_product!]!
  create_member_product_item(data: create_member_product_input!): member_product
  create_programs_directus_users_items(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_programs_directus_users_input!]): [programs_directus_users!]!
  create_programs_directus_users_item(data: create_programs_directus_users_input!): programs_directus_users
  create_programs_items(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_programs_input!]): [programs!]!
  create_programs_item(data: create_programs_input!): programs
  create_posts_items(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_posts_input!]): [posts!]!
  create_posts_item(data: create_posts_input!): posts
  create_posts_directus_users_1_items(filter: posts_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_posts_directus_users_1_input!]): [posts_directus_users_1!]!
  create_posts_directus_users_1_item(data: create_posts_directus_users_1_input!): posts_directus_users_1
  create_quote_items(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_quote_input!]): [quote!]!
  create_quote_item(data: create_quote_input!): quote
  create_info_box_items(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_info_box_input!]): [info_box!]!
  create_info_box_item(data: create_info_box_input!): info_box
  create_page_program_programs_3_items(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_3_input!]): [page_program_programs_3!]!
  create_page_program_programs_3_item(data: create_page_program_programs_3_input!): page_program_programs_3
  create_page_team_directus_users_items(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_team_directus_users_input!]): [page_team_directus_users!]!
  create_page_team_directus_users_item(data: create_page_team_directus_users_input!): page_team_directus_users
  create_page_program_programs_items(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_input!]): [page_program_programs!]!
  create_page_program_programs_item(data: create_page_program_programs_input!): page_program_programs
  create_page_team_directus_users_1_items(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_team_directus_users_1_input!]): [page_team_directus_users_1!]!
  create_page_team_directus_users_1_item(data: create_page_team_directus_users_1_input!): page_team_directus_users_1
  create_page_team_directus_users_2_items(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_team_directus_users_2_input!]): [page_team_directus_users_2!]!
  create_page_team_directus_users_2_item(data: create_page_team_directus_users_2_input!): page_team_directus_users_2
  create_page_program_programs_1_items(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_1_input!]): [page_program_programs_1!]!
  create_page_program_programs_1_item(data: create_page_program_programs_1_input!): page_program_programs_1
  create_page_program_programs_2_items(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_2_input!]): [page_program_programs_2!]!
  create_page_program_programs_2_item(data: create_page_program_programs_2_input!): page_program_programs_2
  create_page_history_files_items(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_files_input!]): [page_history_files!]!
  create_page_history_files_item(data: create_page_history_files_input!): page_history_files
  create_party_tips_items(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_party_tips_input!]): [party_tips!]!
  create_party_tips_item(data: create_party_tips_input!): party_tips
  create_contact_address_items(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_contact_address_input!]): [contact_address!]!
  create_contact_address_item(data: create_contact_address_input!): contact_address
  create_page_receive_nodes_items(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_receive_nodes_input!]): [page_receive_nodes!]!
  create_page_receive_nodes_item(data: create_page_receive_nodes_input!): page_receive_nodes
  create_page_history_nodes_items(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_nodes_input!]): [page_history_nodes!]!
  create_page_history_nodes_item(data: create_page_history_nodes_input!): page_history_nodes
  create_statements_items(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_statements_input!]): [statements!]!
  create_statements_item(data: create_statements_input!): statements
  create_orders_items(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_orders_input!]): [orders!]!
  create_orders_item(data: create_orders_input!): orders
  create_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  create_directus_sync_id_map_item(data: create_directus_sync_id_map_input!): directus_sync_id_map
  update_protocol_items(filter: protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_protocol_input!): [protocol!]!
  update_protocol_batch(filter: protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_protocol_input!]): [protocol!]!
  update_protocol_item(id: ID!, data: update_protocol_input!): protocol
  update_page_history_protocol_items(filter: page_history_protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_protocol_input!): [page_history_protocol!]!
  update_page_history_protocol_batch(filter: page_history_protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_protocol_input!]): [page_history_protocol!]!
  update_page_history_protocol_item(id: ID!, data: update_page_history_protocol_input!): page_history_protocol
  update_page_contact_contact_address_items(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_contact_contact_address_input!): [page_contact_contact_address!]!
  update_page_contact_contact_address_batch(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_contact_contact_address_input!]): [page_contact_contact_address!]!
  update_page_contact_contact_address_item(id: ID!, data: update_page_contact_contact_address_input!): page_contact_contact_address
  update_image_box_items(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_image_box_input!): [image_box!]!
  update_image_box_batch(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_image_box_input!]): [image_box!]!
  update_image_box_item(id: ID!, data: update_image_box_input!): image_box
  update_posts_editor_nodes_items(filter: posts_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_posts_editor_nodes_input!): [posts_editor_nodes!]!
  update_posts_editor_nodes_batch(filter: posts_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_posts_editor_nodes_input!]): [posts_editor_nodes!]!
  update_posts_editor_nodes_item(id: ID!, data: update_posts_editor_nodes_input!): posts_editor_nodes
  update_page_contact_files_items(filter: page_contact_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_contact_files_input!): [page_contact_files!]!
  update_page_contact_files_batch(filter: page_contact_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_contact_files_input!]): [page_contact_files!]!
  update_page_contact_files_item(id: ID!, data: update_page_contact_files_input!): page_contact_files
  update_party_location_items(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_party_location_input!): [party_location!]!
  update_party_location_batch(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_party_location_input!]): [party_location!]!
  update_party_location_item(id: ID!, data: update_party_location_input!): party_location
  update_page_member_statements_items(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_member_statements_input!): [page_member_statements!]!
  update_page_member_statements_batch(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_member_statements_input!]): [page_member_statements!]!
  update_page_member_statements_item(id: ID!, data: update_page_member_statements_input!): page_member_statements
  update_member_product_items(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_member_product_input!): [member_product!]!
  update_member_product_batch(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_member_product_input!]): [member_product!]!
  update_member_product_item(id: ID!, data: update_member_product_input!): member_product
  update_config(data: update_config_input!): config
  update_programs_directus_users_items(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_programs_directus_users_input!): [programs_directus_users!]!
  update_programs_directus_users_batch(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_programs_directus_users_input!]): [programs_directus_users!]!
  update_programs_directus_users_item(id: ID!, data: update_programs_directus_users_input!): programs_directus_users
  update_programs_items(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_programs_input!): [programs!]!
  update_programs_batch(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_programs_input!]): [programs!]!
  update_programs_item(id: ID!, data: update_programs_input!): programs
  update_posts_items(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_posts_input!): [posts!]!
  update_posts_batch(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_posts_input!]): [posts!]!
  update_posts_item(id: ID!, data: update_posts_input!): posts
  update_page_contact(data: update_page_contact_input!): page_contact
  update_posts_directus_users_1_items(filter: posts_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_posts_directus_users_1_input!): [posts_directus_users_1!]!
  update_posts_directus_users_1_batch(filter: posts_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_posts_directus_users_1_input!]): [posts_directus_users_1!]!
  update_posts_directus_users_1_item(id: ID!, data: update_posts_directus_users_1_input!): posts_directus_users_1
  update_page_programs(data: update_page_programs_input!): page_programs
  update_page_agb(data: update_page_agb_input!): page_agb
  update_quote_items(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_quote_input!): [quote!]!
  update_quote_batch(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_quote_input!]): [quote!]!
  update_quote_item(id: ID!, data: update_quote_input!): quote
  update_info_box_items(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_info_box_input!): [info_box!]!
  update_info_box_batch(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_info_box_input!]): [info_box!]!
  update_info_box_item(id: ID!, data: update_info_box_input!): info_box
  update_page_impressum(data: update_page_impressum_input!): page_impressum
  update_page_team(data: update_page_team_input!): page_team
  update_page_program_programs_3_items(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_3_input!): [page_program_programs_3!]!
  update_page_program_programs_3_batch(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_3_input!]): [page_program_programs_3!]!
  update_page_program_programs_3_item(id: ID!, data: update_page_program_programs_3_input!): page_program_programs_3
  update_page_team_directus_users_items(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_team_directus_users_input!): [page_team_directus_users!]!
  update_page_team_directus_users_batch(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_team_directus_users_input!]): [page_team_directus_users!]!
  update_page_team_directus_users_item(id: ID!, data: update_page_team_directus_users_input!): page_team_directus_users
  update_page_program_programs_items(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_input!): [page_program_programs!]!
  update_page_program_programs_batch(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_input!]): [page_program_programs!]!
  update_page_program_programs_item(id: ID!, data: update_page_program_programs_input!): page_program_programs
  update_page_team_directus_users_1_items(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_team_directus_users_1_input!): [page_team_directus_users_1!]!
  update_page_team_directus_users_1_batch(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_team_directus_users_1_input!]): [page_team_directus_users_1!]!
  update_page_team_directus_users_1_item(id: ID!, data: update_page_team_directus_users_1_input!): page_team_directus_users_1
  update_page_team_directus_users_2_items(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_team_directus_users_2_input!): [page_team_directus_users_2!]!
  update_page_team_directus_users_2_batch(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_team_directus_users_2_input!]): [page_team_directus_users_2!]!
  update_page_team_directus_users_2_item(id: ID!, data: update_page_team_directus_users_2_input!): page_team_directus_users_2
  update_page_program_programs_1_items(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_1_input!): [page_program_programs_1!]!
  update_page_program_programs_1_batch(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_1_input!]): [page_program_programs_1!]!
  update_page_program_programs_1_item(id: ID!, data: update_page_program_programs_1_input!): page_program_programs_1
  update_page_program_programs_2_items(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_2_input!): [page_program_programs_2!]!
  update_page_program_programs_2_batch(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_2_input!]): [page_program_programs_2!]!
  update_page_program_programs_2_item(id: ID!, data: update_page_program_programs_2_input!): page_program_programs_2
  update_page_history_files_items(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_files_input!): [page_history_files!]!
  update_page_history_files_batch(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_files_input!]): [page_history_files!]!
  update_page_history_files_item(id: ID!, data: update_page_history_files_input!): page_history_files
  update_page_program(data: update_page_program_input!): page_program
  update_page_receive(data: update_page_receive_input!): page_receive
  update_party_tips_items(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_party_tips_input!): [party_tips!]!
  update_party_tips_batch(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_party_tips_input!]): [party_tips!]!
  update_party_tips_item(id: ID!, data: update_party_tips_input!): party_tips
  update_page_history(data: update_page_history_input!): page_history
  update_page_member(data: update_page_member_input!): page_member
  update_contact_address_items(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_contact_address_input!): [contact_address!]!
  update_contact_address_batch(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_contact_address_input!]): [contact_address!]!
  update_contact_address_item(id: ID!, data: update_contact_address_input!): contact_address
  update_page_receive_nodes_items(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_receive_nodes_input!): [page_receive_nodes!]!
  update_page_receive_nodes_batch(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_receive_nodes_input!]): [page_receive_nodes!]!
  update_page_receive_nodes_item(id: ID!, data: update_page_receive_nodes_input!): page_receive_nodes
  update_page_history_nodes_items(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_nodes_input!): [page_history_nodes!]!
  update_page_history_nodes_batch(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_nodes_input!]): [page_history_nodes!]!
  update_page_history_nodes_item(id: ID!, data: update_page_history_nodes_input!): page_history_nodes
  update_statements_items(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_statements_input!): [statements!]!
  update_statements_batch(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_statements_input!]): [statements!]!
  update_statements_item(id: ID!, data: update_statements_input!): statements
  update_orders_items(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_orders_input!): [orders!]!
  update_orders_batch(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_orders_input!]): [orders!]!
  update_orders_item(id: ID!, data: update_orders_input!): orders
  update_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_sync_id_map_input!): [directus_sync_id_map!]!
  update_directus_sync_id_map_batch(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  update_directus_sync_id_map_item(id: ID!, data: update_directus_sync_id_map_input!): directus_sync_id_map
  delete_protocol_items(ids: [ID]!): delete_many
  delete_protocol_item(id: ID!): delete_one
  delete_page_history_protocol_items(ids: [ID]!): delete_many
  delete_page_history_protocol_item(id: ID!): delete_one
  delete_page_contact_contact_address_items(ids: [ID]!): delete_many
  delete_page_contact_contact_address_item(id: ID!): delete_one
  delete_image_box_items(ids: [ID]!): delete_many
  delete_image_box_item(id: ID!): delete_one
  delete_posts_editor_nodes_items(ids: [ID]!): delete_many
  delete_posts_editor_nodes_item(id: ID!): delete_one
  delete_page_contact_files_items(ids: [ID]!): delete_many
  delete_page_contact_files_item(id: ID!): delete_one
  delete_party_location_items(ids: [ID]!): delete_many
  delete_party_location_item(id: ID!): delete_one
  delete_page_member_statements_items(ids: [ID]!): delete_many
  delete_page_member_statements_item(id: ID!): delete_one
  delete_member_product_items(ids: [ID]!): delete_many
  delete_member_product_item(id: ID!): delete_one
  delete_programs_directus_users_items(ids: [ID]!): delete_many
  delete_programs_directus_users_item(id: ID!): delete_one
  delete_programs_items(ids: [ID]!): delete_many
  delete_programs_item(id: ID!): delete_one
  delete_posts_items(ids: [ID]!): delete_many
  delete_posts_item(id: ID!): delete_one
  delete_posts_directus_users_1_items(ids: [ID]!): delete_many
  delete_posts_directus_users_1_item(id: ID!): delete_one
  delete_quote_items(ids: [ID]!): delete_many
  delete_quote_item(id: ID!): delete_one
  delete_info_box_items(ids: [ID]!): delete_many
  delete_info_box_item(id: ID!): delete_one
  delete_page_program_programs_3_items(ids: [ID]!): delete_many
  delete_page_program_programs_3_item(id: ID!): delete_one
  delete_page_team_directus_users_items(ids: [ID]!): delete_many
  delete_page_team_directus_users_item(id: ID!): delete_one
  delete_page_program_programs_items(ids: [ID]!): delete_many
  delete_page_program_programs_item(id: ID!): delete_one
  delete_page_team_directus_users_1_items(ids: [ID]!): delete_many
  delete_page_team_directus_users_1_item(id: ID!): delete_one
  delete_page_team_directus_users_2_items(ids: [ID]!): delete_many
  delete_page_team_directus_users_2_item(id: ID!): delete_one
  delete_page_program_programs_1_items(ids: [ID]!): delete_many
  delete_page_program_programs_1_item(id: ID!): delete_one
  delete_page_program_programs_2_items(ids: [ID]!): delete_many
  delete_page_program_programs_2_item(id: ID!): delete_one
  delete_page_history_files_items(ids: [ID]!): delete_many
  delete_page_history_files_item(id: ID!): delete_one
  delete_party_tips_items(ids: [ID]!): delete_many
  delete_party_tips_item(id: ID!): delete_one
  delete_contact_address_items(ids: [ID]!): delete_many
  delete_contact_address_item(id: ID!): delete_one
  delete_page_receive_nodes_items(ids: [ID]!): delete_many
  delete_page_receive_nodes_item(id: ID!): delete_one
  delete_page_history_nodes_items(ids: [ID]!): delete_many
  delete_page_history_nodes_item(id: ID!): delete_one
  delete_statements_items(ids: [ID]!): delete_many
  delete_statements_item(id: ID!): delete_one
  delete_orders_items(ids: [ID]!): delete_many
  delete_orders_item(id: ID!): delete_one
  delete_directus_sync_id_map_items(ids: [ID]!): delete_many
  delete_directus_sync_id_map_item(id: ID!): delete_one
}

type Subscription {
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  protocol_mutated(event: EventEnum): protocol_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  page_history_protocol_mutated(event: EventEnum): page_history_protocol_mutated
  page_contact_contact_address_mutated(event: EventEnum): page_contact_contact_address_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  image_box_mutated(event: EventEnum): image_box_mutated
  posts_editor_nodes_mutated(event: EventEnum): posts_editor_nodes_mutated
  page_contact_files_mutated(event: EventEnum): page_contact_files_mutated
  party_location_mutated(event: EventEnum): party_location_mutated
  directus_policies_mutated(event: EventEnum): directus_policies_mutated
  page_member_statements_mutated(event: EventEnum): page_member_statements_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  member_product_mutated(event: EventEnum): member_product_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_comments_mutated(event: EventEnum): directus_comments_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  config_mutated(event: EventEnum): config_mutated
  programs_directus_users_mutated(event: EventEnum): programs_directus_users_mutated
  programs_mutated(event: EventEnum): programs_mutated
  posts_mutated(event: EventEnum): posts_mutated
  page_contact_mutated(event: EventEnum): page_contact_mutated
  posts_directus_users_1_mutated(event: EventEnum): posts_directus_users_1_mutated
  page_programs_mutated(event: EventEnum): page_programs_mutated
  page_agb_mutated(event: EventEnum): page_agb_mutated
  quote_mutated(event: EventEnum): quote_mutated
  info_box_mutated(event: EventEnum): info_box_mutated
  page_impressum_mutated(event: EventEnum): page_impressum_mutated
  page_team_mutated(event: EventEnum): page_team_mutated
  page_program_programs_3_mutated(event: EventEnum): page_program_programs_3_mutated
  page_team_directus_users_mutated(event: EventEnum): page_team_directus_users_mutated
  page_program_programs_mutated(event: EventEnum): page_program_programs_mutated
  page_team_directus_users_1_mutated(event: EventEnum): page_team_directus_users_1_mutated
  page_team_directus_users_2_mutated(event: EventEnum): page_team_directus_users_2_mutated
  page_program_programs_1_mutated(event: EventEnum): page_program_programs_1_mutated
  page_program_programs_2_mutated(event: EventEnum): page_program_programs_2_mutated
  page_history_files_mutated(event: EventEnum): page_history_files_mutated
  page_program_mutated(event: EventEnum): page_program_mutated
  page_receive_mutated(event: EventEnum): page_receive_mutated
  party_tips_mutated(event: EventEnum): party_tips_mutated
  page_history_mutated(event: EventEnum): page_history_mutated
  page_member_mutated(event: EventEnum): page_member_mutated
  contact_address_mutated(event: EventEnum): contact_address_mutated
  page_receive_nodes_mutated(event: EventEnum): page_receive_nodes_mutated
  page_history_nodes_mutated(event: EventEnum): page_history_nodes_mutated
  statements_mutated(event: EventEnum): statements_mutated
  orders_mutated(event: EventEnum): orders_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""GeoJSON value"""
scalar GraphQLGeoJSON

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum EventEnum {
  create
  update
  delete
}

union page_history_nodes_item_union = image_box

union page_receive_nodes_item_union = info_box

union posts_editor_nodes_item_union = info_box | quote

type config {
  id: ID!
  front_end_url: String
}

type config_mutated {
  key: ID!
  event: EventEnum
  data: config
}

type contact_address {
  id: ID!
  name: String
  phone_number: String
  email: String
}

type contact_address_aggregated {
  group: JSON
  countAll: Int
  count: contact_address_aggregated_count
  countDistinct: contact_address_aggregated_count
  avg: contact_address_aggregated_fields
  sum: contact_address_aggregated_fields
  avgDistinct: contact_address_aggregated_fields
  sumDistinct: contact_address_aggregated_fields
  min: contact_address_aggregated_fields
  max: contact_address_aggregated_fields
}

type contact_address_aggregated_count {
  id: Int
  name: Int
  phone_number: Int
  email: Int
}

type contact_address_aggregated_fields {
  id: Float
}

type contact_address_mutated {
  key: ID!
  event: EventEnum
  data: contact_address
}

type count_functions {
  count: Int
}

type date_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_access {
  id: ID!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
  sort: Int
}

type directus_access_mutated {
  key: ID!
  event: EventEnum
  data: directus_access
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  comment: String
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_comments {
  id: ID!
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_comments_mutated {
  key: ID!
  event: EventEnum
  data: directus_comments
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  created_on: Date
  created_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  uploaded_on: Date
  uploaded_on_func: datetime_functions
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_policies {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions]
  permissions_func: count_functions
  users(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  users_func: count_functions
  roles(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  roles_func: count_functions
}

type directus_policies_mutated {
  key: ID!
  event: EventEnum
  data: directus_policies
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  parent(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  children(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles]
  children_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_aggregated {
  group: JSON
  countAll: Int
  count: directus_sync_id_map_aggregated_count
  countDistinct: directus_sync_id_map_aggregated_count
  avg: directus_sync_id_map_aggregated_fields
  sum: directus_sync_id_map_aggregated_fields
  avgDistinct: directus_sync_id_map_aggregated_fields
  sumDistinct: directus_sync_id_map_aggregated_fields
  min: directus_sync_id_map_aggregated_fields
  max: directus_sync_id_map_aggregated_fields
}

type directus_sync_id_map_aggregated_count {
  id: Int
  table: Int
  sync_id: Int
  local_id: Int
  created_at: Int
}

type directus_sync_id_map_aggregated_fields {
  id: Float
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  posts(filter: posts_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts_directus_users_1]
  posts_func: count_functions
  programs(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users]
  programs_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  delta: JSON
  delta_func: count_functions
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type image_box {
  id: ID!
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  text: String
  title: String
}

type image_box_aggregated {
  group: JSON
  countAll: Int
  count: image_box_aggregated_count
  countDistinct: image_box_aggregated_count
  avg: image_box_aggregated_fields
  sum: image_box_aggregated_fields
  avgDistinct: image_box_aggregated_fields
  sumDistinct: image_box_aggregated_fields
  min: image_box_aggregated_fields
  max: image_box_aggregated_fields
}

type image_box_aggregated_count {
  id: Int
  image: Int
  text: Int
  title: Int
}

type image_box_aggregated_fields {
  id: Float
}

type image_box_mutated {
  key: ID!
  event: EventEnum
  data: image_box
}

type info_box {
  id: ID!
  title: String
  text: JSON
  text_func: count_functions
}

type info_box_aggregated {
  group: JSON
  countAll: Int
  count: info_box_aggregated_count
  countDistinct: info_box_aggregated_count
  avg: info_box_aggregated_fields
  sum: info_box_aggregated_fields
  avgDistinct: info_box_aggregated_fields
  sumDistinct: info_box_aggregated_fields
  min: info_box_aggregated_fields
  max: info_box_aggregated_fields
}

type info_box_aggregated_count {
  id: Int
  title: Int
  text: Int
}

type info_box_aggregated_fields {
  id: Float
}

type info_box_mutated {
  key: ID!
  event: EventEnum
  data: info_box
}

type member_product {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  label: String
  price: Float
}

type member_product_aggregated {
  group: JSON
  countAll: Int
  count: member_product_aggregated_count
  countDistinct: member_product_aggregated_count
  avg: member_product_aggregated_fields
  sum: member_product_aggregated_fields
  avgDistinct: member_product_aggregated_fields
  sumDistinct: member_product_aggregated_fields
  min: member_product_aggregated_fields
  max: member_product_aggregated_fields
}

type member_product_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  label: Int
  price: Int
}

type member_product_aggregated_fields {
  id: Float
  sort: Float
  price: Float
}

type member_product_mutated {
  key: ID!
  event: EventEnum
  data: member_product
}

type orders {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  status: String
  price: Float
  name: String
  token: String
  first_name: String
  family_name: String
  email: String
  address: String
  plz: String
  city: String
  phone_number: String
}

type orders_aggregated {
  group: JSON
  countAll: Int
  count: orders_aggregated_count
  countDistinct: orders_aggregated_count
  avg: orders_aggregated_fields
  sum: orders_aggregated_fields
  avgDistinct: orders_aggregated_fields
  sumDistinct: orders_aggregated_fields
  min: orders_aggregated_fields
  max: orders_aggregated_fields
}

type orders_aggregated_count {
  id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  status: Int
  price: Int
  name: Int
  token: Int
  first_name: Int
  family_name: Int
  email: Int
  address: Int
  plz: Int
  city: Int
  phone_number: Int
}

type orders_aggregated_fields {
  price: Float
}

type orders_mutated {
  key: ID!
  event: EventEnum
  data: orders
}

type page_agb {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
}

type page_agb_mutated {
  key: ID!
  event: EventEnum
  data: page_agb
}

type page_contact {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  contact_addresses(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_contact_address]
  contact_addresses_func: count_functions
  partner_logos(filter: page_contact_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_files]
  partner_logos_func: count_functions
}

type page_contact_contact_address {
  id: ID!
  page_contact_id(filter: page_contact_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_contact
  contact_address_id(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): contact_address
}

type page_contact_contact_address_aggregated {
  group: JSON
  countAll: Int
  count: page_contact_contact_address_aggregated_count
  countDistinct: page_contact_contact_address_aggregated_count
  avg: page_contact_contact_address_aggregated_fields
  sum: page_contact_contact_address_aggregated_fields
  avgDistinct: page_contact_contact_address_aggregated_fields
  sumDistinct: page_contact_contact_address_aggregated_fields
  min: page_contact_contact_address_aggregated_fields
  max: page_contact_contact_address_aggregated_fields
}

type page_contact_contact_address_aggregated_count {
  id: Int
  page_contact_id: Int
  contact_address_id: Int
}

type page_contact_contact_address_aggregated_fields {
  id: Float
  page_contact_id: Float
  contact_address_id: Float
}

type page_contact_contact_address_mutated {
  key: ID!
  event: EventEnum
  data: page_contact_contact_address
}

type page_contact_files {
  id: ID!
  page_contact_id(filter: page_contact_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_contact
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type page_contact_files_aggregated {
  group: JSON
  countAll: Int
  count: page_contact_files_aggregated_count
  countDistinct: page_contact_files_aggregated_count
  avg: page_contact_files_aggregated_fields
  sum: page_contact_files_aggregated_fields
  avgDistinct: page_contact_files_aggregated_fields
  sumDistinct: page_contact_files_aggregated_fields
  min: page_contact_files_aggregated_fields
  max: page_contact_files_aggregated_fields
}

type page_contact_files_aggregated_count {
  id: Int
  page_contact_id: Int
  directus_files_id: Int
}

type page_contact_files_aggregated_fields {
  id: Float
  page_contact_id: Float
}

type page_contact_files_mutated {
  key: ID!
  event: EventEnum
  data: page_contact_files
}

type page_contact_mutated {
  key: ID!
  event: EventEnum
  data: page_contact
}

type page_history {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  vision(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  statutes(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  protocols(filter: page_history_protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_protocol]
  protocols_func: count_functions
  editor_nodes(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_nodes]
  editor_nodes_func: count_functions
  logos(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files]
  logos_func: count_functions
}

type page_history_files {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type page_history_files_aggregated {
  group: JSON
  countAll: Int
  count: page_history_files_aggregated_count
  countDistinct: page_history_files_aggregated_count
  avg: page_history_files_aggregated_fields
  sum: page_history_files_aggregated_fields
  avgDistinct: page_history_files_aggregated_fields
  sumDistinct: page_history_files_aggregated_fields
  min: page_history_files_aggregated_fields
  max: page_history_files_aggregated_fields
}

type page_history_files_aggregated_count {
  id: Int
  page_history_id: Int
  directus_files_id: Int
}

type page_history_files_aggregated_fields {
  id: Float
  page_history_id: Float
}

type page_history_files_mutated {
  key: ID!
  event: EventEnum
  data: page_history_files
}

type page_history_mutated {
  key: ID!
  event: EventEnum
  data: page_history
}

type page_history_nodes {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  item: page_history_nodes_item_union
  collection: String
}

type page_history_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_history_nodes_aggregated_count
  countDistinct: page_history_nodes_aggregated_count
  avg: page_history_nodes_aggregated_fields
  sum: page_history_nodes_aggregated_fields
  avgDistinct: page_history_nodes_aggregated_fields
  sumDistinct: page_history_nodes_aggregated_fields
  min: page_history_nodes_aggregated_fields
  max: page_history_nodes_aggregated_fields
}

type page_history_nodes_aggregated_count {
  id: Int
  page_history_id: Int
  item: Int
  collection: Int
}

type page_history_nodes_aggregated_fields {
  page_history_id: Float
}

type page_history_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_history_nodes
}

type page_history_protocol {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  protocol_id(filter: protocol_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): protocol
}

type page_history_protocol_aggregated {
  group: JSON
  countAll: Int
  count: page_history_protocol_aggregated_count
  countDistinct: page_history_protocol_aggregated_count
  avg: page_history_protocol_aggregated_fields
  sum: page_history_protocol_aggregated_fields
  avgDistinct: page_history_protocol_aggregated_fields
  sumDistinct: page_history_protocol_aggregated_fields
  min: page_history_protocol_aggregated_fields
  max: page_history_protocol_aggregated_fields
}

type page_history_protocol_aggregated_count {
  id: Int
  page_history_id: Int
  protocol_id: Int
}

type page_history_protocol_aggregated_fields {
  id: Float
  page_history_id: Float
  protocol_id: Float
}

type page_history_protocol_mutated {
  key: ID!
  event: EventEnum
  data: page_history_protocol
}

type page_impressum {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
}

type page_impressum_mutated {
  key: ID!
  event: EventEnum
  data: page_impressum
}

type page_member {
  id: ID!
  content: JSON
  content_func: count_functions
}

type page_member_mutated {
  key: ID!
  event: EventEnum
  data: page_member
}

type page_member_statements {
  id: ID!
  page_member_id(filter: page_member_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_member
  statements_id(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): statements
}

type page_member_statements_aggregated {
  group: JSON
  countAll: Int
  count: page_member_statements_aggregated_count
  countDistinct: page_member_statements_aggregated_count
  avg: page_member_statements_aggregated_fields
  sum: page_member_statements_aggregated_fields
  avgDistinct: page_member_statements_aggregated_fields
  sumDistinct: page_member_statements_aggregated_fields
  min: page_member_statements_aggregated_fields
  max: page_member_statements_aggregated_fields
}

type page_member_statements_aggregated_count {
  id: Int
  page_member_id: Int
  statements_id: Int
}

type page_member_statements_aggregated_fields {
  id: Float
  page_member_id: Float
  statements_id: Float
}

type page_member_statements_mutated {
  key: ID!
  event: EventEnum
  data: page_member_statements
}

type page_program {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_3(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_3]
  programs_group_3_func: count_functions
  programs_group_1(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_2]
  programs_group_1_func: count_functions
  programs_group_2(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_1]
  programs_group_2_func: count_functions
}

type page_program_mutated {
  key: ID!
  event: EventEnum
  data: page_program
}

type page_program_programs {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_1 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_1_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_1_aggregated_count
  countDistinct: page_program_programs_1_aggregated_count
  avg: page_program_programs_1_aggregated_fields
  sum: page_program_programs_1_aggregated_fields
  avgDistinct: page_program_programs_1_aggregated_fields
  sumDistinct: page_program_programs_1_aggregated_fields
  min: page_program_programs_1_aggregated_fields
  max: page_program_programs_1_aggregated_fields
}

type page_program_programs_1_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_1_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_1_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_1
}

type page_program_programs_2 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_2_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_2_aggregated_count
  countDistinct: page_program_programs_2_aggregated_count
  avg: page_program_programs_2_aggregated_fields
  sum: page_program_programs_2_aggregated_fields
  avgDistinct: page_program_programs_2_aggregated_fields
  sumDistinct: page_program_programs_2_aggregated_fields
  min: page_program_programs_2_aggregated_fields
  max: page_program_programs_2_aggregated_fields
}

type page_program_programs_2_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_2_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_2_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_2
}

type page_program_programs_3 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_3_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_3_aggregated_count
  countDistinct: page_program_programs_3_aggregated_count
  avg: page_program_programs_3_aggregated_fields
  sum: page_program_programs_3_aggregated_fields
  avgDistinct: page_program_programs_3_aggregated_fields
  sumDistinct: page_program_programs_3_aggregated_fields
  min: page_program_programs_3_aggregated_fields
  max: page_program_programs_3_aggregated_fields
}

type page_program_programs_3_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_3_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_3_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_3
}

type page_program_programs_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_aggregated_count
  countDistinct: page_program_programs_aggregated_count
  avg: page_program_programs_aggregated_fields
  sum: page_program_programs_aggregated_fields
  avgDistinct: page_program_programs_aggregated_fields
  sumDistinct: page_program_programs_aggregated_fields
  min: page_program_programs_aggregated_fields
  max: page_program_programs_aggregated_fields
}

type page_program_programs_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs
}

type page_programs {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  text: String
}

type page_programs_mutated {
  key: ID!
  event: EventEnum
  data: page_programs
}

type page_receive {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_receive_nodes]
  editor_nodes_func: count_functions
}

type page_receive_mutated {
  key: ID!
  event: EventEnum
  data: page_receive
}

type page_receive_nodes {
  id: ID!
  page_receive_id(filter: page_receive_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_receive
  item: page_receive_nodes_item_union
  collection: String
}

type page_receive_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_receive_nodes_aggregated_count
  countDistinct: page_receive_nodes_aggregated_count
  avg: page_receive_nodes_aggregated_fields
  sum: page_receive_nodes_aggregated_fields
  avgDistinct: page_receive_nodes_aggregated_fields
  sumDistinct: page_receive_nodes_aggregated_fields
  min: page_receive_nodes_aggregated_fields
  max: page_receive_nodes_aggregated_fields
}

type page_receive_nodes_aggregated_count {
  id: Int
  page_receive_id: Int
  item: Int
  collection: Int
}

type page_receive_nodes_aggregated_fields {
  page_receive_id: Float
}

type page_receive_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_receive_nodes
}

type page_team {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  text: String
  members_program(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_2]
  members_program_func: count_functions
  members_management(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_1]
  members_management_func: count_functions
  members_staff(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users]
  members_staff_func: count_functions
}

type page_team_directus_users {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_1 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_1_aggregated {
  group: JSON
  countAll: Int
  count: page_team_directus_users_1_aggregated_count
  countDistinct: page_team_directus_users_1_aggregated_count
  avg: page_team_directus_users_1_aggregated_fields
  sum: page_team_directus_users_1_aggregated_fields
  avgDistinct: page_team_directus_users_1_aggregated_fields
  sumDistinct: page_team_directus_users_1_aggregated_fields
  min: page_team_directus_users_1_aggregated_fields
  max: page_team_directus_users_1_aggregated_fields
}

type page_team_directus_users_1_aggregated_count {
  id: Int
  page_team_id: Int
  directus_users_id: Int
}

type page_team_directus_users_1_aggregated_fields {
  id: Float
  page_team_id: Float
}

type page_team_directus_users_1_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_1
}

type page_team_directus_users_2 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_2_aggregated {
  group: JSON
  countAll: Int
  count: page_team_directus_users_2_aggregated_count
  countDistinct: page_team_directus_users_2_aggregated_count
  avg: page_team_directus_users_2_aggregated_fields
  sum: page_team_directus_users_2_aggregated_fields
  avgDistinct: page_team_directus_users_2_aggregated_fields
  sumDistinct: page_team_directus_users_2_aggregated_fields
  min: page_team_directus_users_2_aggregated_fields
  max: page_team_directus_users_2_aggregated_fields
}

type page_team_directus_users_2_aggregated_count {
  id: Int
  page_team_id: Int
  directus_users_id: Int
}

type page_team_directus_users_2_aggregated_fields {
  id: Float
  page_team_id: Float
}

type page_team_directus_users_2_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_2
}

type page_team_directus_users_aggregated {
  group: JSON
  countAll: Int
  count: page_team_directus_users_aggregated_count
  countDistinct: page_team_directus_users_aggregated_count
  avg: page_team_directus_users_aggregated_fields
  sum: page_team_directus_users_aggregated_fields
  avgDistinct: page_team_directus_users_aggregated_fields
  sumDistinct: page_team_directus_users_aggregated_fields
  min: page_team_directus_users_aggregated_fields
  max: page_team_directus_users_aggregated_fields
}

type page_team_directus_users_aggregated_count {
  id: Int
  page_team_id: Int
  directus_users_id: Int
}

type page_team_directus_users_aggregated_fields {
  id: Float
  page_team_id: Float
}

type page_team_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users
}

type page_team_mutated {
  key: ID!
  event: EventEnum
  data: page_team
}

type party_location {
  id: ID!
  url: String
  address_line_1: String
  address_line_2: String
  logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type party_location_aggregated {
  group: JSON
  countAll: Int
  count: party_location_aggregated_count
  countDistinct: party_location_aggregated_count
  avg: party_location_aggregated_fields
  sum: party_location_aggregated_fields
  avgDistinct: party_location_aggregated_fields
  sumDistinct: party_location_aggregated_fields
  min: party_location_aggregated_fields
  max: party_location_aggregated_fields
}

type party_location_aggregated_count {
  id: Int
  url: Int
  address_line_1: Int
  address_line_2: Int
  logo: Int
}

type party_location_aggregated_fields {
  id: Float
}

type party_location_mutated {
  key: ID!
  event: EventEnum
  data: party_location
}

type party_tips {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  date: Date
  date_func: datetime_functions
  title_2: String
  title_1: String
  party_location(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): party_location
}

type party_tips_aggregated {
  group: JSON
  countAll: Int
  count: party_tips_aggregated_count
  countDistinct: party_tips_aggregated_count
  avg: party_tips_aggregated_fields
  sum: party_tips_aggregated_fields
  avgDistinct: party_tips_aggregated_fields
  sumDistinct: party_tips_aggregated_fields
  min: party_tips_aggregated_fields
  max: party_tips_aggregated_fields
}

type party_tips_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  date: Int
  title_2: Int
  title_1: Int
  party_location: Int
}

type party_tips_aggregated_fields {
  id: Float
  sort: Float
  party_location: Float
}

type party_tips_mutated {
  key: ID!
  event: EventEnum
  data: party_tips
}

type posts {
  slug: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  date: Date
  date_func: date_functions
  imageTitle: String
  imageText: String
  program(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
  audio(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  content: JSON
  content_func: count_functions
  authors(filter: posts_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts_directus_users_1]
  authors_func: count_functions
  editor_nodes(filter: posts_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts_editor_nodes]
  editor_nodes_func: count_functions
}

type posts_aggregated {
  group: JSON
  countAll: Int
  count: posts_aggregated_count
  countDistinct: posts_aggregated_count
  avg: posts_aggregated_fields
  sum: posts_aggregated_fields
  avgDistinct: posts_aggregated_fields
  sumDistinct: posts_aggregated_fields
  min: posts_aggregated_fields
  max: posts_aggregated_fields
}

type posts_aggregated_count {
  slug: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  title: Int
  image: Int
  date: Int
  imageTitle: Int
  imageText: Int
  program: Int

  """Maximale Dateigrösse 100MB"""
  audio: Int
  content: Int
  authors: Int
  editor_nodes: Int
}

type posts_aggregated_fields {
  sort: Float
}

type posts_directus_users_1 {
  id: ID!
  posts_slug(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): posts
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type posts_directus_users_1_aggregated {
  group: JSON
  countAll: Int
  count: posts_directus_users_1_aggregated_count
  countDistinct: posts_directus_users_1_aggregated_count
  avg: posts_directus_users_1_aggregated_fields
  sum: posts_directus_users_1_aggregated_fields
  avgDistinct: posts_directus_users_1_aggregated_fields
  sumDistinct: posts_directus_users_1_aggregated_fields
  min: posts_directus_users_1_aggregated_fields
  max: posts_directus_users_1_aggregated_fields
}

type posts_directus_users_1_aggregated_count {
  id: Int
  posts_slug: Int
  directus_users_id: Int
}

type posts_directus_users_1_aggregated_fields {
  id: Float
}

type posts_directus_users_1_mutated {
  key: ID!
  event: EventEnum
  data: posts_directus_users_1
}

type posts_editor_nodes {
  id: ID!
  posts_slug(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): posts
  item: posts_editor_nodes_item_union
  collection: String
}

type posts_editor_nodes_aggregated {
  group: JSON
  countAll: Int
  count: posts_editor_nodes_aggregated_count
  countDistinct: posts_editor_nodes_aggregated_count
}

type posts_editor_nodes_aggregated_count {
  id: Int
  posts_slug: Int
  item: Int
  collection: Int
}

type posts_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: posts_editor_nodes
}

type posts_mutated {
  key: ID!
  event: EventEnum
  data: posts
}

type programs {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  description: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  posts(filter: posts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [posts]
  posts_func: count_functions
  team(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users]
  team_func: count_functions
}

type programs_aggregated {
  group: JSON
  countAll: Int
  count: programs_aggregated_count
  countDistinct: programs_aggregated_count
  avg: programs_aggregated_fields
  sum: programs_aggregated_fields
  avgDistinct: programs_aggregated_fields
  sumDistinct: programs_aggregated_fields
  min: programs_aggregated_fields
  max: programs_aggregated_fields
}

type programs_aggregated_count {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  description: Int
  image: Int
  posts: Int
  team: Int
}

type programs_aggregated_fields {
  sort: Float
}

type programs_directus_users {
  id: ID!
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type programs_directus_users_aggregated {
  group: JSON
  countAll: Int
  count: programs_directus_users_aggregated_count
  countDistinct: programs_directus_users_aggregated_count
  avg: programs_directus_users_aggregated_fields
  sum: programs_directus_users_aggregated_fields
  avgDistinct: programs_directus_users_aggregated_fields
  sumDistinct: programs_directus_users_aggregated_fields
  min: programs_directus_users_aggregated_fields
  max: programs_directus_users_aggregated_fields
}

type programs_directus_users_aggregated_count {
  id: Int
  programs_slug: Int
  directus_users_id: Int
}

type programs_directus_users_aggregated_fields {
  id: Float
}

type programs_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: programs_directus_users
}

type programs_mutated {
  key: ID!
  event: EventEnum
  data: programs
}

type protocol {
  id: ID!
  name: String
  file(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type protocol_aggregated {
  group: JSON
  countAll: Int
  count: protocol_aggregated_count
  countDistinct: protocol_aggregated_count
  avg: protocol_aggregated_fields
  sum: protocol_aggregated_fields
  avgDistinct: protocol_aggregated_fields
  sumDistinct: protocol_aggregated_fields
  min: protocol_aggregated_fields
  max: protocol_aggregated_fields
}

type protocol_aggregated_count {
  id: Int
  name: Int
  file: Int
}

type protocol_aggregated_fields {
  id: Float
}

type protocol_mutated {
  key: ID!
  event: EventEnum
  data: protocol
}

type quote {
  id: ID!
  text: String
  info: String
  author: String
}

type quote_aggregated {
  group: JSON
  countAll: Int
  count: quote_aggregated_count
  countDistinct: quote_aggregated_count
  avg: quote_aggregated_fields
  sum: quote_aggregated_fields
  avgDistinct: quote_aggregated_fields
  sumDistinct: quote_aggregated_fields
  min: quote_aggregated_fields
  max: quote_aggregated_fields
}

type quote_aggregated_count {
  id: Int
  text: Int
  info: Int
  author: Int
}

type quote_aggregated_fields {
  id: Float
}

type quote_mutated {
  key: ID!
  event: EventEnum
  data: quote
}

type statements {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  text: String
  author: String
}

type statements_aggregated {
  group: JSON
  countAll: Int
  count: statements_aggregated_count
  countDistinct: statements_aggregated_count
  avg: statements_aggregated_fields
  sum: statements_aggregated_fields
  avgDistinct: statements_aggregated_fields
  sumDistinct: statements_aggregated_fields
  min: statements_aggregated_fields
  max: statements_aggregated_fields
}

type statements_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  text: Int
  author: Int
}

type statements_aggregated_fields {
  id: Float
  sort: Float
}

type statements_mutated {
  key: ID!
  event: EventEnum
  data: statements
}

""""""
type version_config {
  id: ID
  front_end_url: String
}

""""""
type version_contact_address {
  id: ID
  name: String
  phone_number: String
  email: String
}

""""""
type version_directus_sync_id_map {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

""""""
type version_image_box {
  id: ID
  image: JSON
  text: String
  title: String
}

""""""
type version_info_box {
  id: ID
  title: String
  text: JSON
}

""""""
type version_member_product {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  label: String
  price: Float
}

""""""
type version_orders {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  status: String
  price: Float
  name: String
  token: String
  first_name: String
  family_name: String
  email: String
  address: String
  plz: String
  city: String
  phone_number: String
}

""""""
type version_page_agb {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
}

""""""
type version_page_contact {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  contact_addresses: JSON
  partner_logos: JSON
}

""""""
type version_page_contact_contact_address {
  id: ID
  page_contact_id: JSON
  contact_address_id: JSON
}

""""""
type version_page_contact_files {
  id: ID
  page_contact_id: JSON
  directus_files_id: JSON
}

""""""
type version_page_history {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
  vision: JSON
  statutes: JSON
  protocols: JSON
  editor_nodes: JSON
  logos: JSON
}

""""""
type version_page_history_files {
  id: ID
  page_history_id: JSON
  directus_files_id: JSON
}

""""""
type version_page_history_nodes {
  id: ID
  page_history_id: JSON
  item: String
  collection: String
}

""""""
type version_page_history_protocol {
  id: ID
  page_history_id: JSON
  protocol_id: JSON
}

""""""
type version_page_impressum {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
}

""""""
type version_page_member {
  id: ID
  content: JSON
}

""""""
type version_page_member_statements {
  id: ID
  page_member_id: JSON
  statements_id: JSON
}

""""""
type version_page_program {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_3: JSON
  programs_group_1: JSON
  programs_group_2: JSON
}

""""""
type version_page_program_programs {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_program_programs_1 {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_program_programs_2 {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_program_programs_3 {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_programs {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String
  text: String
}

""""""
type version_page_receive {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
  editor_nodes: JSON
}

""""""
type version_page_receive_nodes {
  id: ID
  page_receive_id: JSON
  item: String
  collection: String
}

""""""
type version_page_team {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  text: String
  members_program: JSON
  members_management: JSON
  members_staff: JSON
}

""""""
type version_page_team_directus_users {
  id: ID
  page_team_id: JSON
  directus_users_id: JSON
}

""""""
type version_page_team_directus_users_1 {
  id: ID
  page_team_id: JSON
  directus_users_id: JSON
}

""""""
type version_page_team_directus_users_2 {
  id: ID
  page_team_id: JSON
  directus_users_id: JSON
}

""""""
type version_party_location {
  id: ID
  url: String
  address_line_1: String
  address_line_2: String
  logo: JSON
}

""""""
type version_party_tips {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  date: Date
  title_2: String
  title_1: String
  party_location: JSON
}

""""""
type version_posts {
  slug: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String
  image: JSON
  date: Date
  imageTitle: String
  imageText: String
  program: JSON
  audio: JSON
  content: JSON
  authors: JSON
  editor_nodes: JSON
}

""""""
type version_posts_directus_users_1 {
  id: ID
  posts_slug: JSON
  directus_users_id: JSON
}

""""""
type version_posts_editor_nodes {
  id: ID
  posts_slug: JSON
  item: String
  collection: String
}

""""""
type version_programs {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  description: String
  image: JSON
  posts: JSON
  team: JSON
}

""""""
type version_programs_directus_users {
  id: ID
  programs_slug: JSON
  directus_users_id: JSON
}

""""""
type version_protocol {
  id: ID
  name: String
  file: JSON
}

""""""
type version_quote {
  id: ID
  text: String
  info: String
  author: String
}

""""""
type version_statements {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  text: String
  author: String
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input contact_address_filter {
  id: number_filter_operators
  name: string_filter_operators
  phone_number: string_filter_operators
  email: string_filter_operators
  _and: [contact_address_filter]
  _or: [contact_address_filter]
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_contact_address_input {
  id: ID
  name: String
  phone_number: String
  email: String
}

input create_directus_access_input {
  id: ID
  role: create_directus_roles_input
  user: create_directus_users_input
  policy: create_directus_policies_input
  sort: Int
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  created_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_permissions_input {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: create_directus_policies_input
}

input create_directus_policies_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions: [create_directus_permissions_input]
  users: [create_directus_access_input]
  roles: [create_directus_access_input]
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  parent: create_directus_roles_input
  children: [create_directus_roles_input]
  policies: [create_directus_access_input]
  users: [create_directus_users_input]
}

input create_directus_sync_id_map_input {
  id: ID
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  posts: [create_posts_directus_users_1_input]
  programs: [create_programs_directus_users_input]
  policies: [create_directus_access_input]
}

input create_image_box_input {
  id: ID
  image: create_directus_files_input
  text: String
  title: String
}

input create_info_box_input {
  id: ID
  title: String
  text: JSON
}

input create_member_product_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  label: String
  price: Float
}

input create_orders_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  status: String
  price: Float
  name: String
  token: String
  first_name: String
  family_name: String
  email: String
  address: String
  plz: String
  city: String
  phone_number: String
}

input create_page_contact_contact_address_input {
  id: ID
  page_contact_id: create_page_contact_input
  contact_address_id: create_contact_address_input
}

input create_page_contact_files_input {
  id: ID
  page_contact_id: create_page_contact_input
  directus_files_id: create_directus_files_input
}

input create_page_contact_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  contact_addresses: [create_page_contact_contact_address_input]
  partner_logos: [create_page_contact_files_input]
}

input create_page_history_files_input {
  id: ID
  page_history_id: create_page_history_input
  directus_files_id: create_directus_files_input
}

input create_page_history_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  content: JSON
  vision: create_directus_files_input
  statutes: create_directus_files_input
  protocols: [create_page_history_protocol_input]
  editor_nodes: [create_page_history_nodes_input]
  logos: [create_page_history_files_input]
}

input create_page_history_nodes_input {
  id: ID
  page_history_id: create_page_history_input
  item: String
  collection: String
}

input create_page_history_protocol_input {
  id: ID
  page_history_id: create_page_history_input
  protocol_id: create_protocol_input
}

input create_page_member_input {
  id: ID
  content: JSON
}

input create_page_member_statements_input {
  id: ID
  page_member_id: create_page_member_input
  statements_id: create_statements_input
}

input create_page_program_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_3: [create_page_program_programs_3_input]
  programs_group_1: [create_page_program_programs_2_input]
  programs_group_2: [create_page_program_programs_1_input]
}

input create_page_program_programs_1_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_program_programs_2_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_program_programs_3_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_program_programs_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_receive_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [create_page_receive_nodes_input]
}

input create_page_receive_nodes_input {
  id: ID
  page_receive_id: create_page_receive_input
  item: String
  collection: String
}

input create_page_team_directus_users_1_input {
  id: ID
  page_team_id: create_page_team_input
  directus_users_id: create_directus_users_input
}

input create_page_team_directus_users_2_input {
  id: ID
  page_team_id: create_page_team_input
  directus_users_id: create_directus_users_input
}

input create_page_team_directus_users_input {
  id: ID
  page_team_id: create_page_team_input
  directus_users_id: create_directus_users_input
}

input create_page_team_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  text: String
  members_program: [create_page_team_directus_users_2_input]
  members_management: [create_page_team_directus_users_1_input]
  members_staff: [create_page_team_directus_users_input]
}

input create_party_location_input {
  id: ID
  url: String
  address_line_1: String
  address_line_2: String
  logo: create_directus_files_input
}

input create_party_tips_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  date: Date
  title_2: String
  title_1: String
  party_location: create_party_location_input
}

input create_posts_directus_users_1_input {
  id: ID
  posts_slug: create_posts_input
  directus_users_id: create_directus_users_input
}

input create_posts_editor_nodes_input {
  id: ID
  posts_slug: create_posts_input
  item: String
  collection: String
}

input create_posts_input {
  slug: ID!
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  title: String
  image: create_directus_files_input
  date: Date
  imageTitle: String
  imageText: String
  program: create_programs_input
  audio: create_directus_files_input
  content: JSON
  authors: [create_posts_directus_users_1_input]
  editor_nodes: [create_posts_editor_nodes_input]
}

input create_programs_directus_users_input {
  id: ID
  programs_slug: create_programs_input
  directus_users_id: create_directus_users_input
}

input create_programs_input {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID!
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  description: String
  image: create_directus_files_input
  posts: [create_posts_input]
  team: [create_programs_directus_users_input]
}

input create_protocol_input {
  id: ID
  name: String
  file: create_directus_files_input
}

input create_quote_input {
  id: ID
  text: String
  info: String
  author: String
}

input create_statements_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  text: String
  author: String
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input date_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_access_filter {
  id: string_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  created_on: date_filter_operators
  created_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_permissions_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
}

input directus_policies_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  permissions: directus_permissions_filter
  permissions_func: count_function_filter_operators
  users: directus_access_filter
  users_func: count_function_filter_operators
  roles: directus_access_filter
  roles_func: count_function_filter_operators
  _and: [directus_policies_filter]
  _or: [directus_policies_filter]
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_filter
  children_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_sync_id_map_filter {
  id: number_filter_operators
  table: string_filter_operators
  sync_id: string_filter_operators
  local_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  _and: [directus_sync_id_map_filter]
  _or: [directus_sync_id_map_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  posts: posts_directus_users_1_filter
  posts_func: count_function_filter_operators
  programs: programs_directus_users_filter
  programs_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input geometry_filter_operators {
  _eq: GraphQLGeoJSON
  _neq: GraphQLGeoJSON
  _intersects: GraphQLGeoJSON
  _nintersects: GraphQLGeoJSON
  _intersects_bbox: GraphQLGeoJSON
  _nintersects_bbox: GraphQLGeoJSON
  _null: Boolean
  _nnull: Boolean
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input image_box_filter {
  id: number_filter_operators
  image: directus_files_filter
  text: string_filter_operators
  title: string_filter_operators
  _and: [image_box_filter]
  _or: [image_box_filter]
}

input info_box_filter {
  id: number_filter_operators
  title: string_filter_operators
  text: string_filter_operators
  text_func: count_function_filter_operators
  _and: [info_box_filter]
  _or: [info_box_filter]
}

input member_product_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  label: string_filter_operators
  price: number_filter_operators
  _and: [member_product_filter]
  _or: [member_product_filter]
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input orders_filter {
  id: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  status: string_filter_operators
  price: number_filter_operators
  name: string_filter_operators
  token: string_filter_operators
  first_name: string_filter_operators
  family_name: string_filter_operators
  email: string_filter_operators
  address: string_filter_operators
  plz: string_filter_operators
  city: string_filter_operators
  phone_number: string_filter_operators
  _and: [orders_filter]
  _or: [orders_filter]
}

input page_contact_contact_address_filter {
  id: number_filter_operators
  page_contact_id: page_contact_filter
  contact_address_id: contact_address_filter
  _and: [page_contact_contact_address_filter]
  _or: [page_contact_contact_address_filter]
}

input page_contact_files_filter {
  id: number_filter_operators
  page_contact_id: page_contact_filter
  directus_files_id: directus_files_filter
  _and: [page_contact_files_filter]
  _or: [page_contact_files_filter]
}

input page_contact_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  street: string_filter_operators
  street_number: string_filter_operators
  plz: string_filter_operators
  city: string_filter_operators
  phone_number: string_filter_operators
  email: string_filter_operators
  studio_phone_number: string_filter_operators
  studio_email: string_filter_operators
  ombuds_name: string_filter_operators
  ombuds_street: string_filter_operators
  ombuds_street_number: string_filter_operators
  ombuds_plz: string_filter_operators
  ombuds_city: string_filter_operators
  ombuds_name_2: string_filter_operators
  ombuds_street_2: string_filter_operators
  ombuds_street_number_2: string_filter_operators
  ombuds_plz_2: string_filter_operators
  ombuds_city_2: string_filter_operators
  ombuds_postfach: string_filter_operators
  ombuds_postfach_2: string_filter_operators
  location: geometry_filter_operators
  contact_addresses: page_contact_contact_address_filter
  contact_addresses_func: count_function_filter_operators
  partner_logos: page_contact_files_filter
  partner_logos_func: count_function_filter_operators
  _and: [page_contact_filter]
  _or: [page_contact_filter]
}

input page_history_files_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  directus_files_id: directus_files_filter
  _and: [page_history_files_filter]
  _or: [page_history_files_filter]
}

input page_history_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  vision: directus_files_filter
  statutes: directus_files_filter
  protocols: page_history_protocol_filter
  protocols_func: count_function_filter_operators
  editor_nodes: page_history_nodes_filter
  editor_nodes_func: count_function_filter_operators
  logos: page_history_files_filter
  logos_func: count_function_filter_operators
  _and: [page_history_filter]
  _or: [page_history_filter]
}

input page_history_nodes_filter {
  id: string_filter_operators
  page_history_id: page_history_filter
  collection: string_filter_operators
  _and: [page_history_nodes_filter]
  _or: [page_history_nodes_filter]
  item__image_box: image_box_filter
}

input page_history_protocol_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  protocol_id: protocol_filter
  _and: [page_history_protocol_filter]
  _or: [page_history_protocol_filter]
}

input page_member_filter {
  id: number_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  _and: [page_member_filter]
  _or: [page_member_filter]
}

input page_member_statements_filter {
  id: number_filter_operators
  page_member_id: page_member_filter
  statements_id: statements_filter
  _and: [page_member_statements_filter]
  _or: [page_member_statements_filter]
}

input page_program_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  programs_group_1_title: string_filter_operators
  programs_group_2_title: string_filter_operators
  programs_group_3_title: string_filter_operators
  programs_group_3: page_program_programs_3_filter
  programs_group_3_func: count_function_filter_operators
  programs_group_1: page_program_programs_2_filter
  programs_group_1_func: count_function_filter_operators
  programs_group_2: page_program_programs_1_filter
  programs_group_2_func: count_function_filter_operators
  _and: [page_program_filter]
  _or: [page_program_filter]
}

input page_program_programs_1_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_1_filter]
  _or: [page_program_programs_1_filter]
}

input page_program_programs_2_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_2_filter]
  _or: [page_program_programs_2_filter]
}

input page_program_programs_3_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_3_filter]
  _or: [page_program_programs_3_filter]
}

input page_program_programs_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_filter]
  _or: [page_program_programs_filter]
}

input page_receive_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_receive_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [page_receive_filter]
  _or: [page_receive_filter]
}

input page_receive_nodes_filter {
  id: string_filter_operators
  page_receive_id: page_receive_filter
  collection: string_filter_operators
  _and: [page_receive_nodes_filter]
  _or: [page_receive_nodes_filter]
  item__info_box: info_box_filter
}

input page_team_directus_users_1_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_1_filter]
  _or: [page_team_directus_users_1_filter]
}

input page_team_directus_users_2_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_2_filter]
  _or: [page_team_directus_users_2_filter]
}

input page_team_directus_users_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_filter]
  _or: [page_team_directus_users_filter]
}

input page_team_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  text: string_filter_operators
  members_program: page_team_directus_users_2_filter
  members_program_func: count_function_filter_operators
  members_management: page_team_directus_users_1_filter
  members_management_func: count_function_filter_operators
  members_staff: page_team_directus_users_filter
  members_staff_func: count_function_filter_operators
  _and: [page_team_filter]
  _or: [page_team_filter]
}

input party_location_filter {
  id: number_filter_operators
  url: string_filter_operators
  address_line_1: string_filter_operators
  address_line_2: string_filter_operators
  logo: directus_files_filter
  _and: [party_location_filter]
  _or: [party_location_filter]
}

input party_tips_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  date: date_filter_operators
  date_func: datetime_function_filter_operators
  title_2: string_filter_operators
  title_1: string_filter_operators
  party_location: party_location_filter
  _and: [party_tips_filter]
  _or: [party_tips_filter]
}

input posts_directus_users_1_filter {
  id: number_filter_operators
  posts_slug: posts_filter
  directus_users_id: directus_users_filter
  _and: [posts_directus_users_1_filter]
  _or: [posts_directus_users_1_filter]
}

input posts_editor_nodes_filter {
  id: string_filter_operators
  posts_slug: posts_filter
  collection: string_filter_operators
  _and: [posts_editor_nodes_filter]
  _or: [posts_editor_nodes_filter]
  item__info_box: info_box_filter
  item__quote: quote_filter
}

input posts_filter {
  slug: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  image: directus_files_filter
  date: date_filter_operators
  date_func: date_function_filter_operators
  imageTitle: string_filter_operators
  imageText: string_filter_operators
  program: programs_filter
  audio: directus_files_filter
  content: string_filter_operators
  content_func: count_function_filter_operators
  authors: posts_directus_users_1_filter
  authors_func: count_function_filter_operators
  editor_nodes: posts_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [posts_filter]
  _or: [posts_filter]
}

input programs_directus_users_filter {
  id: number_filter_operators
  programs_slug: programs_filter
  directus_users_id: directus_users_filter
  _and: [programs_directus_users_filter]
  _or: [programs_directus_users_filter]
}

input programs_filter {
  slug: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  image: directus_files_filter
  posts: posts_filter
  posts_func: count_function_filter_operators
  team: programs_directus_users_filter
  team_func: count_function_filter_operators
  _and: [programs_filter]
  _or: [programs_filter]
}

input protocol_filter {
  id: number_filter_operators
  name: string_filter_operators
  file: directus_files_filter
  _and: [protocol_filter]
  _or: [protocol_filter]
}

input quote_filter {
  id: number_filter_operators
  text: string_filter_operators
  info: string_filter_operators
  author: string_filter_operators
  _and: [quote_filter]
  _or: [quote_filter]
}

input statements_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  text: string_filter_operators
  author: string_filter_operators
  _and: [statements_filter]
  _or: [statements_filter]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input update_config_input {
  id: ID
  front_end_url: String
}

input update_contact_address_input {
  id: ID
  name: String
  phone_number: String
  email: String
}

input update_directus_access_input {
  id: ID
  role: update_directus_roles_input
  user: update_directus_users_input
  policy: update_directus_policies_input
  sort: Int
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  created_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_permissions_input {
  id: ID
  collection: String
  action: String
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: update_directus_policies_input
}

input update_directus_policies_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  permissions: [update_directus_permissions_input]
  users: [update_directus_access_input]
  roles: [update_directus_access_input]
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  parent: update_directus_roles_input
  children: [update_directus_roles_input]
  policies: [update_directus_access_input]
  users: [update_directus_users_input]
}

input update_directus_sync_id_map_input {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  posts: [update_posts_directus_users_1_input]
  programs: [update_programs_directus_users_input]
  policies: [update_directus_access_input]
}

input update_image_box_input {
  id: ID
  image: update_directus_files_input
  text: String
  title: String
}

input update_info_box_input {
  id: ID
  title: String
  text: JSON
}

input update_member_product_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  label: String
  price: Float
}

input update_orders_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  status: String
  price: Float
  name: String
  token: String
  first_name: String
  family_name: String
  email: String
  address: String
  plz: String
  city: String
  phone_number: String
}

input update_page_agb_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
}

input update_page_contact_contact_address_input {
  id: ID
  page_contact_id: update_page_contact_input
  contact_address_id: update_contact_address_input
}

input update_page_contact_files_input {
  id: ID
  page_contact_id: update_page_contact_input
  directus_files_id: update_directus_files_input
}

input update_page_contact_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  contact_addresses: [update_page_contact_contact_address_input]
  partner_logos: [update_page_contact_files_input]
}

input update_page_history_files_input {
  id: ID
  page_history_id: update_page_history_input
  directus_files_id: update_directus_files_input
}

input update_page_history_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
  vision: update_directus_files_input
  statutes: update_directus_files_input
  protocols: [update_page_history_protocol_input]
  editor_nodes: [update_page_history_nodes_input]
  logos: [update_page_history_files_input]
}

input update_page_history_nodes_input {
  id: ID
  page_history_id: update_page_history_input
  item: String
  collection: String
}

input update_page_history_protocol_input {
  id: ID
  page_history_id: update_page_history_input
  protocol_id: update_protocol_input
}

input update_page_impressum_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
}

input update_page_member_input {
  id: ID
  content: JSON
}

input update_page_member_statements_input {
  id: ID
  page_member_id: update_page_member_input
  statements_id: update_statements_input
}

input update_page_program_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_3: [update_page_program_programs_3_input]
  programs_group_1: [update_page_program_programs_2_input]
  programs_group_2: [update_page_program_programs_1_input]
}

input update_page_program_programs_1_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_program_programs_2_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_program_programs_3_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_program_programs_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_programs_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  text: String
}

input update_page_receive_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [update_page_receive_nodes_input]
}

input update_page_receive_nodes_input {
  id: ID
  page_receive_id: update_page_receive_input
  item: String
  collection: String
}

input update_page_team_directus_users_1_input {
  id: ID
  page_team_id: update_page_team_input
  directus_users_id: update_directus_users_input
}

input update_page_team_directus_users_2_input {
  id: ID
  page_team_id: update_page_team_input
  directus_users_id: update_directus_users_input
}

input update_page_team_directus_users_input {
  id: ID
  page_team_id: update_page_team_input
  directus_users_id: update_directus_users_input
}

input update_page_team_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  text: String
  members_program: [update_page_team_directus_users_2_input]
  members_management: [update_page_team_directus_users_1_input]
  members_staff: [update_page_team_directus_users_input]
}

input update_party_location_input {
  id: ID
  url: String
  address_line_1: String
  address_line_2: String
  logo: update_directus_files_input
}

input update_party_tips_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  date: Date
  title_2: String
  title_1: String
  party_location: update_party_location_input
}

input update_posts_directus_users_1_input {
  id: ID
  posts_slug: update_posts_input
  directus_users_id: update_directus_users_input
}

input update_posts_editor_nodes_input {
  id: ID
  posts_slug: update_posts_input
  item: String
  collection: String
}

input update_posts_input {
  slug: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  image: update_directus_files_input
  date: Date
  imageTitle: String
  imageText: String
  program: update_programs_input
  audio: update_directus_files_input
  content: JSON
  authors: [update_posts_directus_users_1_input]
  editor_nodes: [update_posts_editor_nodes_input]
}

input update_programs_directus_users_input {
  id: ID
  programs_slug: update_programs_input
  directus_users_id: update_directus_users_input
}

input update_programs_input {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  description: String
  image: update_directus_files_input
  posts: [update_posts_input]
  team: [update_programs_directus_users_input]
}

input update_protocol_input {
  id: ID
  name: String
  file: update_directus_files_input
}

input update_quote_input {
  id: ID
  text: String
  info: String
  author: String
}

input update_statements_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  text: String
  author: String
}