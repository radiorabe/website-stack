type Query {
  page_contact_contact_address(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_contact_address!]!
  page_contact_contact_address_by_id(id: ID!, version: String): page_contact_contact_address
  page_contact_contact_address_aggregated(groupBy: [String], filter: page_contact_contact_address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_contact_contact_address_aggregated!]!
  page_contact_contact_address_by_version(version: String!, id: ID!): version_page_contact_contact_address
  image_box(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [image_box!]!
  image_box_by_id(id: ID!, version: String): image_box
  image_box_aggregated(groupBy: [String], filter: image_box_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [image_box_aggregated!]!
  image_box_by_version(version: String!, id: ID!): version_image_box
  programs(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs!]!
  programs_by_id(id: ID!, version: String): programs
  programs_aggregated(groupBy: [String], filter: programs_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [programs_aggregated!]!
  programs_by_version(version: String!, id: ID!): version_programs
  party_location(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [party_location!]!
  party_location_by_id(id: ID!, version: String): party_location
  party_location_aggregated(groupBy: [String], filter: party_location_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [party_location_aggregated!]!
  party_location_by_version(version: String!, id: ID!): version_party_location
  page_member_statements(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_member_statements!]!
  page_member_statements_by_id(id: ID!, version: String): page_member_statements
  page_member_statements_aggregated(groupBy: [String], filter: page_member_statements_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_member_statements_aggregated!]!
  page_member_statements_by_version(version: String!, id: ID!): version_page_member_statements
  member_product(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [member_product!]!
  member_product_by_id(id: ID!, version: String): member_product
  member_product_aggregated(groupBy: [String], filter: member_product_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [member_product_aggregated!]!
  member_product_by_version(version: String!, id: ID!): version_member_product
  config(version: String): config
  config_by_version(version: String!): version_config
  programs_directus_users(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users!]!
  programs_directus_users_by_id(id: ID!, version: String): programs_directus_users
  programs_directus_users_aggregated(groupBy: [String], filter: programs_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [programs_directus_users_aggregated!]!
  programs_directus_users_by_version(version: String!, id: ID!): version_programs_directus_users
  page_contact(version: String): page_contact
  page_contact_by_version(version: String!): version_page_contact
  page_programs(version: String): page_programs
  page_programs_by_version(version: String!): version_page_programs
  page_agb(version: String): page_agb
  page_agb_by_version(version: String!): version_page_agb
  quote(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [quote!]!
  quote_by_id(id: ID!, version: String): quote
  quote_aggregated(groupBy: [String], filter: quote_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [quote_aggregated!]!
  quote_by_version(version: String!, id: ID!): version_quote
  info_box(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [info_box!]!
  info_box_by_id(id: ID!, version: String): info_box
  info_box_aggregated(groupBy: [String], filter: info_box_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [info_box_aggregated!]!
  info_box_by_version(version: String!, id: ID!): version_info_box
  page_impressum(version: String): page_impressum
  page_impressum_by_version(version: String!): version_page_impressum
  page_team(version: String): page_team
  page_team_by_version(version: String!): version_page_team
  page_program_programs_3(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_3!]!
  page_program_programs_3_by_id(id: ID!, version: String): page_program_programs_3
  page_program_programs_3_aggregated(groupBy: [String], filter: page_program_programs_3_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_3_aggregated!]!
  page_program_programs_3_by_version(version: String!, id: ID!): version_page_program_programs_3
  page_team_directus_users(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users!]!
  page_team_directus_users_by_id(id: ID!, version: String): page_team_directus_users
  page_team_directus_users_aggregated(groupBy: [String], filter: page_team_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_team_directus_users_aggregated!]!
  page_team_directus_users_by_version(version: String!, id: ID!): version_page_team_directus_users
  page_program_programs(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs!]!
  page_program_programs_by_id(id: ID!, version: String): page_program_programs
  page_program_programs_aggregated(groupBy: [String], filter: page_program_programs_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_aggregated!]!
  page_program_programs_by_version(version: String!, id: ID!): version_page_program_programs
  page_team_directus_users_1(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_1!]!
  page_team_directus_users_1_by_id(id: ID!, version: String): page_team_directus_users_1
  page_team_directus_users_1_aggregated(groupBy: [String], filter: page_team_directus_users_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_team_directus_users_1_aggregated!]!
  page_team_directus_users_1_by_version(version: String!, id: ID!): version_page_team_directus_users_1
  page_team_directus_users_2(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_2!]!
  page_team_directus_users_2_by_id(id: ID!, version: String): page_team_directus_users_2
  page_team_directus_users_2_aggregated(groupBy: [String], filter: page_team_directus_users_2_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_team_directus_users_2_aggregated!]!
  page_team_directus_users_2_by_version(version: String!, id: ID!): version_page_team_directus_users_2
  page_program_programs_1(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_1!]!
  page_program_programs_1_by_id(id: ID!, version: String): page_program_programs_1
  page_program_programs_1_aggregated(groupBy: [String], filter: page_program_programs_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_1_aggregated!]!
  page_program_programs_1_by_version(version: String!, id: ID!): version_page_program_programs_1
  page_program_programs_2(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_2!]!
  page_program_programs_2_by_id(id: ID!, version: String): page_program_programs_2
  page_program_programs_2_aggregated(groupBy: [String], filter: page_program_programs_2_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_program_programs_2_aggregated!]!
  page_program_programs_2_by_version(version: String!, id: ID!): version_page_program_programs_2
  page_program(version: String): page_program
  page_program_by_version(version: String!): version_page_program
  page_receive(version: String): page_receive
  page_receive_by_version(version: String!): version_page_receive
  party_tips(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [party_tips!]!
  party_tips_by_id(id: ID!, version: String): party_tips
  party_tips_aggregated(groupBy: [String], filter: party_tips_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [party_tips_aggregated!]!
  party_tips_by_version(version: String!, id: ID!): version_party_tips
  page_history(version: String): page_history
  page_history_by_version(version: String!): version_page_history
  page_member(version: String): page_member
  page_member_by_version(version: String!): version_page_member
  contact_address(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [contact_address!]!
  contact_address_by_id(id: ID!, version: String): contact_address
  contact_address_aggregated(groupBy: [String], filter: contact_address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [contact_address_aggregated!]!
  contact_address_by_version(version: String!, id: ID!): version_contact_address
  page_receive_nodes(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_receive_nodes!]!
  page_receive_nodes_by_id(id: ID!, version: String): page_receive_nodes
  page_receive_nodes_aggregated(groupBy: [String], filter: page_receive_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_receive_nodes_aggregated!]!
  page_receive_nodes_by_version(version: String!, id: ID!): version_page_receive_nodes
  page_history_nodes(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_nodes!]!
  page_history_nodes_by_id(id: ID!, version: String): page_history_nodes
  page_history_nodes_aggregated(groupBy: [String], filter: page_history_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_nodes_aggregated!]!
  page_history_nodes_by_version(version: String!, id: ID!): version_page_history_nodes
  orders(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [orders!]!
  orders_by_id(id: ID!, version: String): orders
  orders_aggregated(groupBy: [String], filter: orders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [orders_aggregated!]!
  orders_by_version(version: String!, id: ID!): version_orders
  directus_sync_id_map(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_sync_id_map!]!
  directus_sync_id_map_by_id(id: ID!, version: String): directus_sync_id_map
  directus_sync_id_map_aggregated(groupBy: [String], filter: directus_sync_id_map_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_sync_id_map_aggregated!]!
  directus_sync_id_map_by_version(version: String!, id: ID!): version_directus_sync_id_map
  events(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events!]!
  events_by_id(id: ID!, version: String): events
  events_aggregated(groupBy: [String], filter: events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_aggregated!]!
  events_by_version(version: String!, id: ID!): version_events
  statements(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [statements!]!
  statements_by_id(id: ID!, version: String): statements
  statements_aggregated(groupBy: [String], filter: statements_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [statements_aggregated!]!
  statements_by_version(version: String!, id: ID!): version_statements
  iframe(filter: iframe_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [iframe!]!
  iframe_by_id(id: ID!, version: String): iframe
  iframe_aggregated(groupBy: [String], filter: iframe_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [iframe_aggregated!]!
  iframe_by_version(version: String!, id: ID!): version_iframe
  events_event_shows(filter: events_event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_event_shows!]!
  events_event_shows_by_id(id: ID!, version: String): events_event_shows
  events_event_shows_aggregated(groupBy: [String], filter: events_event_shows_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_event_shows_aggregated!]!
  events_event_shows_by_version(version: String!, id: ID!): version_events_event_shows
  post(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post!]!
  post_by_id(id: ID!, version: String): post
  post_aggregated(groupBy: [String], filter: post_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [post_aggregated!]!
  post_by_version(version: String!, id: ID!): version_post
  post_directus_users(filter: post_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_directus_users!]!
  post_directus_users_by_id(id: ID!, version: String): post_directus_users
  post_directus_users_aggregated(groupBy: [String], filter: post_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [post_directus_users_aggregated!]!
  post_directus_users_by_version(version: String!, id: ID!): version_post_directus_users
  post_editor_nodes(filter: post_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_editor_nodes!]!
  post_editor_nodes_by_id(id: ID!, version: String): post_editor_nodes
  post_editor_nodes_aggregated(groupBy: [String], filter: post_editor_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [post_editor_nodes_aggregated!]!
  post_editor_nodes_by_version(version: String!, id: ID!): version_post_editor_nodes
  event_shows(filter: event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [event_shows!]!
  event_shows_by_id(id: ID!, version: String): event_shows
  event_shows_aggregated(groupBy: [String], filter: event_shows_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [event_shows_aggregated!]!
  event_shows_by_version(version: String!, id: ID!): version_event_shows
  post_files(filter: post_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_files!]!
  post_files_by_id(id: ID!, version: String): post_files
  post_files_aggregated(groupBy: [String], filter: post_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [post_files_aggregated!]!
  post_files_by_version(version: String!, id: ID!): version_post_files
  events_editor_nodes(filter: events_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_editor_nodes!]!
  events_editor_nodes_by_id(id: ID!, version: String): events_editor_nodes
  events_editor_nodes_aggregated(groupBy: [String], filter: events_editor_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_editor_nodes_aggregated!]!
  events_editor_nodes_by_version(version: String!, id: ID!): version_events_editor_nodes
  tags(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags!]!
  tags_by_id(id: ID!, version: String): tags
  tags_aggregated(groupBy: [String], filter: tags_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_aggregated!]!
  tags_by_version(version: String!, id: ID!): version_tags
  post_tags_1(filter: post_tags_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_tags_1!]!
  post_tags_1_by_id(id: ID!, version: String): post_tags_1
  post_tags_1_aggregated(groupBy: [String], filter: post_tags_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [post_tags_1_aggregated!]!
  post_tags_1_by_version(version: String!, id: ID!): version_post_tags_1
  audio_player_files(filter: audio_player_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [audio_player_files!]!
  audio_player_files_by_id(id: ID!, version: String): audio_player_files
  audio_player_files_aggregated(groupBy: [String], filter: audio_player_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [audio_player_files_aggregated!]!
  audio_player_files_by_version(version: String!, id: ID!): version_audio_player_files
  audio_player(filter: audio_player_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [audio_player!]!
  audio_player_by_id(id: ID!, version: String): audio_player
  audio_player_aggregated(groupBy: [String], filter: audio_player_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [audio_player_aggregated!]!
  audio_player_by_version(version: String!, id: ID!): version_audio_player
  page_join(version: String): page_join
  page_join_by_version(version: String!): version_page_join
  page_join_nodes(filter: page_join_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_join_nodes!]!
  page_join_nodes_by_id(id: ID!, version: String): page_join_nodes
  page_join_nodes_aggregated(groupBy: [String], filter: page_join_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_join_nodes_aggregated!]!
  page_join_nodes_by_version(version: String!, id: ID!): version_page_join_nodes
  page_internship_nodes(filter: page_internship_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_internship_nodes!]!
  page_internship_nodes_by_id(id: ID!, version: String): page_internship_nodes
  page_internship_nodes_aggregated(groupBy: [String], filter: page_internship_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_internship_nodes_aggregated!]!
  page_internship_nodes_by_version(version: String!, id: ID!): version_page_internship_nodes
  internships(filter: internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [internships!]!
  internships_by_id(id: ID!, version: String): internships
  internships_aggregated(groupBy: [String], filter: internships_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [internships_aggregated!]!
  internships_by_version(version: String!, id: ID!): version_internships
  page_internship_internships(filter: page_internship_internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_internship_internships!]!
  page_internship_internships_by_id(id: ID!, version: String): page_internship_internships
  page_internship_internships_aggregated(groupBy: [String], filter: page_internship_internships_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_internship_internships_aggregated!]!
  page_internship_internships_by_version(version: String!, id: ID!): version_page_internship_internships
  page_internship(version: String): page_internship
  page_internship_by_version(version: String!): version_page_internship
  page_classes(version: String): page_classes
  page_classes_by_version(version: String!): version_page_classes
  page_classes_nodes(filter: page_classes_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_classes_nodes!]!
  page_classes_nodes_by_id(id: ID!, version: String): page_classes_nodes
  page_classes_nodes_aggregated(groupBy: [String], filter: page_classes_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_classes_nodes_aggregated!]!
  page_classes_nodes_by_version(version: String!, id: ID!): version_page_classes_nodes
  page_history_image_link(filter: page_history_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_image_link!]!
  page_history_image_link_by_id(id: ID!, version: String): page_history_image_link
  page_history_image_link_aggregated(groupBy: [String], filter: page_history_image_link_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_image_link_aggregated!]!
  page_history_image_link_by_version(version: String!, id: ID!): version_page_history_image_link
  classes(filter: classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [classes!]!
  classes_by_id(id: ID!, version: String): classes
  classes_aggregated(groupBy: [String], filter: classes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [classes_aggregated!]!
  classes_by_version(version: String!, id: ID!): version_classes
  page_history_files(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files!]!
  page_history_files_by_id(id: ID!, version: String): page_history_files
  page_history_files_aggregated(groupBy: [String], filter: page_history_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_files_aggregated!]!
  page_history_files_by_version(version: String!, id: ID!): version_page_history_files
  page_classes_classes(filter: page_classes_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_classes_classes!]!
  page_classes_classes_by_id(id: ID!, version: String): page_classes_classes
  page_classes_classes_aggregated(groupBy: [String], filter: page_classes_classes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_classes_classes_aggregated!]!
  page_classes_classes_by_version(version: String!, id: ID!): version_page_classes_classes
  page_history_files_1(filter: page_history_files_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files_1!]!
  page_history_files_1_by_id(id: ID!, version: String): page_history_files_1
  page_history_files_1_aggregated(groupBy: [String], filter: page_history_files_1_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_history_files_1_aggregated!]!
  page_history_files_1_by_version(version: String!, id: ID!): version_page_history_files_1
  image_link(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [image_link!]!
  image_link_by_id(id: ID!, version: String): image_link
  image_link_aggregated(groupBy: [String], filter: image_link_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [image_link_aggregated!]!
  image_link_by_version(version: String!, id: ID!): version_image_link
  events_image_link(filter: events_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_image_link!]!
  events_image_link_by_id(id: ID!, version: String): events_image_link
  events_image_link_aggregated(groupBy: [String], filter: events_image_link_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_image_link_aggregated!]!
  events_image_link_by_version(version: String!, id: ID!): version_events_image_link
  page_contact_image_link(filter: page_contact_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_image_link!]!
  page_contact_image_link_by_id(id: ID!, version: String): page_contact_image_link
  page_contact_image_link_aggregated(groupBy: [String], filter: page_contact_image_link_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [page_contact_image_link_aggregated!]!
  page_contact_image_link_by_version(version: String!, id: ID!): version_page_contact_image_link
}

type Mutation {
  create_page_contact_contact_address_items(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_contact_contact_address_input!]): [page_contact_contact_address!]!
  create_page_contact_contact_address_item(data: create_page_contact_contact_address_input!): page_contact_contact_address
  create_image_box_items(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_image_box_input!]): [image_box!]!
  create_image_box_item(data: create_image_box_input!): image_box
  create_programs_items(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_programs_input!]): [programs!]!
  create_programs_item(data: create_programs_input!): programs
  create_party_location_items(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_party_location_input!]): [party_location!]!
  create_party_location_item(data: create_party_location_input!): party_location
  create_page_member_statements_items(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_member_statements_input!]): [page_member_statements!]!
  create_page_member_statements_item(data: create_page_member_statements_input!): page_member_statements
  create_member_product_items(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_member_product_input!]): [member_product!]!
  create_member_product_item(data: create_member_product_input!): member_product
  create_programs_directus_users_items(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_programs_directus_users_input!]): [programs_directus_users!]!
  create_programs_directus_users_item(data: create_programs_directus_users_input!): programs_directus_users
  create_quote_items(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_quote_input!]): [quote!]!
  create_quote_item(data: create_quote_input!): quote
  create_info_box_items(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_info_box_input!]): [info_box!]!
  create_info_box_item(data: create_info_box_input!): info_box
  create_page_program_programs_3_items(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_3_input!]): [page_program_programs_3!]!
  create_page_program_programs_3_item(data: create_page_program_programs_3_input!): page_program_programs_3
  create_page_team_directus_users_items(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_team_directus_users_input!]): [page_team_directus_users!]!
  create_page_team_directus_users_item(data: create_page_team_directus_users_input!): page_team_directus_users
  create_page_program_programs_items(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_input!]): [page_program_programs!]!
  create_page_program_programs_item(data: create_page_program_programs_input!): page_program_programs
  create_page_team_directus_users_1_items(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_team_directus_users_1_input!]): [page_team_directus_users_1!]!
  create_page_team_directus_users_1_item(data: create_page_team_directus_users_1_input!): page_team_directus_users_1
  create_page_team_directus_users_2_items(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_team_directus_users_2_input!]): [page_team_directus_users_2!]!
  create_page_team_directus_users_2_item(data: create_page_team_directus_users_2_input!): page_team_directus_users_2
  create_page_program_programs_1_items(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_1_input!]): [page_program_programs_1!]!
  create_page_program_programs_1_item(data: create_page_program_programs_1_input!): page_program_programs_1
  create_page_program_programs_2_items(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_program_programs_2_input!]): [page_program_programs_2!]!
  create_page_program_programs_2_item(data: create_page_program_programs_2_input!): page_program_programs_2
  create_party_tips_items(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_party_tips_input!]): [party_tips!]!
  create_party_tips_item(data: create_party_tips_input!): party_tips
  create_contact_address_items(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_contact_address_input!]): [contact_address!]!
  create_contact_address_item(data: create_contact_address_input!): contact_address
  create_page_receive_nodes_items(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_receive_nodes_input!]): [page_receive_nodes!]!
  create_page_receive_nodes_item(data: create_page_receive_nodes_input!): page_receive_nodes
  create_page_history_nodes_items(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_nodes_input!]): [page_history_nodes!]!
  create_page_history_nodes_item(data: create_page_history_nodes_input!): page_history_nodes
  create_orders_items(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_orders_input!]): [orders!]!
  create_orders_item(data: create_orders_input!): orders
  create_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  create_directus_sync_id_map_item(data: create_directus_sync_id_map_input!): directus_sync_id_map
  create_events_items(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_events_input!]): [events!]!
  create_events_item(data: create_events_input!): events
  create_statements_items(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_statements_input!]): [statements!]!
  create_statements_item(data: create_statements_input!): statements
  create_iframe_items(filter: iframe_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_iframe_input!]): [iframe!]!
  create_iframe_item(data: create_iframe_input!): iframe
  create_events_event_shows_items(filter: events_event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_events_event_shows_input!]): [events_event_shows!]!
  create_events_event_shows_item(data: create_events_event_shows_input!): events_event_shows
  create_post_items(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_post_input!]): [post!]!
  create_post_item(data: create_post_input!): post
  create_post_directus_users_items(filter: post_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_post_directus_users_input!]): [post_directus_users!]!
  create_post_directus_users_item(data: create_post_directus_users_input!): post_directus_users
  create_post_editor_nodes_items(filter: post_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_post_editor_nodes_input!]): [post_editor_nodes!]!
  create_post_editor_nodes_item(data: create_post_editor_nodes_input!): post_editor_nodes
  create_event_shows_items(filter: event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_event_shows_input!]): [event_shows!]!
  create_event_shows_item(data: create_event_shows_input!): event_shows
  create_post_files_items(filter: post_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_post_files_input!]): [post_files!]!
  create_post_files_item(data: create_post_files_input!): post_files
  create_events_editor_nodes_items(filter: events_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_events_editor_nodes_input!]): [events_editor_nodes!]!
  create_events_editor_nodes_item(data: create_events_editor_nodes_input!): events_editor_nodes
  create_tags_items(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_tags_input!]): [tags!]!
  create_tags_item(data: create_tags_input!): tags
  create_post_tags_1_items(filter: post_tags_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_post_tags_1_input!]): [post_tags_1!]!
  create_post_tags_1_item(data: create_post_tags_1_input!): post_tags_1
  create_audio_player_files_items(filter: audio_player_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_audio_player_files_input!]): [audio_player_files!]!
  create_audio_player_files_item(data: create_audio_player_files_input!): audio_player_files
  create_audio_player_items(filter: audio_player_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_audio_player_input!]): [audio_player!]!
  create_audio_player_item(data: create_audio_player_input!): audio_player
  create_page_join_nodes_items(filter: page_join_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_join_nodes_input!]): [page_join_nodes!]!
  create_page_join_nodes_item(data: create_page_join_nodes_input!): page_join_nodes
  create_page_internship_nodes_items(filter: page_internship_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_internship_nodes_input!]): [page_internship_nodes!]!
  create_page_internship_nodes_item(data: create_page_internship_nodes_input!): page_internship_nodes
  create_internships_items(filter: internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_internships_input!]): [internships!]!
  create_internships_item(data: create_internships_input!): internships
  create_page_internship_internships_items(filter: page_internship_internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_internship_internships_input!]): [page_internship_internships!]!
  create_page_internship_internships_item(data: create_page_internship_internships_input!): page_internship_internships
  create_page_classes_nodes_items(filter: page_classes_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_classes_nodes_input!]): [page_classes_nodes!]!
  create_page_classes_nodes_item(data: create_page_classes_nodes_input!): page_classes_nodes
  create_page_history_image_link_items(filter: page_history_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_image_link_input!]): [page_history_image_link!]!
  create_page_history_image_link_item(data: create_page_history_image_link_input!): page_history_image_link
  create_classes_items(filter: classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_classes_input!]): [classes!]!
  create_classes_item(data: create_classes_input!): classes
  create_page_history_files_items(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_files_input!]): [page_history_files!]!
  create_page_history_files_item(data: create_page_history_files_input!): page_history_files
  create_page_classes_classes_items(filter: page_classes_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_classes_classes_input!]): [page_classes_classes!]!
  create_page_classes_classes_item(data: create_page_classes_classes_input!): page_classes_classes
  create_page_history_files_1_items(filter: page_history_files_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_history_files_1_input!]): [page_history_files_1!]!
  create_page_history_files_1_item(data: create_page_history_files_1_input!): page_history_files_1
  create_image_link_items(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_image_link_input!]): [image_link!]!
  create_image_link_item(data: create_image_link_input!): image_link
  create_events_image_link_items(filter: events_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_events_image_link_input!]): [events_image_link!]!
  create_events_image_link_item(data: create_events_image_link_input!): events_image_link
  create_page_contact_image_link_items(filter: page_contact_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_page_contact_image_link_input!]): [page_contact_image_link!]!
  create_page_contact_image_link_item(data: create_page_contact_image_link_input!): page_contact_image_link
  update_page_contact_contact_address_items(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_contact_contact_address_input!): [page_contact_contact_address!]!
  update_page_contact_contact_address_batch(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_contact_contact_address_input!]): [page_contact_contact_address!]!
  update_page_contact_contact_address_item(id: ID!, data: update_page_contact_contact_address_input!): page_contact_contact_address
  update_image_box_items(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_image_box_input!): [image_box!]!
  update_image_box_batch(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_image_box_input!]): [image_box!]!
  update_image_box_item(id: ID!, data: update_image_box_input!): image_box
  update_programs_items(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_programs_input!): [programs!]!
  update_programs_batch(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_programs_input!]): [programs!]!
  update_programs_item(id: ID!, data: update_programs_input!): programs
  update_party_location_items(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_party_location_input!): [party_location!]!
  update_party_location_batch(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_party_location_input!]): [party_location!]!
  update_party_location_item(id: ID!, data: update_party_location_input!): party_location
  update_page_member_statements_items(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_member_statements_input!): [page_member_statements!]!
  update_page_member_statements_batch(filter: page_member_statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_member_statements_input!]): [page_member_statements!]!
  update_page_member_statements_item(id: ID!, data: update_page_member_statements_input!): page_member_statements
  update_member_product_items(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_member_product_input!): [member_product!]!
  update_member_product_batch(filter: member_product_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_member_product_input!]): [member_product!]!
  update_member_product_item(id: ID!, data: update_member_product_input!): member_product
  update_config(data: update_config_input!): config
  update_programs_directus_users_items(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_programs_directus_users_input!): [programs_directus_users!]!
  update_programs_directus_users_batch(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_programs_directus_users_input!]): [programs_directus_users!]!
  update_programs_directus_users_item(id: ID!, data: update_programs_directus_users_input!): programs_directus_users
  update_page_contact(data: update_page_contact_input!): page_contact
  update_page_programs(data: update_page_programs_input!): page_programs
  update_page_agb(data: update_page_agb_input!): page_agb
  update_quote_items(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_quote_input!): [quote!]!
  update_quote_batch(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_quote_input!]): [quote!]!
  update_quote_item(id: ID!, data: update_quote_input!): quote
  update_info_box_items(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_info_box_input!): [info_box!]!
  update_info_box_batch(filter: info_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_info_box_input!]): [info_box!]!
  update_info_box_item(id: ID!, data: update_info_box_input!): info_box
  update_page_impressum(data: update_page_impressum_input!): page_impressum
  update_page_team(data: update_page_team_input!): page_team
  update_page_program_programs_3_items(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_3_input!): [page_program_programs_3!]!
  update_page_program_programs_3_batch(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_3_input!]): [page_program_programs_3!]!
  update_page_program_programs_3_item(id: ID!, data: update_page_program_programs_3_input!): page_program_programs_3
  update_page_team_directus_users_items(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_team_directus_users_input!): [page_team_directus_users!]!
  update_page_team_directus_users_batch(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_team_directus_users_input!]): [page_team_directus_users!]!
  update_page_team_directus_users_item(id: ID!, data: update_page_team_directus_users_input!): page_team_directus_users
  update_page_program_programs_items(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_input!): [page_program_programs!]!
  update_page_program_programs_batch(filter: page_program_programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_input!]): [page_program_programs!]!
  update_page_program_programs_item(id: ID!, data: update_page_program_programs_input!): page_program_programs
  update_page_team_directus_users_1_items(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_team_directus_users_1_input!): [page_team_directus_users_1!]!
  update_page_team_directus_users_1_batch(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_team_directus_users_1_input!]): [page_team_directus_users_1!]!
  update_page_team_directus_users_1_item(id: ID!, data: update_page_team_directus_users_1_input!): page_team_directus_users_1
  update_page_team_directus_users_2_items(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_team_directus_users_2_input!): [page_team_directus_users_2!]!
  update_page_team_directus_users_2_batch(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_team_directus_users_2_input!]): [page_team_directus_users_2!]!
  update_page_team_directus_users_2_item(id: ID!, data: update_page_team_directus_users_2_input!): page_team_directus_users_2
  update_page_program_programs_1_items(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_1_input!): [page_program_programs_1!]!
  update_page_program_programs_1_batch(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_1_input!]): [page_program_programs_1!]!
  update_page_program_programs_1_item(id: ID!, data: update_page_program_programs_1_input!): page_program_programs_1
  update_page_program_programs_2_items(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_program_programs_2_input!): [page_program_programs_2!]!
  update_page_program_programs_2_batch(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_program_programs_2_input!]): [page_program_programs_2!]!
  update_page_program_programs_2_item(id: ID!, data: update_page_program_programs_2_input!): page_program_programs_2
  update_page_program(data: update_page_program_input!): page_program
  update_page_receive(data: update_page_receive_input!): page_receive
  update_party_tips_items(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_party_tips_input!): [party_tips!]!
  update_party_tips_batch(filter: party_tips_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_party_tips_input!]): [party_tips!]!
  update_party_tips_item(id: ID!, data: update_party_tips_input!): party_tips
  update_page_history(data: update_page_history_input!): page_history
  update_page_member(data: update_page_member_input!): page_member
  update_contact_address_items(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_contact_address_input!): [contact_address!]!
  update_contact_address_batch(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_contact_address_input!]): [contact_address!]!
  update_contact_address_item(id: ID!, data: update_contact_address_input!): contact_address
  update_page_receive_nodes_items(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_receive_nodes_input!): [page_receive_nodes!]!
  update_page_receive_nodes_batch(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_receive_nodes_input!]): [page_receive_nodes!]!
  update_page_receive_nodes_item(id: ID!, data: update_page_receive_nodes_input!): page_receive_nodes
  update_page_history_nodes_items(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_nodes_input!): [page_history_nodes!]!
  update_page_history_nodes_batch(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_nodes_input!]): [page_history_nodes!]!
  update_page_history_nodes_item(id: ID!, data: update_page_history_nodes_input!): page_history_nodes
  update_orders_items(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_orders_input!): [orders!]!
  update_orders_batch(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_orders_input!]): [orders!]!
  update_orders_item(id: ID!, data: update_orders_input!): orders
  update_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_sync_id_map_input!): [directus_sync_id_map!]!
  update_directus_sync_id_map_batch(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  update_directus_sync_id_map_item(id: ID!, data: update_directus_sync_id_map_input!): directus_sync_id_map
  update_events_items(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_events_input!): [events!]!
  update_events_batch(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_events_input!]): [events!]!
  update_events_item(id: ID!, data: update_events_input!): events
  update_statements_items(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_statements_input!): [statements!]!
  update_statements_batch(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_statements_input!]): [statements!]!
  update_statements_item(id: ID!, data: update_statements_input!): statements
  update_iframe_items(filter: iframe_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_iframe_input!): [iframe!]!
  update_iframe_batch(filter: iframe_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_iframe_input!]): [iframe!]!
  update_iframe_item(id: ID!, data: update_iframe_input!): iframe
  update_events_event_shows_items(filter: events_event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_events_event_shows_input!): [events_event_shows!]!
  update_events_event_shows_batch(filter: events_event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_events_event_shows_input!]): [events_event_shows!]!
  update_events_event_shows_item(id: ID!, data: update_events_event_shows_input!): events_event_shows
  update_post_items(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_post_input!): [post!]!
  update_post_batch(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_post_input!]): [post!]!
  update_post_item(id: ID!, data: update_post_input!): post
  update_post_directus_users_items(filter: post_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_post_directus_users_input!): [post_directus_users!]!
  update_post_directus_users_batch(filter: post_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_post_directus_users_input!]): [post_directus_users!]!
  update_post_directus_users_item(id: ID!, data: update_post_directus_users_input!): post_directus_users
  update_post_editor_nodes_items(filter: post_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_post_editor_nodes_input!): [post_editor_nodes!]!
  update_post_editor_nodes_batch(filter: post_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_post_editor_nodes_input!]): [post_editor_nodes!]!
  update_post_editor_nodes_item(id: ID!, data: update_post_editor_nodes_input!): post_editor_nodes
  update_event_shows_items(filter: event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_event_shows_input!): [event_shows!]!
  update_event_shows_batch(filter: event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_event_shows_input!]): [event_shows!]!
  update_event_shows_item(id: ID!, data: update_event_shows_input!): event_shows
  update_post_files_items(filter: post_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_post_files_input!): [post_files!]!
  update_post_files_batch(filter: post_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_post_files_input!]): [post_files!]!
  update_post_files_item(id: ID!, data: update_post_files_input!): post_files
  update_events_editor_nodes_items(filter: events_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_events_editor_nodes_input!): [events_editor_nodes!]!
  update_events_editor_nodes_batch(filter: events_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_events_editor_nodes_input!]): [events_editor_nodes!]!
  update_events_editor_nodes_item(id: ID!, data: update_events_editor_nodes_input!): events_editor_nodes
  update_tags_items(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_tags_input!): [tags!]!
  update_tags_batch(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_tags_input!]): [tags!]!
  update_tags_item(id: ID!, data: update_tags_input!): tags
  update_post_tags_1_items(filter: post_tags_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_post_tags_1_input!): [post_tags_1!]!
  update_post_tags_1_batch(filter: post_tags_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_post_tags_1_input!]): [post_tags_1!]!
  update_post_tags_1_item(id: ID!, data: update_post_tags_1_input!): post_tags_1
  update_audio_player_files_items(filter: audio_player_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_audio_player_files_input!): [audio_player_files!]!
  update_audio_player_files_batch(filter: audio_player_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_audio_player_files_input!]): [audio_player_files!]!
  update_audio_player_files_item(id: ID!, data: update_audio_player_files_input!): audio_player_files
  update_audio_player_items(filter: audio_player_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_audio_player_input!): [audio_player!]!
  update_audio_player_batch(filter: audio_player_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_audio_player_input!]): [audio_player!]!
  update_audio_player_item(id: ID!, data: update_audio_player_input!): audio_player
  update_page_join(data: update_page_join_input!): page_join
  update_page_join_nodes_items(filter: page_join_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_join_nodes_input!): [page_join_nodes!]!
  update_page_join_nodes_batch(filter: page_join_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_join_nodes_input!]): [page_join_nodes!]!
  update_page_join_nodes_item(id: ID!, data: update_page_join_nodes_input!): page_join_nodes
  update_page_internship_nodes_items(filter: page_internship_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_internship_nodes_input!): [page_internship_nodes!]!
  update_page_internship_nodes_batch(filter: page_internship_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_internship_nodes_input!]): [page_internship_nodes!]!
  update_page_internship_nodes_item(id: ID!, data: update_page_internship_nodes_input!): page_internship_nodes
  update_internships_items(filter: internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_internships_input!): [internships!]!
  update_internships_batch(filter: internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_internships_input!]): [internships!]!
  update_internships_item(id: ID!, data: update_internships_input!): internships
  update_page_internship_internships_items(filter: page_internship_internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_internship_internships_input!): [page_internship_internships!]!
  update_page_internship_internships_batch(filter: page_internship_internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_internship_internships_input!]): [page_internship_internships!]!
  update_page_internship_internships_item(id: ID!, data: update_page_internship_internships_input!): page_internship_internships
  update_page_internship(data: update_page_internship_input!): page_internship
  update_page_classes(data: update_page_classes_input!): page_classes
  update_page_classes_nodes_items(filter: page_classes_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_classes_nodes_input!): [page_classes_nodes!]!
  update_page_classes_nodes_batch(filter: page_classes_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_classes_nodes_input!]): [page_classes_nodes!]!
  update_page_classes_nodes_item(id: ID!, data: update_page_classes_nodes_input!): page_classes_nodes
  update_page_history_image_link_items(filter: page_history_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_image_link_input!): [page_history_image_link!]!
  update_page_history_image_link_batch(filter: page_history_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_image_link_input!]): [page_history_image_link!]!
  update_page_history_image_link_item(id: ID!, data: update_page_history_image_link_input!): page_history_image_link
  update_classes_items(filter: classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_classes_input!): [classes!]!
  update_classes_batch(filter: classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_classes_input!]): [classes!]!
  update_classes_item(id: ID!, data: update_classes_input!): classes
  update_page_history_files_items(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_files_input!): [page_history_files!]!
  update_page_history_files_batch(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_files_input!]): [page_history_files!]!
  update_page_history_files_item(id: ID!, data: update_page_history_files_input!): page_history_files
  update_page_classes_classes_items(filter: page_classes_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_classes_classes_input!): [page_classes_classes!]!
  update_page_classes_classes_batch(filter: page_classes_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_classes_classes_input!]): [page_classes_classes!]!
  update_page_classes_classes_item(id: ID!, data: update_page_classes_classes_input!): page_classes_classes
  update_page_history_files_1_items(filter: page_history_files_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_history_files_1_input!): [page_history_files_1!]!
  update_page_history_files_1_batch(filter: page_history_files_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_history_files_1_input!]): [page_history_files_1!]!
  update_page_history_files_1_item(id: ID!, data: update_page_history_files_1_input!): page_history_files_1
  update_image_link_items(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_image_link_input!): [image_link!]!
  update_image_link_batch(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_image_link_input!]): [image_link!]!
  update_image_link_item(id: ID!, data: update_image_link_input!): image_link
  update_events_image_link_items(filter: events_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_events_image_link_input!): [events_image_link!]!
  update_events_image_link_batch(filter: events_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_events_image_link_input!]): [events_image_link!]!
  update_events_image_link_item(id: ID!, data: update_events_image_link_input!): events_image_link
  update_page_contact_image_link_items(filter: page_contact_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_page_contact_image_link_input!): [page_contact_image_link!]!
  update_page_contact_image_link_batch(filter: page_contact_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_page_contact_image_link_input!]): [page_contact_image_link!]!
  update_page_contact_image_link_item(id: ID!, data: update_page_contact_image_link_input!): page_contact_image_link
  delete_page_contact_contact_address_items(ids: [ID]!): delete_many
  delete_page_contact_contact_address_item(id: ID!): delete_one
  delete_image_box_items(ids: [ID]!): delete_many
  delete_image_box_item(id: ID!): delete_one
  delete_programs_items(ids: [ID]!): delete_many
  delete_programs_item(id: ID!): delete_one
  delete_party_location_items(ids: [ID]!): delete_many
  delete_party_location_item(id: ID!): delete_one
  delete_page_member_statements_items(ids: [ID]!): delete_many
  delete_page_member_statements_item(id: ID!): delete_one
  delete_member_product_items(ids: [ID]!): delete_many
  delete_member_product_item(id: ID!): delete_one
  delete_programs_directus_users_items(ids: [ID]!): delete_many
  delete_programs_directus_users_item(id: ID!): delete_one
  delete_quote_items(ids: [ID]!): delete_many
  delete_quote_item(id: ID!): delete_one
  delete_info_box_items(ids: [ID]!): delete_many
  delete_info_box_item(id: ID!): delete_one
  delete_page_program_programs_3_items(ids: [ID]!): delete_many
  delete_page_program_programs_3_item(id: ID!): delete_one
  delete_page_team_directus_users_items(ids: [ID]!): delete_many
  delete_page_team_directus_users_item(id: ID!): delete_one
  delete_page_program_programs_items(ids: [ID]!): delete_many
  delete_page_program_programs_item(id: ID!): delete_one
  delete_page_team_directus_users_1_items(ids: [ID]!): delete_many
  delete_page_team_directus_users_1_item(id: ID!): delete_one
  delete_page_team_directus_users_2_items(ids: [ID]!): delete_many
  delete_page_team_directus_users_2_item(id: ID!): delete_one
  delete_page_program_programs_1_items(ids: [ID]!): delete_many
  delete_page_program_programs_1_item(id: ID!): delete_one
  delete_page_program_programs_2_items(ids: [ID]!): delete_many
  delete_page_program_programs_2_item(id: ID!): delete_one
  delete_party_tips_items(ids: [ID]!): delete_many
  delete_party_tips_item(id: ID!): delete_one
  delete_contact_address_items(ids: [ID]!): delete_many
  delete_contact_address_item(id: ID!): delete_one
  delete_page_receive_nodes_items(ids: [ID]!): delete_many
  delete_page_receive_nodes_item(id: ID!): delete_one
  delete_page_history_nodes_items(ids: [ID]!): delete_many
  delete_page_history_nodes_item(id: ID!): delete_one
  delete_orders_items(ids: [ID]!): delete_many
  delete_orders_item(id: ID!): delete_one
  delete_directus_sync_id_map_items(ids: [ID]!): delete_many
  delete_directus_sync_id_map_item(id: ID!): delete_one
  delete_events_items(ids: [ID]!): delete_many
  delete_events_item(id: ID!): delete_one
  delete_statements_items(ids: [ID]!): delete_many
  delete_statements_item(id: ID!): delete_one
  delete_iframe_items(ids: [ID]!): delete_many
  delete_iframe_item(id: ID!): delete_one
  delete_events_event_shows_items(ids: [ID]!): delete_many
  delete_events_event_shows_item(id: ID!): delete_one
  delete_post_items(ids: [ID]!): delete_many
  delete_post_item(id: ID!): delete_one
  delete_post_directus_users_items(ids: [ID]!): delete_many
  delete_post_directus_users_item(id: ID!): delete_one
  delete_post_editor_nodes_items(ids: [ID]!): delete_many
  delete_post_editor_nodes_item(id: ID!): delete_one
  delete_event_shows_items(ids: [ID]!): delete_many
  delete_event_shows_item(id: ID!): delete_one
  delete_post_files_items(ids: [ID]!): delete_many
  delete_post_files_item(id: ID!): delete_one
  delete_events_editor_nodes_items(ids: [ID]!): delete_many
  delete_events_editor_nodes_item(id: ID!): delete_one
  delete_tags_items(ids: [ID]!): delete_many
  delete_tags_item(id: ID!): delete_one
  delete_post_tags_1_items(ids: [ID]!): delete_many
  delete_post_tags_1_item(id: ID!): delete_one
  delete_audio_player_files_items(ids: [ID]!): delete_many
  delete_audio_player_files_item(id: ID!): delete_one
  delete_audio_player_items(ids: [ID]!): delete_many
  delete_audio_player_item(id: ID!): delete_one
  delete_page_join_nodes_items(ids: [ID]!): delete_many
  delete_page_join_nodes_item(id: ID!): delete_one
  delete_page_internship_nodes_items(ids: [ID]!): delete_many
  delete_page_internship_nodes_item(id: ID!): delete_one
  delete_internships_items(ids: [ID]!): delete_many
  delete_internships_item(id: ID!): delete_one
  delete_page_internship_internships_items(ids: [ID]!): delete_many
  delete_page_internship_internships_item(id: ID!): delete_one
  delete_page_classes_nodes_items(ids: [ID]!): delete_many
  delete_page_classes_nodes_item(id: ID!): delete_one
  delete_page_history_image_link_items(ids: [ID]!): delete_many
  delete_page_history_image_link_item(id: ID!): delete_one
  delete_classes_items(ids: [ID]!): delete_many
  delete_classes_item(id: ID!): delete_one
  delete_page_history_files_items(ids: [ID]!): delete_many
  delete_page_history_files_item(id: ID!): delete_one
  delete_page_classes_classes_items(ids: [ID]!): delete_many
  delete_page_classes_classes_item(id: ID!): delete_one
  delete_page_history_files_1_items(ids: [ID]!): delete_many
  delete_page_history_files_1_item(id: ID!): delete_one
  delete_image_link_items(ids: [ID]!): delete_many
  delete_image_link_item(id: ID!): delete_one
  delete_events_image_link_items(ids: [ID]!): delete_many
  delete_events_image_link_item(id: ID!): delete_one
  delete_page_contact_image_link_items(ids: [ID]!): delete_many
  delete_page_contact_image_link_item(id: ID!): delete_one
}

type Subscription {
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  page_contact_contact_address_mutated(event: EventEnum): page_contact_contact_address_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  image_box_mutated(event: EventEnum): image_box_mutated
  programs_mutated(event: EventEnum): programs_mutated
  party_location_mutated(event: EventEnum): party_location_mutated
  directus_policies_mutated(event: EventEnum): directus_policies_mutated
  page_member_statements_mutated(event: EventEnum): page_member_statements_mutated
  member_product_mutated(event: EventEnum): member_product_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_comments_mutated(event: EventEnum): directus_comments_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  config_mutated(event: EventEnum): config_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  programs_directus_users_mutated(event: EventEnum): programs_directus_users_mutated
  page_contact_mutated(event: EventEnum): page_contact_mutated
  page_programs_mutated(event: EventEnum): page_programs_mutated
  page_agb_mutated(event: EventEnum): page_agb_mutated
  quote_mutated(event: EventEnum): quote_mutated
  info_box_mutated(event: EventEnum): info_box_mutated
  page_impressum_mutated(event: EventEnum): page_impressum_mutated
  page_team_mutated(event: EventEnum): page_team_mutated
  page_program_programs_3_mutated(event: EventEnum): page_program_programs_3_mutated
  page_team_directus_users_mutated(event: EventEnum): page_team_directus_users_mutated
  page_program_programs_mutated(event: EventEnum): page_program_programs_mutated
  page_team_directus_users_1_mutated(event: EventEnum): page_team_directus_users_1_mutated
  page_team_directus_users_2_mutated(event: EventEnum): page_team_directus_users_2_mutated
  page_program_programs_1_mutated(event: EventEnum): page_program_programs_1_mutated
  page_program_programs_2_mutated(event: EventEnum): page_program_programs_2_mutated
  page_program_mutated(event: EventEnum): page_program_mutated
  page_receive_mutated(event: EventEnum): page_receive_mutated
  party_tips_mutated(event: EventEnum): party_tips_mutated
  page_history_mutated(event: EventEnum): page_history_mutated
  page_member_mutated(event: EventEnum): page_member_mutated
  contact_address_mutated(event: EventEnum): contact_address_mutated
  page_receive_nodes_mutated(event: EventEnum): page_receive_nodes_mutated
  page_history_nodes_mutated(event: EventEnum): page_history_nodes_mutated
  orders_mutated(event: EventEnum): orders_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
  events_mutated(event: EventEnum): events_mutated
  statements_mutated(event: EventEnum): statements_mutated
  iframe_mutated(event: EventEnum): iframe_mutated
  events_event_shows_mutated(event: EventEnum): events_event_shows_mutated
  post_mutated(event: EventEnum): post_mutated
  post_directus_users_mutated(event: EventEnum): post_directus_users_mutated
  post_editor_nodes_mutated(event: EventEnum): post_editor_nodes_mutated
  event_shows_mutated(event: EventEnum): event_shows_mutated
  post_files_mutated(event: EventEnum): post_files_mutated
  events_editor_nodes_mutated(event: EventEnum): events_editor_nodes_mutated
  tags_mutated(event: EventEnum): tags_mutated
  post_tags_1_mutated(event: EventEnum): post_tags_1_mutated
  audio_player_files_mutated(event: EventEnum): audio_player_files_mutated
  audio_player_mutated(event: EventEnum): audio_player_mutated
  page_join_mutated(event: EventEnum): page_join_mutated
  page_join_nodes_mutated(event: EventEnum): page_join_nodes_mutated
  page_internship_nodes_mutated(event: EventEnum): page_internship_nodes_mutated
  internships_mutated(event: EventEnum): internships_mutated
  page_internship_internships_mutated(event: EventEnum): page_internship_internships_mutated
  page_internship_mutated(event: EventEnum): page_internship_mutated
  page_classes_mutated(event: EventEnum): page_classes_mutated
  page_classes_nodes_mutated(event: EventEnum): page_classes_nodes_mutated
  page_history_image_link_mutated(event: EventEnum): page_history_image_link_mutated
  classes_mutated(event: EventEnum): classes_mutated
  page_history_files_mutated(event: EventEnum): page_history_files_mutated
  page_classes_classes_mutated(event: EventEnum): page_classes_classes_mutated
  page_history_files_1_mutated(event: EventEnum): page_history_files_1_mutated
  image_link_mutated(event: EventEnum): image_link_mutated
  events_image_link_mutated(event: EventEnum): events_image_link_mutated
  page_contact_image_link_mutated(event: EventEnum): page_contact_image_link_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""GeoJSON value"""
scalar GraphQLGeoJSON

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum EventEnum {
  create
  update
  delete
}

union events_editor_nodes_item_union = iframe

union page_classes_nodes_item_union = image_box

union page_history_nodes_item_union = image_box

union page_internship_nodes_item_union = image_box

union page_join_nodes_item_union = info_box | audio_player

union page_receive_nodes_item_union = info_box

union post_editor_nodes_item_union = info_box | quote

type audio_player {
  id: ID!
  files(filter: audio_player_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [audio_player_files]
  files_func: count_functions
}

type audio_player_aggregated {
  group: JSON
  countAll: Int
  count: audio_player_aggregated_count
  countDistinct: audio_player_aggregated_count
  avg: audio_player_aggregated_fields
  sum: audio_player_aggregated_fields
  avgDistinct: audio_player_aggregated_fields
  sumDistinct: audio_player_aggregated_fields
  min: audio_player_aggregated_fields
  max: audio_player_aggregated_fields
}

type audio_player_aggregated_count {
  id: Int
  files: Int
}

type audio_player_aggregated_fields {
  id: Float
}

type audio_player_files {
  id: ID!
  audio_player_id(filter: audio_player_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): audio_player
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type audio_player_files_aggregated {
  group: JSON
  countAll: Int
  count: audio_player_files_aggregated_count
  countDistinct: audio_player_files_aggregated_count
  avg: audio_player_files_aggregated_fields
  sum: audio_player_files_aggregated_fields
  avgDistinct: audio_player_files_aggregated_fields
  sumDistinct: audio_player_files_aggregated_fields
  min: audio_player_files_aggregated_fields
  max: audio_player_files_aggregated_fields
}

type audio_player_files_aggregated_count {
  id: Int
  audio_player_id: Int
  directus_files_id: Int
}

type audio_player_files_aggregated_fields {
  id: Float
  audio_player_id: Float
}

type audio_player_files_mutated {
  key: ID!
  event: EventEnum
  data: audio_player_files
}

type audio_player_mutated {
  key: ID!
  event: EventEnum
  data: audio_player
}

type classes {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  date: Date
  date_func: date_functions
  time_start: Date
  time_start_func: time_functions
  time_end: Date
  time_end_func: time_functions
  location: String
  price: String
  teacher: String
  what_else: String
  email: String
  content: JSON
  content_func: count_functions
}

type classes_aggregated {
  group: JSON
  countAll: Int
  count: classes_aggregated_count
  countDistinct: classes_aggregated_count
  avg: classes_aggregated_fields
  sum: classes_aggregated_fields
  avgDistinct: classes_aggregated_fields
  sumDistinct: classes_aggregated_fields
  min: classes_aggregated_fields
  max: classes_aggregated_fields
}

type classes_aggregated_count {
  id: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  title: Int
  date: Int
  time_start: Int
  time_end: Int
  location: Int
  price: Int
  teacher: Int
  what_else: Int
  email: Int
  content: Int
}

type classes_aggregated_fields {
  id: Float
  sort: Float
}

type classes_mutated {
  key: ID!
  event: EventEnum
  data: classes
}

type config {
  id: ID!
  front_end_url: String
}

type config_mutated {
  key: ID!
  event: EventEnum
  data: config
}

type contact_address {
  id: ID!
  name: String
  phone_number: String
  email: String
}

type contact_address_aggregated {
  group: JSON
  countAll: Int
  count: contact_address_aggregated_count
  countDistinct: contact_address_aggregated_count
  avg: contact_address_aggregated_fields
  sum: contact_address_aggregated_fields
  avgDistinct: contact_address_aggregated_fields
  sumDistinct: contact_address_aggregated_fields
  min: contact_address_aggregated_fields
  max: contact_address_aggregated_fields
}

type contact_address_aggregated_count {
  id: Int
  name: Int
  phone_number: Int
  email: Int
}

type contact_address_aggregated_fields {
  id: Float
}

type contact_address_mutated {
  key: ID!
  event: EventEnum
  data: contact_address
}

type count_functions {
  count: Int
}

type date_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_access {
  id: ID!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
  sort: Int
}

type directus_access_mutated {
  key: ID!
  event: EventEnum
  data: directus_access
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  comment: String
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_comments {
  id: ID!
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_comments_mutated {
  key: ID!
  event: EventEnum
  data: directus_comments
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  created_on: Date
  created_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  uploaded_on: Date
  uploaded_on_func: datetime_functions

  """Automatically generated by the extension blurhasher"""
  blurhash: String
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_policies {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions]
  permissions_func: count_functions
  users(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  users_func: count_functions
  roles(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  roles_func: count_functions
}

type directus_policies_mutated {
  key: ID!
  event: EventEnum
  data: directus_policies
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  parent(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  children(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles]
  children_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions

  """
  This parameter determines the detail level in the BlurHash, affecting its complexity and length from high (detailed) to low (abstract).
  """
  blurhasher_detail_level: String

  """
  Enables regeneration of all BlurHashes for illustrations upon system restart.
  """
  blurhasher_regenerate_on_restart: Boolean
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_aggregated {
  group: JSON
  countAll: Int
  count: directus_sync_id_map_aggregated_count
  countDistinct: directus_sync_id_map_aggregated_count
  avg: directus_sync_id_map_aggregated_fields
  sum: directus_sync_id_map_aggregated_fields
  avgDistinct: directus_sync_id_map_aggregated_fields
  sumDistinct: directus_sync_id_map_aggregated_fields
  min: directus_sync_id_map_aggregated_fields
  max: directus_sync_id_map_aggregated_fields
}

type directus_sync_id_map_aggregated_count {
  id: Int
  table: Int
  sync_id: Int
  local_id: Int
  created_at: Int
}

type directus_sync_id_map_aggregated_fields {
  id: Float
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  programs(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users]
  programs_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  delta: JSON
  delta_func: count_functions
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type event_shows {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  date: Date
  date_func: date_functions
  opening_time: Date
  opening_time_func: time_functions
  starting_time: Date
  starting_time_func: time_functions
  program: String
  place: String
  website: String
  content: JSON
  content_func: count_functions
  button_label: String
  button_url: String
  imagebox(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_box
}

type event_shows_aggregated {
  group: JSON
  countAll: Int
  count: event_shows_aggregated_count
  countDistinct: event_shows_aggregated_count
  avg: event_shows_aggregated_fields
  sum: event_shows_aggregated_fields
  avgDistinct: event_shows_aggregated_fields
  sumDistinct: event_shows_aggregated_fields
  min: event_shows_aggregated_fields
  max: event_shows_aggregated_fields
}

type event_shows_aggregated_count {
  id: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  date: Int
  opening_time: Int
  starting_time: Int
  program: Int
  place: Int
  website: Int
  content: Int
  button_label: Int
  button_url: Int
  imagebox: Int
}

type event_shows_aggregated_fields {
  id: Float
  sort: Float
  imagebox: Float
}

type event_shows_mutated {
  key: ID!
  event: EventEnum
  data: event_shows
}

type events {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String

  """www.rabe.ch/events/slug"""
  slug: String
  content: JSON
  content_func: count_functions
  title_info: String
  title_image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  color: String
  promo_title: String
  promo_text: String
  promo_button_label: String
  promo_button_url: String
  promo_status: String
  partner_title: String
  shows(filter: events_event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_event_shows]
  shows_func: count_functions
  editor_nodes(filter: events_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_editor_nodes]
  editor_nodes_func: count_functions
  partner_logos(filter: events_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_image_link]
  partner_logos_func: count_functions
}

type events_aggregated {
  group: JSON
  countAll: Int
  count: events_aggregated_count
  countDistinct: events_aggregated_count
  avg: events_aggregated_fields
  sum: events_aggregated_fields
  avgDistinct: events_aggregated_fields
  sumDistinct: events_aggregated_fields
  min: events_aggregated_fields
  max: events_aggregated_fields
}

type events_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  title: Int

  """www.rabe.ch/events/slug"""
  slug: Int
  content: Int
  title_info: Int
  title_image: Int
  color: Int
  promo_title: Int
  promo_text: Int
  promo_button_label: Int
  promo_button_url: Int
  promo_status: Int
  partner_title: Int
  shows: Int
  editor_nodes: Int
  partner_logos: Int
}

type events_aggregated_fields {
  id: Float
}

type events_editor_nodes {
  id: ID!
  events_id(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): events
  item: events_editor_nodes_item_union
  collection: String
}

type events_editor_nodes_aggregated {
  group: JSON
  countAll: Int
  count: events_editor_nodes_aggregated_count
  countDistinct: events_editor_nodes_aggregated_count
  avg: events_editor_nodes_aggregated_fields
  sum: events_editor_nodes_aggregated_fields
  avgDistinct: events_editor_nodes_aggregated_fields
  sumDistinct: events_editor_nodes_aggregated_fields
  min: events_editor_nodes_aggregated_fields
  max: events_editor_nodes_aggregated_fields
}

type events_editor_nodes_aggregated_count {
  id: Int
  events_id: Int
  item: Int
  collection: Int
}

type events_editor_nodes_aggregated_fields {
  events_id: Float
}

type events_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: events_editor_nodes
}

type events_event_shows {
  id: ID!
  events_id(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): events
  event_shows_id(filter: event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): event_shows
  sort: GraphQLBigInt
}

type events_event_shows_aggregated {
  group: JSON
  countAll: Int
  count: events_event_shows_aggregated_count
  countDistinct: events_event_shows_aggregated_count
  avg: events_event_shows_aggregated_fields
  sum: events_event_shows_aggregated_fields
  avgDistinct: events_event_shows_aggregated_fields
  sumDistinct: events_event_shows_aggregated_fields
  min: events_event_shows_aggregated_fields
  max: events_event_shows_aggregated_fields
}

type events_event_shows_aggregated_count {
  id: Int
  events_id: Int
  event_shows_id: Int
  sort: Int
}

type events_event_shows_aggregated_fields {
  id: Float
  events_id: Float
  event_shows_id: Float
  sort: Float
}

type events_event_shows_mutated {
  key: ID!
  event: EventEnum
  data: events_event_shows
}

type events_image_link {
  id: ID!
  events_id(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): events
  image_link_id(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_link
  sort: GraphQLBigInt
}

type events_image_link_aggregated {
  group: JSON
  countAll: Int
  count: events_image_link_aggregated_count
  countDistinct: events_image_link_aggregated_count
  avg: events_image_link_aggregated_fields
  sum: events_image_link_aggregated_fields
  avgDistinct: events_image_link_aggregated_fields
  sumDistinct: events_image_link_aggregated_fields
  min: events_image_link_aggregated_fields
  max: events_image_link_aggregated_fields
}

type events_image_link_aggregated_count {
  id: Int
  events_id: Int
  image_link_id: Int
  sort: Int
}

type events_image_link_aggregated_fields {
  id: Float
  events_id: Float
  image_link_id: Float
  sort: Float
}

type events_image_link_mutated {
  key: ID!
  event: EventEnum
  data: events_image_link
}

type events_mutated {
  key: ID!
  event: EventEnum
  data: events
}

type iframe {
  id: ID!
  code: String
}

type iframe_aggregated {
  group: JSON
  countAll: Int
  count: iframe_aggregated_count
  countDistinct: iframe_aggregated_count
  avg: iframe_aggregated_fields
  sum: iframe_aggregated_fields
  avgDistinct: iframe_aggregated_fields
  sumDistinct: iframe_aggregated_fields
  min: iframe_aggregated_fields
  max: iframe_aggregated_fields
}

type iframe_aggregated_count {
  id: Int
  code: Int
}

type iframe_aggregated_fields {
  id: Float
}

type iframe_mutated {
  key: ID!
  event: EventEnum
  data: iframe
}

type image_box {
  id: ID!
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  text: String
  title: String
}

type image_box_aggregated {
  group: JSON
  countAll: Int
  count: image_box_aggregated_count
  countDistinct: image_box_aggregated_count
  avg: image_box_aggregated_fields
  sum: image_box_aggregated_fields
  avgDistinct: image_box_aggregated_fields
  sumDistinct: image_box_aggregated_fields
  min: image_box_aggregated_fields
  max: image_box_aggregated_fields
}

type image_box_aggregated_count {
  id: Int
  image: Int
  text: Int
  title: Int
}

type image_box_aggregated_fields {
  id: Float
}

type image_box_mutated {
  key: ID!
  event: EventEnum
  data: image_box
}

type image_link {
  id: ID!
  url: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type image_link_aggregated {
  group: JSON
  countAll: Int
  count: image_link_aggregated_count
  countDistinct: image_link_aggregated_count
  avg: image_link_aggregated_fields
  sum: image_link_aggregated_fields
  avgDistinct: image_link_aggregated_fields
  sumDistinct: image_link_aggregated_fields
  min: image_link_aggregated_fields
  max: image_link_aggregated_fields
}

type image_link_aggregated_count {
  id: Int
  url: Int
  image: Int
}

type image_link_aggregated_fields {
  id: Float
}

type image_link_mutated {
  key: ID!
  event: EventEnum
  data: image_link
}

type info_box {
  id: ID!
  title: String
  text: JSON
  text_func: count_functions
}

type info_box_aggregated {
  group: JSON
  countAll: Int
  count: info_box_aggregated_count
  countDistinct: info_box_aggregated_count
  avg: info_box_aggregated_fields
  sum: info_box_aggregated_fields
  avgDistinct: info_box_aggregated_fields
  sumDistinct: info_box_aggregated_fields
  min: info_box_aggregated_fields
  max: info_box_aggregated_fields
}

type info_box_aggregated_count {
  id: Int
  title: Int
  text: Int
}

type info_box_aggregated_fields {
  id: Float
}

type info_box_mutated {
  key: ID!
  event: EventEnum
  data: info_box
}

type internships {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  program: String
  duration: String
  workload: String
  start: String
  deadline: Date
  deadline_func: date_functions
  email: String
  content: JSON
  content_func: count_functions
  title: String
}

type internships_aggregated {
  group: JSON
  countAll: Int
  count: internships_aggregated_count
  countDistinct: internships_aggregated_count
  avg: internships_aggregated_fields
  sum: internships_aggregated_fields
  avgDistinct: internships_aggregated_fields
  sumDistinct: internships_aggregated_fields
  min: internships_aggregated_fields
  max: internships_aggregated_fields
}

type internships_aggregated_count {
  id: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  program: Int
  duration: Int
  workload: Int
  start: Int
  deadline: Int
  email: Int
  content: Int
  title: Int
}

type internships_aggregated_fields {
  id: Float
  sort: Float
}

type internships_mutated {
  key: ID!
  event: EventEnum
  data: internships
}

type member_product {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  label: String
  price: Float
  name: String
}

type member_product_aggregated {
  group: JSON
  countAll: Int
  count: member_product_aggregated_count
  countDistinct: member_product_aggregated_count
  avg: member_product_aggregated_fields
  sum: member_product_aggregated_fields
  avgDistinct: member_product_aggregated_fields
  sumDistinct: member_product_aggregated_fields
  min: member_product_aggregated_fields
  max: member_product_aggregated_fields
}

type member_product_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  label: Int
  price: Int
  name: Int
}

type member_product_aggregated_fields {
  id: Float
  sort: Float
  price: Float
}

type member_product_mutated {
  key: ID!
  event: EventEnum
  data: member_product
}

type orders {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  status: String
  price: Float!
  name: String!
  token: String
  first_name: String!
  family_name: String!
  email: String!
  address: String!
  plz: String!
  city: String!
  phone_number: String
}

type orders_aggregated {
  group: JSON
  countAll: Int
  count: orders_aggregated_count
  countDistinct: orders_aggregated_count
  avg: orders_aggregated_fields
  sum: orders_aggregated_fields
  avgDistinct: orders_aggregated_fields
  sumDistinct: orders_aggregated_fields
  min: orders_aggregated_fields
  max: orders_aggregated_fields
}

type orders_aggregated_count {
  id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  status: Int
  price: Int
  name: Int
  token: Int
  first_name: Int
  family_name: Int
  email: Int
  address: Int
  plz: Int
  city: Int
  phone_number: Int
}

type orders_aggregated_fields {
  price: Float
}

type orders_mutated {
  key: ID!
  event: EventEnum
  data: orders
}

type page_agb {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
}

type page_agb_mutated {
  key: ID!
  event: EventEnum
  data: page_agb
}

type page_classes {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_classes_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_classes_nodes]
  editor_nodes_func: count_functions
  classes(filter: page_classes_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_classes_classes]
  classes_func: count_functions
}

type page_classes_classes {
  id: ID!
  page_classes_id(filter: page_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_classes
  classes_id(filter: classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): classes
  sort: GraphQLBigInt
}

type page_classes_classes_aggregated {
  group: JSON
  countAll: Int
  count: page_classes_classes_aggregated_count
  countDistinct: page_classes_classes_aggregated_count
  avg: page_classes_classes_aggregated_fields
  sum: page_classes_classes_aggregated_fields
  avgDistinct: page_classes_classes_aggregated_fields
  sumDistinct: page_classes_classes_aggregated_fields
  min: page_classes_classes_aggregated_fields
  max: page_classes_classes_aggregated_fields
}

type page_classes_classes_aggregated_count {
  id: Int
  page_classes_id: Int
  classes_id: Int
  sort: Int
}

type page_classes_classes_aggregated_fields {
  id: Float
  page_classes_id: Float
  classes_id: Float
  sort: Float
}

type page_classes_classes_mutated {
  key: ID!
  event: EventEnum
  data: page_classes_classes
}

type page_classes_mutated {
  key: ID!
  event: EventEnum
  data: page_classes
}

type page_classes_nodes {
  id: ID!
  page_classes_id(filter: page_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_classes
  item: page_classes_nodes_item_union
  collection: String
}

type page_classes_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_classes_nodes_aggregated_count
  countDistinct: page_classes_nodes_aggregated_count
  avg: page_classes_nodes_aggregated_fields
  sum: page_classes_nodes_aggregated_fields
  avgDistinct: page_classes_nodes_aggregated_fields
  sumDistinct: page_classes_nodes_aggregated_fields
  min: page_classes_nodes_aggregated_fields
  max: page_classes_nodes_aggregated_fields
}

type page_classes_nodes_aggregated_count {
  id: Int
  page_classes_id: Int
  item: Int
  collection: Int
}

type page_classes_nodes_aggregated_fields {
  page_classes_id: Float
}

type page_classes_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_classes_nodes
}

type page_contact {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  partner_logos(filter: page_contact_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_image_link]
  partner_logos_func: count_functions
  contact_addresses(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_contact_address]
  contact_addresses_func: count_functions
}

type page_contact_contact_address {
  id: ID!
  page_contact_id(filter: page_contact_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_contact
  contact_address_id(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): contact_address
}

type page_contact_contact_address_aggregated {
  group: JSON
  countAll: Int
  count: page_contact_contact_address_aggregated_count
  countDistinct: page_contact_contact_address_aggregated_count
  avg: page_contact_contact_address_aggregated_fields
  sum: page_contact_contact_address_aggregated_fields
  avgDistinct: page_contact_contact_address_aggregated_fields
  sumDistinct: page_contact_contact_address_aggregated_fields
  min: page_contact_contact_address_aggregated_fields
  max: page_contact_contact_address_aggregated_fields
}

type page_contact_contact_address_aggregated_count {
  id: Int
  page_contact_id: Int
  contact_address_id: Int
}

type page_contact_contact_address_aggregated_fields {
  id: Float
  page_contact_id: Float
  contact_address_id: Float
}

type page_contact_contact_address_mutated {
  key: ID!
  event: EventEnum
  data: page_contact_contact_address
}

type page_contact_image_link {
  id: ID!
  page_contact_id(filter: page_contact_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_contact
  image_link_id(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_link
  sort: GraphQLBigInt
}

type page_contact_image_link_aggregated {
  group: JSON
  countAll: Int
  count: page_contact_image_link_aggregated_count
  countDistinct: page_contact_image_link_aggregated_count
  avg: page_contact_image_link_aggregated_fields
  sum: page_contact_image_link_aggregated_fields
  avgDistinct: page_contact_image_link_aggregated_fields
  sumDistinct: page_contact_image_link_aggregated_fields
  min: page_contact_image_link_aggregated_fields
  max: page_contact_image_link_aggregated_fields
}

type page_contact_image_link_aggregated_count {
  id: Int
  page_contact_id: Int
  image_link_id: Int
  sort: Int
}

type page_contact_image_link_aggregated_fields {
  id: Float
  page_contact_id: Float
  image_link_id: Float
  sort: Float
}

type page_contact_image_link_mutated {
  key: ID!
  event: EventEnum
  data: page_contact_image_link
}

type page_contact_mutated {
  key: ID!
  event: EventEnum
  data: page_contact
}

type page_history {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  vision(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  statutes(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  protocols(filter: page_history_files_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files_1]
  protocols_func: count_functions
  editor_nodes(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_nodes]
  editor_nodes_func: count_functions
  logos(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files]
  logos_func: count_functions
}

type page_history_files {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type page_history_files_1 {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type page_history_files_1_aggregated {
  group: JSON
  countAll: Int
  count: page_history_files_1_aggregated_count
  countDistinct: page_history_files_1_aggregated_count
  avg: page_history_files_1_aggregated_fields
  sum: page_history_files_1_aggregated_fields
  avgDistinct: page_history_files_1_aggregated_fields
  sumDistinct: page_history_files_1_aggregated_fields
  min: page_history_files_1_aggregated_fields
  max: page_history_files_1_aggregated_fields
}

type page_history_files_1_aggregated_count {
  id: Int
  page_history_id: Int
  directus_files_id: Int
}

type page_history_files_1_aggregated_fields {
  id: Float
  page_history_id: Float
}

type page_history_files_1_mutated {
  key: ID!
  event: EventEnum
  data: page_history_files_1
}

type page_history_files_aggregated {
  group: JSON
  countAll: Int
  count: page_history_files_aggregated_count
  countDistinct: page_history_files_aggregated_count
  avg: page_history_files_aggregated_fields
  sum: page_history_files_aggregated_fields
  avgDistinct: page_history_files_aggregated_fields
  sumDistinct: page_history_files_aggregated_fields
  min: page_history_files_aggregated_fields
  max: page_history_files_aggregated_fields
}

type page_history_files_aggregated_count {
  id: Int
  page_history_id: Int
  directus_files_id: Int
}

type page_history_files_aggregated_fields {
  id: Float
  page_history_id: Float
}

type page_history_files_mutated {
  key: ID!
  event: EventEnum
  data: page_history_files
}

type page_history_image_link {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  image_link_id(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_link
  sort: GraphQLBigInt
}

type page_history_image_link_aggregated {
  group: JSON
  countAll: Int
  count: page_history_image_link_aggregated_count
  countDistinct: page_history_image_link_aggregated_count
  avg: page_history_image_link_aggregated_fields
  sum: page_history_image_link_aggregated_fields
  avgDistinct: page_history_image_link_aggregated_fields
  sumDistinct: page_history_image_link_aggregated_fields
  min: page_history_image_link_aggregated_fields
  max: page_history_image_link_aggregated_fields
}

type page_history_image_link_aggregated_count {
  id: Int
  page_history_id: Int
  image_link_id: Int
  sort: Int
}

type page_history_image_link_aggregated_fields {
  id: Float
  page_history_id: Float
  image_link_id: Float
  sort: Float
}

type page_history_image_link_mutated {
  key: ID!
  event: EventEnum
  data: page_history_image_link
}

type page_history_mutated {
  key: ID!
  event: EventEnum
  data: page_history
}

type page_history_nodes {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  item: page_history_nodes_item_union
  collection: String
}

type page_history_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_history_nodes_aggregated_count
  countDistinct: page_history_nodes_aggregated_count
  avg: page_history_nodes_aggregated_fields
  sum: page_history_nodes_aggregated_fields
  avgDistinct: page_history_nodes_aggregated_fields
  sumDistinct: page_history_nodes_aggregated_fields
  min: page_history_nodes_aggregated_fields
  max: page_history_nodes_aggregated_fields
}

type page_history_nodes_aggregated_count {
  id: Int
  page_history_id: Int
  item: Int
  collection: Int
}

type page_history_nodes_aggregated_fields {
  page_history_id: Float
}

type page_history_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_history_nodes
}

type page_impressum {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
}

type page_impressum_mutated {
  key: ID!
  event: EventEnum
  data: page_impressum
}

type page_internship {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  info_title: String
  info_text: JSON
  info_text_func: count_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_internship_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_internship_nodes]
  editor_nodes_func: count_functions
  internships(filter: page_internship_internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_internship_internships]
  internships_func: count_functions
}

type page_internship_internships {
  id: ID!
  page_internship_id(filter: page_internship_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_internship
  internships_id(filter: internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): internships
  sort: GraphQLBigInt
}

type page_internship_internships_aggregated {
  group: JSON
  countAll: Int
  count: page_internship_internships_aggregated_count
  countDistinct: page_internship_internships_aggregated_count
  avg: page_internship_internships_aggregated_fields
  sum: page_internship_internships_aggregated_fields
  avgDistinct: page_internship_internships_aggregated_fields
  sumDistinct: page_internship_internships_aggregated_fields
  min: page_internship_internships_aggregated_fields
  max: page_internship_internships_aggregated_fields
}

type page_internship_internships_aggregated_count {
  id: Int
  page_internship_id: Int
  internships_id: Int
  sort: Int
}

type page_internship_internships_aggregated_fields {
  id: Float
  page_internship_id: Float
  internships_id: Float
  sort: Float
}

type page_internship_internships_mutated {
  key: ID!
  event: EventEnum
  data: page_internship_internships
}

type page_internship_mutated {
  key: ID!
  event: EventEnum
  data: page_internship
}

type page_internship_nodes {
  id: ID!
  page_internship_id(filter: page_internship_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_internship
  item: page_internship_nodes_item_union
  collection: String
}

type page_internship_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_internship_nodes_aggregated_count
  countDistinct: page_internship_nodes_aggregated_count
  avg: page_internship_nodes_aggregated_fields
  sum: page_internship_nodes_aggregated_fields
  avgDistinct: page_internship_nodes_aggregated_fields
  sumDistinct: page_internship_nodes_aggregated_fields
  min: page_internship_nodes_aggregated_fields
  max: page_internship_nodes_aggregated_fields
}

type page_internship_nodes_aggregated_count {
  id: Int
  page_internship_id: Int
  item: Int
  collection: Int
}

type page_internship_nodes_aggregated_fields {
  page_internship_id: Float
}

type page_internship_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_internship_nodes
}

type page_join {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_join_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_join_nodes]
  editor_nodes_func: count_functions
}

type page_join_mutated {
  key: ID!
  event: EventEnum
  data: page_join
}

type page_join_nodes {
  id: ID!
  page_join_id(filter: page_join_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_join
  item: page_join_nodes_item_union
  collection: String
}

type page_join_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_join_nodes_aggregated_count
  countDistinct: page_join_nodes_aggregated_count
  avg: page_join_nodes_aggregated_fields
  sum: page_join_nodes_aggregated_fields
  avgDistinct: page_join_nodes_aggregated_fields
  sumDistinct: page_join_nodes_aggregated_fields
  min: page_join_nodes_aggregated_fields
  max: page_join_nodes_aggregated_fields
}

type page_join_nodes_aggregated_count {
  id: Int
  page_join_id: Int
  item: Int
  collection: Int
}

type page_join_nodes_aggregated_fields {
  page_join_id: Float
}

type page_join_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_join_nodes
}

type page_member {
  id: ID!
  content: JSON
  content_func: count_functions
}

type page_member_mutated {
  key: ID!
  event: EventEnum
  data: page_member
}

type page_member_statements {
  id: ID!
  page_member_id(filter: page_member_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_member
  statements_id(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): statements
}

type page_member_statements_aggregated {
  group: JSON
  countAll: Int
  count: page_member_statements_aggregated_count
  countDistinct: page_member_statements_aggregated_count
  avg: page_member_statements_aggregated_fields
  sum: page_member_statements_aggregated_fields
  avgDistinct: page_member_statements_aggregated_fields
  sumDistinct: page_member_statements_aggregated_fields
  min: page_member_statements_aggregated_fields
  max: page_member_statements_aggregated_fields
}

type page_member_statements_aggregated_count {
  id: Int
  page_member_id: Int
  statements_id: Int
}

type page_member_statements_aggregated_fields {
  id: Float
  page_member_id: Float
  statements_id: Float
}

type page_member_statements_mutated {
  key: ID!
  event: EventEnum
  data: page_member_statements
}

type page_program {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_1(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_2]
  programs_group_1_func: count_functions
  programs_group_2(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_1]
  programs_group_2_func: count_functions
  programs_group_3(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_3]
  programs_group_3_func: count_functions
}

type page_program_mutated {
  key: ID!
  event: EventEnum
  data: page_program
}

type page_program_programs {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_1 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_1_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_1_aggregated_count
  countDistinct: page_program_programs_1_aggregated_count
  avg: page_program_programs_1_aggregated_fields
  sum: page_program_programs_1_aggregated_fields
  avgDistinct: page_program_programs_1_aggregated_fields
  sumDistinct: page_program_programs_1_aggregated_fields
  min: page_program_programs_1_aggregated_fields
  max: page_program_programs_1_aggregated_fields
}

type page_program_programs_1_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_1_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_1_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_1
}

type page_program_programs_2 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_2_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_2_aggregated_count
  countDistinct: page_program_programs_2_aggregated_count
  avg: page_program_programs_2_aggregated_fields
  sum: page_program_programs_2_aggregated_fields
  avgDistinct: page_program_programs_2_aggregated_fields
  sumDistinct: page_program_programs_2_aggregated_fields
  min: page_program_programs_2_aggregated_fields
  max: page_program_programs_2_aggregated_fields
}

type page_program_programs_2_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_2_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_2_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_2
}

type page_program_programs_3 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_3_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_3_aggregated_count
  countDistinct: page_program_programs_3_aggregated_count
  avg: page_program_programs_3_aggregated_fields
  sum: page_program_programs_3_aggregated_fields
  avgDistinct: page_program_programs_3_aggregated_fields
  sumDistinct: page_program_programs_3_aggregated_fields
  min: page_program_programs_3_aggregated_fields
  max: page_program_programs_3_aggregated_fields
}

type page_program_programs_3_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_3_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_3_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_3
}

type page_program_programs_aggregated {
  group: JSON
  countAll: Int
  count: page_program_programs_aggregated_count
  countDistinct: page_program_programs_aggregated_count
  avg: page_program_programs_aggregated_fields
  sum: page_program_programs_aggregated_fields
  avgDistinct: page_program_programs_aggregated_fields
  sumDistinct: page_program_programs_aggregated_fields
  min: page_program_programs_aggregated_fields
  max: page_program_programs_aggregated_fields
}

type page_program_programs_aggregated_count {
  id: Int
  page_program_id: Int
  programs_slug: Int
}

type page_program_programs_aggregated_fields {
  id: Float
  page_program_id: Float
}

type page_program_programs_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs
}

type page_programs {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  text: String
}

type page_programs_mutated {
  key: ID!
  event: EventEnum
  data: page_programs
}

type page_receive {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_receive_nodes]
  editor_nodes_func: count_functions
}

type page_receive_mutated {
  key: ID!
  event: EventEnum
  data: page_receive
}

type page_receive_nodes {
  id: ID!
  page_receive_id(filter: page_receive_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_receive
  item: page_receive_nodes_item_union
  collection: String
}

type page_receive_nodes_aggregated {
  group: JSON
  countAll: Int
  count: page_receive_nodes_aggregated_count
  countDistinct: page_receive_nodes_aggregated_count
  avg: page_receive_nodes_aggregated_fields
  sum: page_receive_nodes_aggregated_fields
  avgDistinct: page_receive_nodes_aggregated_fields
  sumDistinct: page_receive_nodes_aggregated_fields
  min: page_receive_nodes_aggregated_fields
  max: page_receive_nodes_aggregated_fields
}

type page_receive_nodes_aggregated_count {
  id: Int
  page_receive_id: Int
  item: Int
  collection: Int
}

type page_receive_nodes_aggregated_fields {
  page_receive_id: Float
}

type page_receive_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_receive_nodes
}

type page_team {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  text: String
  members_program(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_2]
  members_program_func: count_functions
  members_management(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_1]
  members_management_func: count_functions
  members_staff(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users]
  members_staff_func: count_functions
}

type page_team_directus_users {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_1 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_1_aggregated {
  group: JSON
  countAll: Int
  count: page_team_directus_users_1_aggregated_count
  countDistinct: page_team_directus_users_1_aggregated_count
  avg: page_team_directus_users_1_aggregated_fields
  sum: page_team_directus_users_1_aggregated_fields
  avgDistinct: page_team_directus_users_1_aggregated_fields
  sumDistinct: page_team_directus_users_1_aggregated_fields
  min: page_team_directus_users_1_aggregated_fields
  max: page_team_directus_users_1_aggregated_fields
}

type page_team_directus_users_1_aggregated_count {
  id: Int
  page_team_id: Int
  directus_users_id: Int
}

type page_team_directus_users_1_aggregated_fields {
  id: Float
  page_team_id: Float
}

type page_team_directus_users_1_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_1
}

type page_team_directus_users_2 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_2_aggregated {
  group: JSON
  countAll: Int
  count: page_team_directus_users_2_aggregated_count
  countDistinct: page_team_directus_users_2_aggregated_count
  avg: page_team_directus_users_2_aggregated_fields
  sum: page_team_directus_users_2_aggregated_fields
  avgDistinct: page_team_directus_users_2_aggregated_fields
  sumDistinct: page_team_directus_users_2_aggregated_fields
  min: page_team_directus_users_2_aggregated_fields
  max: page_team_directus_users_2_aggregated_fields
}

type page_team_directus_users_2_aggregated_count {
  id: Int
  page_team_id: Int
  directus_users_id: Int
}

type page_team_directus_users_2_aggregated_fields {
  id: Float
  page_team_id: Float
}

type page_team_directus_users_2_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_2
}

type page_team_directus_users_aggregated {
  group: JSON
  countAll: Int
  count: page_team_directus_users_aggregated_count
  countDistinct: page_team_directus_users_aggregated_count
  avg: page_team_directus_users_aggregated_fields
  sum: page_team_directus_users_aggregated_fields
  avgDistinct: page_team_directus_users_aggregated_fields
  sumDistinct: page_team_directus_users_aggregated_fields
  min: page_team_directus_users_aggregated_fields
  max: page_team_directus_users_aggregated_fields
}

type page_team_directus_users_aggregated_count {
  id: Int
  page_team_id: Int
  directus_users_id: Int
}

type page_team_directus_users_aggregated_fields {
  id: Float
  page_team_id: Float
}

type page_team_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users
}

type page_team_mutated {
  key: ID!
  event: EventEnum
  data: page_team
}

type party_location {
  id: ID!
  url: String
  address_line_1: String
  address_line_2: String
  logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type party_location_aggregated {
  group: JSON
  countAll: Int
  count: party_location_aggregated_count
  countDistinct: party_location_aggregated_count
  avg: party_location_aggregated_fields
  sum: party_location_aggregated_fields
  avgDistinct: party_location_aggregated_fields
  sumDistinct: party_location_aggregated_fields
  min: party_location_aggregated_fields
  max: party_location_aggregated_fields
}

type party_location_aggregated_count {
  id: Int
  url: Int
  address_line_1: Int
  address_line_2: Int
  logo: Int
}

type party_location_aggregated_fields {
  id: Float
}

type party_location_mutated {
  key: ID!
  event: EventEnum
  data: party_location
}

type party_tips {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  date: Date
  date_func: datetime_functions
  title_2: String
  title_1: String
  party_location(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): party_location
}

type party_tips_aggregated {
  group: JSON
  countAll: Int
  count: party_tips_aggregated_count
  countDistinct: party_tips_aggregated_count
  avg: party_tips_aggregated_fields
  sum: party_tips_aggregated_fields
  avgDistinct: party_tips_aggregated_fields
  sumDistinct: party_tips_aggregated_fields
  min: party_tips_aggregated_fields
  max: party_tips_aggregated_fields
}

type party_tips_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  date: Int
  title_2: Int
  title_1: Int
  party_location: Int
}

type party_tips_aggregated_fields {
  id: Float
  sort: Float
  party_location: Float
}

type party_tips_mutated {
  key: ID!
  event: EventEnum
  data: party_tips
}

type post {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  date: Date!
  date_func: datetime_functions
  title: String!
  slug: String!
  program(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
  imagebox(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_box
  content: JSON!
  content_func: count_functions
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  audio_files(filter: post_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_files]
  audio_files_func: count_functions
  tags(filter: post_tags_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_tags_1]
  tags_func: count_functions
  editor_nodes(filter: post_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_editor_nodes]
  editor_nodes_func: count_functions
  authors(filter: post_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_directus_users]
  authors_func: count_functions
}

type post_aggregated {
  group: JSON
  countAll: Int
  count: post_aggregated_count
  countDistinct: post_aggregated_count
  avg: post_aggregated_fields
  sum: post_aggregated_fields
  avgDistinct: post_aggregated_fields
  sumDistinct: post_aggregated_fields
  min: post_aggregated_fields
  max: post_aggregated_fields
}

type post_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  date: Int
  title: Int
  slug: Int
  program: Int
  imagebox: Int
  content: Int
  preview_full_image: Int

  """Maximal zwei Sätze"""
  short_description: Int
  audio_files: Int
  tags: Int
  editor_nodes: Int
  authors: Int
}

type post_aggregated_fields {
  id: Float
  sort: Float
  imagebox: Float
}

type post_directus_users {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type post_directus_users_aggregated {
  group: JSON
  countAll: Int
  count: post_directus_users_aggregated_count
  countDistinct: post_directus_users_aggregated_count
  avg: post_directus_users_aggregated_fields
  sum: post_directus_users_aggregated_fields
  avgDistinct: post_directus_users_aggregated_fields
  sumDistinct: post_directus_users_aggregated_fields
  min: post_directus_users_aggregated_fields
  max: post_directus_users_aggregated_fields
}

type post_directus_users_aggregated_count {
  id: Int
  post_id: Int
  directus_users_id: Int
}

type post_directus_users_aggregated_fields {
  id: Float
  post_id: Float
}

type post_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: post_directus_users
}

type post_editor_nodes {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  item: post_editor_nodes_item_union
  collection: String
}

type post_editor_nodes_aggregated {
  group: JSON
  countAll: Int
  count: post_editor_nodes_aggregated_count
  countDistinct: post_editor_nodes_aggregated_count
  avg: post_editor_nodes_aggregated_fields
  sum: post_editor_nodes_aggregated_fields
  avgDistinct: post_editor_nodes_aggregated_fields
  sumDistinct: post_editor_nodes_aggregated_fields
  min: post_editor_nodes_aggregated_fields
  max: post_editor_nodes_aggregated_fields
}

type post_editor_nodes_aggregated_count {
  id: Int
  post_id: Int
  item: Int
  collection: Int
}

type post_editor_nodes_aggregated_fields {
  post_id: Float
}

type post_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: post_editor_nodes
}

type post_files {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  sort: Int
}

type post_files_aggregated {
  group: JSON
  countAll: Int
  count: post_files_aggregated_count
  countDistinct: post_files_aggregated_count
  avg: post_files_aggregated_fields
  sum: post_files_aggregated_fields
  avgDistinct: post_files_aggregated_fields
  sumDistinct: post_files_aggregated_fields
  min: post_files_aggregated_fields
  max: post_files_aggregated_fields
}

type post_files_aggregated_count {
  id: Int
  post_id: Int
  directus_files_id: Int
  sort: Int
}

type post_files_aggregated_fields {
  id: Float
  post_id: Float
  sort: Float
}

type post_files_mutated {
  key: ID!
  event: EventEnum
  data: post_files
}

type post_mutated {
  key: ID!
  event: EventEnum
  data: post
}

type post_tags_1 {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
}

type post_tags_1_aggregated {
  group: JSON
  countAll: Int
  count: post_tags_1_aggregated_count
  countDistinct: post_tags_1_aggregated_count
  avg: post_tags_1_aggregated_fields
  sum: post_tags_1_aggregated_fields
  avgDistinct: post_tags_1_aggregated_fields
  sumDistinct: post_tags_1_aggregated_fields
  min: post_tags_1_aggregated_fields
  max: post_tags_1_aggregated_fields
}

type post_tags_1_aggregated_count {
  id: Int
  post_id: Int
  tags_id: Int
}

type post_tags_1_aggregated_fields {
  id: Float
  post_id: Float
  tags_id: Float
}

type post_tags_1_mutated {
  key: ID!
  event: EventEnum
  data: post_tags_1
}

type programs {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  content: JSON
  content_func: count_functions
  team(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users]
  team_func: count_functions
  posts(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post]
  posts_func: count_functions
}

type programs_aggregated {
  group: JSON
  countAll: Int
  count: programs_aggregated_count
  countDistinct: programs_aggregated_count
  avg: programs_aggregated_fields
  sum: programs_aggregated_fields
  avgDistinct: programs_aggregated_fields
  sumDistinct: programs_aggregated_fields
  min: programs_aggregated_fields
  max: programs_aggregated_fields
}

type programs_aggregated_count {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  image: Int
  content: Int
  team: Int
  posts: Int
}

type programs_aggregated_fields {
  sort: Float
}

type programs_directus_users {
  id: ID!
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type programs_directus_users_aggregated {
  group: JSON
  countAll: Int
  count: programs_directus_users_aggregated_count
  countDistinct: programs_directus_users_aggregated_count
  avg: programs_directus_users_aggregated_fields
  sum: programs_directus_users_aggregated_fields
  avgDistinct: programs_directus_users_aggregated_fields
  sumDistinct: programs_directus_users_aggregated_fields
  min: programs_directus_users_aggregated_fields
  max: programs_directus_users_aggregated_fields
}

type programs_directus_users_aggregated_count {
  id: Int
  programs_slug: Int
  directus_users_id: Int
}

type programs_directus_users_aggregated_fields {
  id: Float
}

type programs_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: programs_directus_users
}

type programs_mutated {
  key: ID!
  event: EventEnum
  data: programs
}

type quote {
  id: ID!
  text: String
  info: String
  author: String
}

type quote_aggregated {
  group: JSON
  countAll: Int
  count: quote_aggregated_count
  countDistinct: quote_aggregated_count
  avg: quote_aggregated_fields
  sum: quote_aggregated_fields
  avgDistinct: quote_aggregated_fields
  sumDistinct: quote_aggregated_fields
  min: quote_aggregated_fields
  max: quote_aggregated_fields
}

type quote_aggregated_count {
  id: Int
  text: Int
  info: Int
  author: Int
}

type quote_aggregated_fields {
  id: Float
}

type quote_mutated {
  key: ID!
  event: EventEnum
  data: quote
}

type statements {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  text: String
  author: String
}

type statements_aggregated {
  group: JSON
  countAll: Int
  count: statements_aggregated_count
  countDistinct: statements_aggregated_count
  avg: statements_aggregated_fields
  sum: statements_aggregated_fields
  avgDistinct: statements_aggregated_fields
  sumDistinct: statements_aggregated_fields
  min: statements_aggregated_fields
  max: statements_aggregated_fields
}

type statements_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  text: Int
  author: Int
}

type statements_aggregated_fields {
  id: Float
  sort: Float
}

type statements_mutated {
  key: ID!
  event: EventEnum
  data: statements
}

type tags {
  id: ID!
  value: String
}

type tags_aggregated {
  group: JSON
  countAll: Int
  count: tags_aggregated_count
  countDistinct: tags_aggregated_count
  avg: tags_aggregated_fields
  sum: tags_aggregated_fields
  avgDistinct: tags_aggregated_fields
  sumDistinct: tags_aggregated_fields
  min: tags_aggregated_fields
  max: tags_aggregated_fields
}

type tags_aggregated_count {
  id: Int
  value: Int
}

type tags_aggregated_fields {
  id: Float
}

type tags_mutated {
  key: ID!
  event: EventEnum
  data: tags
}

type time_functions {
  hour: Int
  minute: Int
  second: Int
}

""""""
type version_audio_player {
  id: ID
  files: JSON
}

""""""
type version_audio_player_files {
  id: ID
  audio_player_id: JSON
  directus_files_id: JSON
}

""""""
type version_classes {
  id: ID
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String
  date: Date
  time_start: Date
  time_end: Date
  location: String
  price: String
  teacher: String
  what_else: String
  email: String
  content: JSON
}

""""""
type version_config {
  id: ID
  front_end_url: String
}

""""""
type version_contact_address {
  id: ID
  name: String
  phone_number: String
  email: String
}

""""""
type version_directus_sync_id_map {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

""""""
type version_event_shows {
  id: ID
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  date: Date
  opening_time: Date
  starting_time: Date
  program: String
  place: String
  website: String
  content: JSON
  button_label: String
  button_url: String
  imagebox: JSON
}

""""""
type version_events {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String

  """www.rabe.ch/events/slug"""
  slug: String
  content: JSON
  title_info: String
  title_image: JSON
  color: String
  promo_title: String
  promo_text: String
  promo_button_label: String
  promo_button_url: String
  promo_status: String
  partner_title: String
  shows: JSON
  editor_nodes: JSON
  partner_logos: JSON
}

""""""
type version_events_editor_nodes {
  id: ID
  events_id: JSON
  item: String
  collection: String
}

""""""
type version_events_event_shows {
  id: ID
  events_id: JSON
  event_shows_id: JSON
  sort: GraphQLBigInt
}

""""""
type version_events_image_link {
  id: ID
  events_id: JSON
  image_link_id: JSON
  sort: GraphQLBigInt
}

""""""
type version_iframe {
  id: ID
  code: String
}

""""""
type version_image_box {
  id: ID
  image: JSON
  text: String
  title: String
}

""""""
type version_image_link {
  id: ID
  url: String
  image: JSON
}

""""""
type version_info_box {
  id: ID
  title: String
  text: JSON
}

""""""
type version_internships {
  id: ID
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  program: String
  duration: String
  workload: String
  start: String
  deadline: Date
  email: String
  content: JSON
  title: String
}

""""""
type version_member_product {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  label: String
  price: Float
  name: String
}

""""""
type version_orders {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  status: String
  price: Float
  name: String
  token: String
  first_name: String
  family_name: String
  email: String
  address: String
  plz: String
  city: String
  phone_number: String
}

""""""
type version_page_agb {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
}

""""""
type version_page_classes {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
  editor_nodes: JSON
  classes: JSON
}

""""""
type version_page_classes_classes {
  id: ID
  page_classes_id: JSON
  classes_id: JSON
  sort: GraphQLBigInt
}

""""""
type version_page_classes_nodes {
  id: ID
  page_classes_id: JSON
  item: String
  collection: String
}

""""""
type version_page_contact {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  partner_logos: JSON
  contact_addresses: JSON
}

""""""
type version_page_contact_contact_address {
  id: ID
  page_contact_id: JSON
  contact_address_id: JSON
}

""""""
type version_page_contact_image_link {
  id: ID
  page_contact_id: JSON
  image_link_id: JSON
  sort: GraphQLBigInt
}

""""""
type version_page_history {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
  vision: JSON
  statutes: JSON
  protocols: JSON
  editor_nodes: JSON
  logos: JSON
}

""""""
type version_page_history_files {
  id: ID
  page_history_id: JSON
  directus_files_id: JSON
}

""""""
type version_page_history_files_1 {
  id: ID
  page_history_id: JSON
  directus_files_id: JSON
}

""""""
type version_page_history_image_link {
  id: ID
  page_history_id: JSON
  image_link_id: JSON
  sort: GraphQLBigInt
}

""""""
type version_page_history_nodes {
  id: ID
  page_history_id: JSON
  item: String
  collection: String
}

""""""
type version_page_impressum {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
}

""""""
type version_page_internship {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  info_title: String
  info_text: JSON
  content: JSON
  editor_nodes: JSON
  internships: JSON
}

""""""
type version_page_internship_internships {
  id: ID
  page_internship_id: JSON
  internships_id: JSON
  sort: GraphQLBigInt
}

""""""
type version_page_internship_nodes {
  id: ID
  page_internship_id: JSON
  item: String
  collection: String
}

""""""
type version_page_join {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
  editor_nodes: JSON
}

""""""
type version_page_join_nodes {
  id: ID
  page_join_id: JSON
  item: String
  collection: String
}

""""""
type version_page_member {
  id: ID
  content: JSON
}

""""""
type version_page_member_statements {
  id: ID
  page_member_id: JSON
  statements_id: JSON
}

""""""
type version_page_program {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_1: JSON
  programs_group_2: JSON
  programs_group_3: JSON
}

""""""
type version_page_program_programs {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_program_programs_1 {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_program_programs_2 {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_program_programs_3 {
  id: ID
  page_program_id: JSON
  programs_slug: JSON
}

""""""
type version_page_programs {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String
  text: String
}

""""""
type version_page_receive {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  content: JSON
  editor_nodes: JSON
}

""""""
type version_page_receive_nodes {
  id: ID
  page_receive_id: JSON
  item: String
  collection: String
}

""""""
type version_page_team {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  text: String
  members_program: JSON
  members_management: JSON
  members_staff: JSON
}

""""""
type version_page_team_directus_users {
  id: ID
  page_team_id: JSON
  directus_users_id: JSON
}

""""""
type version_page_team_directus_users_1 {
  id: ID
  page_team_id: JSON
  directus_users_id: JSON
}

""""""
type version_page_team_directus_users_2 {
  id: ID
  page_team_id: JSON
  directus_users_id: JSON
}

""""""
type version_party_location {
  id: ID
  url: String
  address_line_1: String
  address_line_2: String
  logo: JSON
}

""""""
type version_party_tips {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  date: Date
  title_2: String
  title_1: String
  party_location: JSON
}

""""""
type version_post {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  date: Date
  title: String
  slug: String
  program: JSON
  imagebox: JSON
  content: JSON
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  audio_files: JSON
  tags: JSON
  editor_nodes: JSON
  authors: JSON
}

""""""
type version_post_directus_users {
  id: ID
  post_id: JSON
  directus_users_id: JSON
}

""""""
type version_post_editor_nodes {
  id: ID
  post_id: JSON
  item: String
  collection: String
}

""""""
type version_post_files {
  id: ID
  post_id: JSON
  directus_files_id: JSON
  sort: Int
}

""""""
type version_post_tags_1 {
  id: ID
  post_id: JSON
  tags_id: JSON
}

""""""
type version_programs {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  image: JSON
  content: JSON
  team: JSON
  posts: JSON
}

""""""
type version_programs_directus_users {
  id: ID
  programs_slug: JSON
  directus_users_id: JSON
}

""""""
type version_quote {
  id: ID
  text: String
  info: String
  author: String
}

""""""
type version_statements {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  text: String
  author: String
}

""""""
type version_tags {
  id: ID
  value: String
}

input audio_player_files_filter {
  id: number_filter_operators
  audio_player_id: audio_player_filter
  directus_files_id: directus_files_filter
  _and: [audio_player_files_filter]
  _or: [audio_player_files_filter]
}

input audio_player_filter {
  id: number_filter_operators
  files: audio_player_files_filter
  files_func: count_function_filter_operators
  _and: [audio_player_filter]
  _or: [audio_player_filter]
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input classes_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  date: date_filter_operators
  date_func: date_function_filter_operators
  time_start: date_filter_operators
  time_start_func: time_function_filter_operators
  time_end: date_filter_operators
  time_end_func: time_function_filter_operators
  location: string_filter_operators
  price: string_filter_operators
  teacher: string_filter_operators
  what_else: string_filter_operators
  email: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  _and: [classes_filter]
  _or: [classes_filter]
}

input contact_address_filter {
  id: number_filter_operators
  name: string_filter_operators
  phone_number: string_filter_operators
  email: string_filter_operators
  _and: [contact_address_filter]
  _or: [contact_address_filter]
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_audio_player_files_input {
  id: ID
  audio_player_id: create_audio_player_input
  directus_files_id: create_directus_files_input
}

input create_audio_player_input {
  id: ID
  files: [create_audio_player_files_input]
}

input create_classes_input {
  id: ID
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  title: String
  date: Date
  time_start: Date
  time_end: Date
  location: String
  price: String
  teacher: String
  what_else: String
  email: String
  content: JSON
}

input create_contact_address_input {
  id: ID
  name: String
  phone_number: String
  email: String
}

input create_directus_access_input {
  id: ID
  role: create_directus_roles_input
  user: create_directus_users_input
  policy: create_directus_policies_input
  sort: Int
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  created_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date

  """Automatically generated by the extension blurhasher"""
  blurhash: String
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_permissions_input {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: create_directus_policies_input
}

input create_directus_policies_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions: [create_directus_permissions_input]
  users: [create_directus_access_input]
  roles: [create_directus_access_input]
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  parent: create_directus_roles_input
  children: [create_directus_roles_input]
  policies: [create_directus_access_input]
  users: [create_directus_users_input]
}

input create_directus_sync_id_map_input {
  id: ID
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  programs: [create_programs_directus_users_input]
  policies: [create_directus_access_input]
}

input create_event_shows_input {
  id: ID
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  date: Date
  opening_time: Date
  starting_time: Date
  program: String
  place: String
  website: String
  content: JSON
  button_label: String
  button_url: String
  imagebox: create_image_box_input
}

input create_events_editor_nodes_input {
  id: ID
  events_id: create_events_input
  item: String
  collection: String
}

input create_events_event_shows_input {
  id: ID
  events_id: create_events_input
  event_shows_id: create_event_shows_input
  sort: GraphQLBigInt
}

input create_events_image_link_input {
  id: ID
  events_id: create_events_input
  image_link_id: create_image_link_input
  sort: GraphQLBigInt
}

input create_events_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  title: String

  """www.rabe.ch/events/slug"""
  slug: String
  content: JSON
  title_info: String
  title_image: create_directus_files_input
  color: String
  promo_title: String
  promo_text: String
  promo_button_label: String
  promo_button_url: String
  promo_status: String
  partner_title: String
  shows: [create_events_event_shows_input]
  editor_nodes: [create_events_editor_nodes_input]
  partner_logos: [create_events_image_link_input]
}

input create_iframe_input {
  id: ID
  code: String
}

input create_image_box_input {
  id: ID
  image: create_directus_files_input
  text: String
  title: String
}

input create_image_link_input {
  id: ID
  url: String
  image: create_directus_files_input
}

input create_info_box_input {
  id: ID
  title: String
  text: JSON
}

input create_internships_input {
  id: ID
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  program: String
  duration: String
  workload: String
  start: String
  deadline: Date
  email: String
  content: JSON
  title: String
}

input create_member_product_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  label: String
  price: Float
  name: String
}

input create_orders_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  status: String
  price: Float!
  name: String!
  token: String
  first_name: String!
  family_name: String!
  email: String!
  address: String!
  plz: String!
  city: String!
  phone_number: String
}

input create_page_classes_classes_input {
  id: ID
  page_classes_id: create_page_classes_input
  classes_id: create_classes_input
  sort: GraphQLBigInt
}

input create_page_classes_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [create_page_classes_nodes_input]
  classes: [create_page_classes_classes_input]
}

input create_page_classes_nodes_input {
  id: ID
  page_classes_id: create_page_classes_input
  item: String
  collection: String
}

input create_page_contact_contact_address_input {
  id: ID
  page_contact_id: create_page_contact_input
  contact_address_id: create_contact_address_input
}

input create_page_contact_image_link_input {
  id: ID
  page_contact_id: create_page_contact_input
  image_link_id: create_image_link_input
  sort: GraphQLBigInt
}

input create_page_contact_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  partner_logos: [create_page_contact_image_link_input]
  contact_addresses: [create_page_contact_contact_address_input]
}

input create_page_history_files_1_input {
  id: ID
  page_history_id: create_page_history_input
  directus_files_id: create_directus_files_input
}

input create_page_history_files_input {
  id: ID
  page_history_id: create_page_history_input
  directus_files_id: create_directus_files_input
}

input create_page_history_image_link_input {
  id: ID
  page_history_id: create_page_history_input
  image_link_id: create_image_link_input
  sort: GraphQLBigInt
}

input create_page_history_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  content: JSON
  vision: create_directus_files_input
  statutes: create_directus_files_input
  protocols: [create_page_history_files_1_input]
  editor_nodes: [create_page_history_nodes_input]
  logos: [create_page_history_files_input]
}

input create_page_history_nodes_input {
  id: ID
  page_history_id: create_page_history_input
  item: String
  collection: String
}

input create_page_internship_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  info_title: String
  info_text: JSON
  content: JSON
  editor_nodes: [create_page_internship_nodes_input]
  internships: [create_page_internship_internships_input]
}

input create_page_internship_internships_input {
  id: ID
  page_internship_id: create_page_internship_input
  internships_id: create_internships_input
  sort: GraphQLBigInt
}

input create_page_internship_nodes_input {
  id: ID
  page_internship_id: create_page_internship_input
  item: String
  collection: String
}

input create_page_join_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [create_page_join_nodes_input]
}

input create_page_join_nodes_input {
  id: ID
  page_join_id: create_page_join_input
  item: String
  collection: String
}

input create_page_member_input {
  id: ID
  content: JSON
}

input create_page_member_statements_input {
  id: ID
  page_member_id: create_page_member_input
  statements_id: create_statements_input
}

input create_page_program_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_1: [create_page_program_programs_2_input]
  programs_group_2: [create_page_program_programs_1_input]
  programs_group_3: [create_page_program_programs_3_input]
}

input create_page_program_programs_1_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_program_programs_2_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_program_programs_3_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_program_programs_input {
  id: ID
  page_program_id: create_page_program_input
  programs_slug: create_programs_input
}

input create_page_receive_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [create_page_receive_nodes_input]
}

input create_page_receive_nodes_input {
  id: ID
  page_receive_id: create_page_receive_input
  item: String
  collection: String
}

input create_page_team_directus_users_1_input {
  id: ID
  page_team_id: create_page_team_input
  directus_users_id: create_directus_users_input
}

input create_page_team_directus_users_2_input {
  id: ID
  page_team_id: create_page_team_input
  directus_users_id: create_directus_users_input
}

input create_page_team_directus_users_input {
  id: ID
  page_team_id: create_page_team_input
  directus_users_id: create_directus_users_input
}

input create_page_team_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  text: String
  members_program: [create_page_team_directus_users_2_input]
  members_management: [create_page_team_directus_users_1_input]
  members_staff: [create_page_team_directus_users_input]
}

input create_party_location_input {
  id: ID
  url: String
  address_line_1: String
  address_line_2: String
  logo: create_directus_files_input
}

input create_party_tips_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  date: Date
  title_2: String
  title_1: String
  party_location: create_party_location_input
}

input create_post_directus_users_input {
  id: ID
  post_id: create_post_input
  directus_users_id: create_directus_users_input
}

input create_post_editor_nodes_input {
  id: ID
  post_id: create_post_input
  item: String
  collection: String
}

input create_post_files_input {
  id: ID
  post_id: create_post_input
  directus_files_id: create_directus_files_input
  sort: Int
}

input create_post_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  date: Date!
  title: String!
  slug: String!
  program: create_programs_input
  imagebox: create_image_box_input
  content: JSON!
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  audio_files: [create_post_files_input]
  tags: [create_post_tags_1_input]
  editor_nodes: [create_post_editor_nodes_input]
  authors: [create_post_directus_users_input]
}

input create_post_tags_1_input {
  id: ID
  post_id: create_post_input
  tags_id: create_tags_input
}

input create_programs_directus_users_input {
  id: ID
  programs_slug: create_programs_input
  directus_users_id: create_directus_users_input
}

input create_programs_input {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID!
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  image: create_directus_files_input
  content: JSON
  team: [create_programs_directus_users_input]
  posts: [create_post_input]
}

input create_quote_input {
  id: ID
  text: String
  info: String
  author: String
}

input create_statements_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  text: String
  author: String
}

input create_tags_input {
  id: ID
  value: String
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input date_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_access_filter {
  id: string_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  created_on: date_filter_operators
  created_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  blurhash: string_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_permissions_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
}

input directus_policies_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  permissions: directus_permissions_filter
  permissions_func: count_function_filter_operators
  users: directus_access_filter
  users_func: count_function_filter_operators
  roles: directus_access_filter
  roles_func: count_function_filter_operators
  _and: [directus_policies_filter]
  _or: [directus_policies_filter]
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_filter
  children_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_sync_id_map_filter {
  id: number_filter_operators
  table: string_filter_operators
  sync_id: string_filter_operators
  local_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  _and: [directus_sync_id_map_filter]
  _or: [directus_sync_id_map_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  programs: programs_directus_users_filter
  programs_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input event_shows_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  date: date_filter_operators
  date_func: date_function_filter_operators
  opening_time: date_filter_operators
  opening_time_func: time_function_filter_operators
  starting_time: date_filter_operators
  starting_time_func: time_function_filter_operators
  program: string_filter_operators
  place: string_filter_operators
  website: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  button_label: string_filter_operators
  button_url: string_filter_operators
  imagebox: image_box_filter
  _and: [event_shows_filter]
  _or: [event_shows_filter]
}

input events_editor_nodes_filter {
  id: string_filter_operators
  events_id: events_filter
  collection: string_filter_operators
  _and: [events_editor_nodes_filter]
  _or: [events_editor_nodes_filter]
  item__iframe: iframe_filter
}

input events_event_shows_filter {
  id: number_filter_operators
  events_id: events_filter
  event_shows_id: event_shows_filter
  sort: big_int_filter_operators
  _and: [events_event_shows_filter]
  _or: [events_event_shows_filter]
}

input events_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  slug: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  title_info: string_filter_operators
  title_image: directus_files_filter
  color: string_filter_operators
  promo_title: string_filter_operators
  promo_text: string_filter_operators
  promo_button_label: string_filter_operators
  promo_button_url: string_filter_operators
  promo_status: string_filter_operators
  partner_title: string_filter_operators
  shows: events_event_shows_filter
  shows_func: count_function_filter_operators
  editor_nodes: events_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  partner_logos: events_image_link_filter
  partner_logos_func: count_function_filter_operators
  _and: [events_filter]
  _or: [events_filter]
}

input events_image_link_filter {
  id: number_filter_operators
  events_id: events_filter
  image_link_id: image_link_filter
  sort: big_int_filter_operators
  _and: [events_image_link_filter]
  _or: [events_image_link_filter]
}

input geometry_filter_operators {
  _eq: GraphQLGeoJSON
  _neq: GraphQLGeoJSON
  _intersects: GraphQLGeoJSON
  _nintersects: GraphQLGeoJSON
  _intersects_bbox: GraphQLGeoJSON
  _nintersects_bbox: GraphQLGeoJSON
  _null: Boolean
  _nnull: Boolean
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input iframe_filter {
  id: number_filter_operators
  code: string_filter_operators
  _and: [iframe_filter]
  _or: [iframe_filter]
}

input image_box_filter {
  id: number_filter_operators
  image: directus_files_filter
  text: string_filter_operators
  title: string_filter_operators
  _and: [image_box_filter]
  _or: [image_box_filter]
}

input image_link_filter {
  id: number_filter_operators
  url: string_filter_operators
  image: directus_files_filter
  _and: [image_link_filter]
  _or: [image_link_filter]
}

input info_box_filter {
  id: number_filter_operators
  title: string_filter_operators
  text: string_filter_operators
  text_func: count_function_filter_operators
  _and: [info_box_filter]
  _or: [info_box_filter]
}

input internships_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  program: string_filter_operators
  duration: string_filter_operators
  workload: string_filter_operators
  start: string_filter_operators
  deadline: date_filter_operators
  deadline_func: date_function_filter_operators
  email: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  title: string_filter_operators
  _and: [internships_filter]
  _or: [internships_filter]
}

input member_product_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  label: string_filter_operators
  price: number_filter_operators
  name: string_filter_operators
  _and: [member_product_filter]
  _or: [member_product_filter]
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input orders_filter {
  id: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  status: string_filter_operators
  price: number_filter_operators
  name: string_filter_operators
  token: string_filter_operators
  first_name: string_filter_operators
  family_name: string_filter_operators
  email: string_filter_operators
  address: string_filter_operators
  plz: string_filter_operators
  city: string_filter_operators
  phone_number: string_filter_operators
  _and: [orders_filter]
  _or: [orders_filter]
}

input page_classes_classes_filter {
  id: number_filter_operators
  page_classes_id: page_classes_filter
  classes_id: classes_filter
  sort: big_int_filter_operators
  _and: [page_classes_classes_filter]
  _or: [page_classes_classes_filter]
}

input page_classes_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_classes_nodes_filter
  editor_nodes_func: count_function_filter_operators
  classes: page_classes_classes_filter
  classes_func: count_function_filter_operators
  _and: [page_classes_filter]
  _or: [page_classes_filter]
}

input page_classes_nodes_filter {
  id: string_filter_operators
  page_classes_id: page_classes_filter
  collection: string_filter_operators
  _and: [page_classes_nodes_filter]
  _or: [page_classes_nodes_filter]
  item__image_box: image_box_filter
}

input page_contact_contact_address_filter {
  id: number_filter_operators
  page_contact_id: page_contact_filter
  contact_address_id: contact_address_filter
  _and: [page_contact_contact_address_filter]
  _or: [page_contact_contact_address_filter]
}

input page_contact_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  street: string_filter_operators
  street_number: string_filter_operators
  plz: string_filter_operators
  city: string_filter_operators
  phone_number: string_filter_operators
  email: string_filter_operators
  studio_phone_number: string_filter_operators
  studio_email: string_filter_operators
  ombuds_name: string_filter_operators
  ombuds_street: string_filter_operators
  ombuds_street_number: string_filter_operators
  ombuds_plz: string_filter_operators
  ombuds_city: string_filter_operators
  ombuds_name_2: string_filter_operators
  ombuds_street_2: string_filter_operators
  ombuds_street_number_2: string_filter_operators
  ombuds_plz_2: string_filter_operators
  ombuds_city_2: string_filter_operators
  ombuds_postfach: string_filter_operators
  ombuds_postfach_2: string_filter_operators
  location: geometry_filter_operators
  partner_logos: page_contact_image_link_filter
  partner_logos_func: count_function_filter_operators
  contact_addresses: page_contact_contact_address_filter
  contact_addresses_func: count_function_filter_operators
  _and: [page_contact_filter]
  _or: [page_contact_filter]
}

input page_contact_image_link_filter {
  id: number_filter_operators
  page_contact_id: page_contact_filter
  image_link_id: image_link_filter
  sort: big_int_filter_operators
  _and: [page_contact_image_link_filter]
  _or: [page_contact_image_link_filter]
}

input page_history_files_1_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  directus_files_id: directus_files_filter
  _and: [page_history_files_1_filter]
  _or: [page_history_files_1_filter]
}

input page_history_files_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  directus_files_id: directus_files_filter
  _and: [page_history_files_filter]
  _or: [page_history_files_filter]
}

input page_history_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  vision: directus_files_filter
  statutes: directus_files_filter
  protocols: page_history_files_1_filter
  protocols_func: count_function_filter_operators
  editor_nodes: page_history_nodes_filter
  editor_nodes_func: count_function_filter_operators
  logos: page_history_files_filter
  logos_func: count_function_filter_operators
  _and: [page_history_filter]
  _or: [page_history_filter]
}

input page_history_image_link_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  image_link_id: image_link_filter
  sort: big_int_filter_operators
  _and: [page_history_image_link_filter]
  _or: [page_history_image_link_filter]
}

input page_history_nodes_filter {
  id: string_filter_operators
  page_history_id: page_history_filter
  collection: string_filter_operators
  _and: [page_history_nodes_filter]
  _or: [page_history_nodes_filter]
  item__image_box: image_box_filter
}

input page_internship_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  info_title: string_filter_operators
  info_text: string_filter_operators
  info_text_func: count_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_internship_nodes_filter
  editor_nodes_func: count_function_filter_operators
  internships: page_internship_internships_filter
  internships_func: count_function_filter_operators
  _and: [page_internship_filter]
  _or: [page_internship_filter]
}

input page_internship_internships_filter {
  id: number_filter_operators
  page_internship_id: page_internship_filter
  internships_id: internships_filter
  sort: big_int_filter_operators
  _and: [page_internship_internships_filter]
  _or: [page_internship_internships_filter]
}

input page_internship_nodes_filter {
  id: string_filter_operators
  page_internship_id: page_internship_filter
  collection: string_filter_operators
  _and: [page_internship_nodes_filter]
  _or: [page_internship_nodes_filter]
  item__image_box: image_box_filter
}

input page_join_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_join_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [page_join_filter]
  _or: [page_join_filter]
}

input page_join_nodes_filter {
  id: string_filter_operators
  page_join_id: page_join_filter
  collection: string_filter_operators
  _and: [page_join_nodes_filter]
  _or: [page_join_nodes_filter]
  item__info_box: info_box_filter
  item__audio_player: audio_player_filter
}

input page_member_filter {
  id: number_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  _and: [page_member_filter]
  _or: [page_member_filter]
}

input page_member_statements_filter {
  id: number_filter_operators
  page_member_id: page_member_filter
  statements_id: statements_filter
  _and: [page_member_statements_filter]
  _or: [page_member_statements_filter]
}

input page_program_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  programs_group_1_title: string_filter_operators
  programs_group_2_title: string_filter_operators
  programs_group_3_title: string_filter_operators
  programs_group_1: page_program_programs_2_filter
  programs_group_1_func: count_function_filter_operators
  programs_group_2: page_program_programs_1_filter
  programs_group_2_func: count_function_filter_operators
  programs_group_3: page_program_programs_3_filter
  programs_group_3_func: count_function_filter_operators
  _and: [page_program_filter]
  _or: [page_program_filter]
}

input page_program_programs_1_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_1_filter]
  _or: [page_program_programs_1_filter]
}

input page_program_programs_2_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_2_filter]
  _or: [page_program_programs_2_filter]
}

input page_program_programs_3_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_3_filter]
  _or: [page_program_programs_3_filter]
}

input page_program_programs_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_filter]
  _or: [page_program_programs_filter]
}

input page_receive_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_receive_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [page_receive_filter]
  _or: [page_receive_filter]
}

input page_receive_nodes_filter {
  id: string_filter_operators
  page_receive_id: page_receive_filter
  collection: string_filter_operators
  _and: [page_receive_nodes_filter]
  _or: [page_receive_nodes_filter]
  item__info_box: info_box_filter
}

input page_team_directus_users_1_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_1_filter]
  _or: [page_team_directus_users_1_filter]
}

input page_team_directus_users_2_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_2_filter]
  _or: [page_team_directus_users_2_filter]
}

input page_team_directus_users_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_filter]
  _or: [page_team_directus_users_filter]
}

input page_team_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  text: string_filter_operators
  members_program: page_team_directus_users_2_filter
  members_program_func: count_function_filter_operators
  members_management: page_team_directus_users_1_filter
  members_management_func: count_function_filter_operators
  members_staff: page_team_directus_users_filter
  members_staff_func: count_function_filter_operators
  _and: [page_team_filter]
  _or: [page_team_filter]
}

input party_location_filter {
  id: number_filter_operators
  url: string_filter_operators
  address_line_1: string_filter_operators
  address_line_2: string_filter_operators
  logo: directus_files_filter
  _and: [party_location_filter]
  _or: [party_location_filter]
}

input party_tips_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  date: date_filter_operators
  date_func: datetime_function_filter_operators
  title_2: string_filter_operators
  title_1: string_filter_operators
  party_location: party_location_filter
  _and: [party_tips_filter]
  _or: [party_tips_filter]
}

input post_directus_users_filter {
  id: number_filter_operators
  post_id: post_filter
  directus_users_id: directus_users_filter
  _and: [post_directus_users_filter]
  _or: [post_directus_users_filter]
}

input post_editor_nodes_filter {
  id: string_filter_operators
  post_id: post_filter
  collection: string_filter_operators
  _and: [post_editor_nodes_filter]
  _or: [post_editor_nodes_filter]
  item__info_box: info_box_filter
  item__quote: quote_filter
}

input post_files_filter {
  id: number_filter_operators
  post_id: post_filter
  directus_files_id: directus_files_filter
  sort: number_filter_operators
  _and: [post_files_filter]
  _or: [post_files_filter]
}

input post_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  date: date_filter_operators
  date_func: datetime_function_filter_operators
  title: string_filter_operators
  slug: string_filter_operators
  program: programs_filter
  imagebox: image_box_filter
  content: string_filter_operators
  content_func: count_function_filter_operators
  preview_full_image: boolean_filter_operators
  short_description: string_filter_operators
  audio_files: post_files_filter
  audio_files_func: count_function_filter_operators
  tags: post_tags_1_filter
  tags_func: count_function_filter_operators
  editor_nodes: post_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  authors: post_directus_users_filter
  authors_func: count_function_filter_operators
  _and: [post_filter]
  _or: [post_filter]
}

input post_tags_1_filter {
  id: number_filter_operators
  post_id: post_filter
  tags_id: tags_filter
  _and: [post_tags_1_filter]
  _or: [post_tags_1_filter]
}

input programs_directus_users_filter {
  id: number_filter_operators
  programs_slug: programs_filter
  directus_users_id: directus_users_filter
  _and: [programs_directus_users_filter]
  _or: [programs_directus_users_filter]
}

input programs_filter {
  slug: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  image: directus_files_filter
  content: string_filter_operators
  content_func: count_function_filter_operators
  team: programs_directus_users_filter
  team_func: count_function_filter_operators
  posts: post_filter
  posts_func: count_function_filter_operators
  _and: [programs_filter]
  _or: [programs_filter]
}

input quote_filter {
  id: number_filter_operators
  text: string_filter_operators
  info: string_filter_operators
  author: string_filter_operators
  _and: [quote_filter]
  _or: [quote_filter]
}

input statements_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  text: string_filter_operators
  author: string_filter_operators
  _and: [statements_filter]
  _or: [statements_filter]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input tags_filter {
  id: number_filter_operators
  value: string_filter_operators
  _and: [tags_filter]
  _or: [tags_filter]
}

input time_function_filter_operators {
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input update_audio_player_files_input {
  id: ID
  audio_player_id: update_audio_player_input
  directus_files_id: update_directus_files_input
}

input update_audio_player_input {
  id: ID
  files: [update_audio_player_files_input]
}

input update_classes_input {
  id: ID
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  date: Date
  time_start: Date
  time_end: Date
  location: String
  price: String
  teacher: String
  what_else: String
  email: String
  content: JSON
}

input update_config_input {
  id: ID
  front_end_url: String
}

input update_contact_address_input {
  id: ID
  name: String
  phone_number: String
  email: String
}

input update_directus_access_input {
  id: ID
  role: update_directus_roles_input
  user: update_directus_users_input
  policy: update_directus_policies_input
  sort: Int
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  created_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date

  """Automatically generated by the extension blurhasher"""
  blurhash: String
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_permissions_input {
  id: ID
  collection: String
  action: String
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: update_directus_policies_input
}

input update_directus_policies_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  permissions: [update_directus_permissions_input]
  users: [update_directus_access_input]
  roles: [update_directus_access_input]
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  parent: update_directus_roles_input
  children: [update_directus_roles_input]
  policies: [update_directus_access_input]
  users: [update_directus_users_input]
}

input update_directus_sync_id_map_input {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  programs: [update_programs_directus_users_input]
  policies: [update_directus_access_input]
}

input update_event_shows_input {
  id: ID
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  date: Date
  opening_time: Date
  starting_time: Date
  program: String
  place: String
  website: String
  content: JSON
  button_label: String
  button_url: String
  imagebox: update_image_box_input
}

input update_events_editor_nodes_input {
  id: ID
  events_id: update_events_input
  item: String
  collection: String
}

input update_events_event_shows_input {
  id: ID
  events_id: update_events_input
  event_shows_id: update_event_shows_input
  sort: GraphQLBigInt
}

input update_events_image_link_input {
  id: ID
  events_id: update_events_input
  image_link_id: update_image_link_input
  sort: GraphQLBigInt
}

input update_events_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String

  """www.rabe.ch/events/slug"""
  slug: String
  content: JSON
  title_info: String
  title_image: update_directus_files_input
  color: String
  promo_title: String
  promo_text: String
  promo_button_label: String
  promo_button_url: String
  promo_status: String
  partner_title: String
  shows: [update_events_event_shows_input]
  editor_nodes: [update_events_editor_nodes_input]
  partner_logos: [update_events_image_link_input]
}

input update_iframe_input {
  id: ID
  code: String
}

input update_image_box_input {
  id: ID
  image: update_directus_files_input
  text: String
  title: String
}

input update_image_link_input {
  id: ID
  url: String
  image: update_directus_files_input
}

input update_info_box_input {
  id: ID
  title: String
  text: JSON
}

input update_internships_input {
  id: ID
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  program: String
  duration: String
  workload: String
  start: String
  deadline: Date
  email: String
  content: JSON
  title: String
}

input update_member_product_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  label: String
  price: Float
  name: String
}

input update_orders_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  status: String
  price: Float
  name: String
  token: String
  first_name: String
  family_name: String
  email: String
  address: String
  plz: String
  city: String
  phone_number: String
}

input update_page_agb_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
}

input update_page_classes_classes_input {
  id: ID
  page_classes_id: update_page_classes_input
  classes_id: update_classes_input
  sort: GraphQLBigInt
}

input update_page_classes_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [update_page_classes_nodes_input]
  classes: [update_page_classes_classes_input]
}

input update_page_classes_nodes_input {
  id: ID
  page_classes_id: update_page_classes_input
  item: String
  collection: String
}

input update_page_contact_contact_address_input {
  id: ID
  page_contact_id: update_page_contact_input
  contact_address_id: update_contact_address_input
}

input update_page_contact_image_link_input {
  id: ID
  page_contact_id: update_page_contact_input
  image_link_id: update_image_link_input
  sort: GraphQLBigInt
}

input update_page_contact_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  partner_logos: [update_page_contact_image_link_input]
  contact_addresses: [update_page_contact_contact_address_input]
}

input update_page_history_files_1_input {
  id: ID
  page_history_id: update_page_history_input
  directus_files_id: update_directus_files_input
}

input update_page_history_files_input {
  id: ID
  page_history_id: update_page_history_input
  directus_files_id: update_directus_files_input
}

input update_page_history_image_link_input {
  id: ID
  page_history_id: update_page_history_input
  image_link_id: update_image_link_input
  sort: GraphQLBigInt
}

input update_page_history_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
  vision: update_directus_files_input
  statutes: update_directus_files_input
  protocols: [update_page_history_files_1_input]
  editor_nodes: [update_page_history_nodes_input]
  logos: [update_page_history_files_input]
}

input update_page_history_nodes_input {
  id: ID
  page_history_id: update_page_history_input
  item: String
  collection: String
}

input update_page_impressum_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
}

input update_page_internship_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  info_title: String
  info_text: JSON
  content: JSON
  editor_nodes: [update_page_internship_nodes_input]
  internships: [update_page_internship_internships_input]
}

input update_page_internship_internships_input {
  id: ID
  page_internship_id: update_page_internship_input
  internships_id: update_internships_input
  sort: GraphQLBigInt
}

input update_page_internship_nodes_input {
  id: ID
  page_internship_id: update_page_internship_input
  item: String
  collection: String
}

input update_page_join_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [update_page_join_nodes_input]
}

input update_page_join_nodes_input {
  id: ID
  page_join_id: update_page_join_input
  item: String
  collection: String
}

input update_page_member_input {
  id: ID
  content: JSON
}

input update_page_member_statements_input {
  id: ID
  page_member_id: update_page_member_input
  statements_id: update_statements_input
}

input update_page_program_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_1: [update_page_program_programs_2_input]
  programs_group_2: [update_page_program_programs_1_input]
  programs_group_3: [update_page_program_programs_3_input]
}

input update_page_program_programs_1_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_program_programs_2_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_program_programs_3_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_program_programs_input {
  id: ID
  page_program_id: update_page_program_input
  programs_slug: update_programs_input
}

input update_page_programs_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  text: String
}

input update_page_receive_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  content: JSON
  editor_nodes: [update_page_receive_nodes_input]
}

input update_page_receive_nodes_input {
  id: ID
  page_receive_id: update_page_receive_input
  item: String
  collection: String
}

input update_page_team_directus_users_1_input {
  id: ID
  page_team_id: update_page_team_input
  directus_users_id: update_directus_users_input
}

input update_page_team_directus_users_2_input {
  id: ID
  page_team_id: update_page_team_input
  directus_users_id: update_directus_users_input
}

input update_page_team_directus_users_input {
  id: ID
  page_team_id: update_page_team_input
  directus_users_id: update_directus_users_input
}

input update_page_team_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  text: String
  members_program: [update_page_team_directus_users_2_input]
  members_management: [update_page_team_directus_users_1_input]
  members_staff: [update_page_team_directus_users_input]
}

input update_party_location_input {
  id: ID
  url: String
  address_line_1: String
  address_line_2: String
  logo: update_directus_files_input
}

input update_party_tips_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  date: Date
  title_2: String
  title_1: String
  party_location: update_party_location_input
}

input update_post_directus_users_input {
  id: ID
  post_id: update_post_input
  directus_users_id: update_directus_users_input
}

input update_post_editor_nodes_input {
  id: ID
  post_id: update_post_input
  item: String
  collection: String
}

input update_post_files_input {
  id: ID
  post_id: update_post_input
  directus_files_id: update_directus_files_input
  sort: Int
}

input update_post_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  date: Date
  title: String
  slug: String
  program: update_programs_input
  imagebox: update_image_box_input
  content: JSON
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  audio_files: [update_post_files_input]
  tags: [update_post_tags_1_input]
  editor_nodes: [update_post_editor_nodes_input]
  authors: [update_post_directus_users_input]
}

input update_post_tags_1_input {
  id: ID
  post_id: update_post_input
  tags_id: update_tags_input
}

input update_programs_directus_users_input {
  id: ID
  programs_slug: update_programs_input
  directus_users_id: update_directus_users_input
}

input update_programs_input {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  image: update_directus_files_input
  content: JSON
  team: [update_programs_directus_users_input]
  posts: [update_post_input]
}

input update_quote_input {
  id: ID
  text: String
  info: String
  author: String
}

input update_statements_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  text: String
  author: String
}

input update_tags_input {
  id: ID
  value: String
}