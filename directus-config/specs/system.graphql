type Query {
  server_specs_oas: JSON
  server_specs_graphql(scope: graphql_sdl_scope): String
  server_ping: String
  server_info: server_info
  server_health: JSON
  collections: [directus_collections!]!
  collections_by_name(name: String!): directus_collections
  fields: [directus_fields!]!
  fields_in_collection(collection: String!): [directus_fields!]!
  fields_by_name(collection: String!, field: String!): directus_fields
  relations: [directus_relations!]!
  relations_in_collection(collection: String!): [directus_relations!]!
  relations_by_name(collection: String!, field: String!): directus_relations
  extensions: [directus_extensions!]!
  users_me: directus_users
  permissions_me: permissions_me_type
  roles_me: [directus_roles]
  policies_me_globals: policy_me_globals_type
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_activity!]!
  activity_by_id(id: ID!, version: String): directus_activity
  activity_aggregated(groupBy: [String], filter: directus_activity_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_activity_aggregated!]!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions!]!
  permissions_by_id(id: ID!, version: String): directus_permissions
  permissions_aggregated(groupBy: [String], filter: directus_permissions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_permissions_aggregated!]!
  folders(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_folders!]!
  folders_by_id(id: ID!, version: String): directus_folders
  folders_aggregated(groupBy: [String], filter: directus_folders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_folders_aggregated!]!
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users!]!
  users_by_id(id: ID!, version: String): directus_users
  users_aggregated(groupBy: [String], filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_users_aggregated!]!
  roles(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles!]!
  roles_by_id(id: ID!, version: String): directus_roles
  roles_aggregated(groupBy: [String], filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_roles_aggregated!]!
  presets(filter: directus_presets_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_presets!]!
  presets_by_id(id: ID!, version: String): directus_presets
  presets_aggregated(groupBy: [String], filter: directus_presets_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_presets_aggregated!]!
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions!]!
  revisions_by_id(id: ID!, version: String): directus_revisions
  revisions_aggregated(groupBy: [String], filter: directus_revisions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_revisions_aggregated!]!
  webhooks(filter: directus_webhooks_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_webhooks!]!
  webhooks_by_id(id: ID!, version: String): directus_webhooks
  webhooks_aggregated(groupBy: [String], filter: directus_webhooks_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_webhooks_aggregated!]!
  settings(version: String): directus_settings
  notifications(filter: directus_notifications_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_notifications!]!
  notifications_by_id(id: ID!, version: String): directus_notifications
  notifications_aggregated(groupBy: [String], filter: directus_notifications_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_notifications_aggregated!]!
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels!]!
  panels_by_id(id: ID!, version: String): directus_panels
  panels_aggregated(groupBy: [String], filter: directus_panels_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_panels_aggregated!]!
  shares(filter: directus_shares_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_shares!]!
  shares_by_id(id: ID!, version: String): directus_shares
  shares_aggregated(groupBy: [String], filter: directus_shares_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_shares_aggregated!]!
  flows(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_flows!]!
  flows_by_id(id: ID!, version: String): directus_flows
  flows_aggregated(groupBy: [String], filter: directus_flows_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_flows_aggregated!]!
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations!]!
  operations_by_id(id: ID!, version: String): directus_operations
  operations_aggregated(groupBy: [String], filter: directus_operations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_operations_aggregated!]!
  dashboards(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_dashboards!]!
  dashboards_by_id(id: ID!, version: String): directus_dashboards
  dashboards_aggregated(groupBy: [String], filter: directus_dashboards_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_dashboards_aggregated!]!
  translations(filter: directus_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_translations!]!
  translations_by_id(id: ID!, version: String): directus_translations
  translations_aggregated(groupBy: [String], filter: directus_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_translations_aggregated!]!
  policies(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_policies!]!
  policies_by_id(id: ID!, version: String): directus_policies
  policies_aggregated(groupBy: [String], filter: directus_policies_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_policies_aggregated!]!
  access(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access!]!
  access_by_id(id: ID!, version: String): directus_access
  access_aggregated(groupBy: [String], filter: directus_access_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_access_aggregated!]!
  comments(filter: directus_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_comments!]!
  comments_by_id(id: ID!, version: String): directus_comments
  comments_aggregated(groupBy: [String], filter: directus_comments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_comments_aggregated!]!
  versions(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_versions!]!
  versions_by_id(id: ID!, version: String): directus_versions
  versions_aggregated(groupBy: [String], filter: directus_versions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_versions_aggregated!]!
  files(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_files!]!
  files_by_id(id: ID!, version: String): directus_files
  files_aggregated(groupBy: [String], filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_files_aggregated!]!
}

type Mutation {
  auth_login(email: String!, password: String!, mode: auth_mode, otp: String): auth_tokens
  auth_refresh(refresh_token: String, mode: auth_mode): auth_tokens
  auth_logout(refresh_token: String, mode: auth_mode): Boolean
  auth_password_request(email: String!, reset_url: String): Boolean
  auth_password_reset(token: String!, password: String!): Boolean
  users_me_tfa_generate(password: String!): users_me_tfa_generate_data
  users_me_tfa_enable(otp: String!, secret: String!): Boolean
  users_me_tfa_disable(otp: String!): Boolean
  utils_random_string(length: Int): String
  utils_hash_generate(string: String!): String
  utils_hash_verify(string: String!, hash: String!): Boolean
  utils_sort(collection: String!, item: ID!, to: ID!): Boolean
  utils_revert(revision: ID!): Boolean
  utils_cache_clear: Void
  users_invite_accept(token: String!, password: String!): Boolean
  users_register(email: String!, password: String!, verification_url: String, first_name: String, last_name: String): Boolean
  users_register_verify(token: String!): Boolean
  create_collections_item(data: create_directus_collections_input!): directus_collections
  update_collections_item(collection: String!, data: update_directus_collections_input!): directus_collections
  delete_collections_item(collection: String!): delete_collection
  create_fields_item(collection: String!, data: create_directus_fields_input!): directus_fields
  update_fields_item(collection: String!, field: String!, data: update_directus_fields_input!): directus_fields
  delete_fields_item(collection: String!, field: String!): delete_field
  create_relations_item(data: create_directus_relations_input!): directus_relations
  update_relations_item(collection: String!, field: String!, data: update_directus_relations_input!): directus_relations
  delete_relations_item(collection: String!, field: String!): delete_relation
  update_extensions_item(id: ID, data: update_directus_extensions_inputInput): directus_extensions
  update_users_me(data: update_directus_users_input): directus_users
  create_comment(collection: String!, item: ID!, comment: String!): directus_activity
  update_comment(id: ID!, comment: String!): directus_activity
  delete_comment(id: ID!): delete_one
  import_file(url: String!, data: create_directus_files_input): directus_files
  users_invite(email: String!, role: String!, invite_url: String): Boolean
  create_permissions_items(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_permissions_input!]): [directus_permissions!]!
  create_permissions_item(data: create_directus_permissions_input!): directus_permissions
  create_folders_items(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_folders_input!]): [directus_folders!]!
  create_folders_item(data: create_directus_folders_input!): directus_folders
  create_users_items(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_users_input!]): [directus_users!]!
  create_users_item(data: create_directus_users_input!): directus_users
  create_roles_items(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_roles_input!]): [directus_roles!]!
  create_roles_item(data: create_directus_roles_input!): directus_roles
  create_presets_items(filter: directus_presets_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_presets_input!]): [directus_presets!]!
  create_presets_item(data: create_directus_presets_input!): directus_presets
  create_webhooks_items(filter: directus_webhooks_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_webhooks_input!]): [directus_webhooks!]!
  create_webhooks_item(data: create_directus_webhooks_input!): directus_webhooks
  create_notifications_items(filter: directus_notifications_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_notifications_input!]): [directus_notifications!]!
  create_notifications_item(data: create_directus_notifications_input!): directus_notifications
  create_panels_items(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_panels_input!]): [directus_panels!]!
  create_panels_item(data: create_directus_panels_input!): directus_panels
  create_shares_items(filter: directus_shares_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_shares_input!]): [directus_shares!]!
  create_shares_item(data: create_directus_shares_input!): directus_shares
  create_flows_items(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_flows_input!]): [directus_flows!]!
  create_flows_item(data: create_directus_flows_input!): directus_flows
  create_operations_items(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_operations_input!]): [directus_operations!]!
  create_operations_item(data: create_directus_operations_input!): directus_operations
  create_dashboards_items(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_dashboards_input!]): [directus_dashboards!]!
  create_dashboards_item(data: create_directus_dashboards_input!): directus_dashboards
  create_translations_items(filter: directus_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_translations_input!]): [directus_translations!]!
  create_translations_item(data: create_directus_translations_input!): directus_translations
  create_policies_items(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_policies_input!]): [directus_policies!]!
  create_policies_item(data: create_directus_policies_input!): directus_policies
  create_access_items(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_access_input!]): [directus_access!]!
  create_access_item(data: create_directus_access_input!): directus_access
  create_comments_items(filter: directus_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_comments_input!]): [directus_comments!]!
  create_comments_item(data: create_directus_comments_input!): directus_comments
  create_versions_items(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_versions_input!]): [directus_versions!]!
  create_versions_item(data: create_directus_versions_input!): directus_versions
  create_files_items(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_files_input!]): [directus_files!]!
  create_files_item(data: create_directus_files_input!): directus_files
  update_permissions_items(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_permissions_input!): [directus_permissions!]!
  update_permissions_batch(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_permissions_input!]): [directus_permissions!]!
  update_permissions_item(id: ID!, data: update_directus_permissions_input!): directus_permissions
  update_folders_items(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_folders_input!): [directus_folders!]!
  update_folders_batch(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_folders_input!]): [directus_folders!]!
  update_folders_item(id: ID!, data: update_directus_folders_input!): directus_folders
  update_users_items(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_users_input!): [directus_users!]!
  update_users_batch(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_users_input!]): [directus_users!]!
  update_users_item(id: ID!, data: update_directus_users_input!): directus_users
  update_roles_items(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_roles_input!): [directus_roles!]!
  update_roles_batch(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_roles_input!]): [directus_roles!]!
  update_roles_item(id: ID!, data: update_directus_roles_input!): directus_roles
  update_presets_items(filter: directus_presets_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_presets_input!): [directus_presets!]!
  update_presets_batch(filter: directus_presets_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_presets_input!]): [directus_presets!]!
  update_presets_item(id: ID!, data: update_directus_presets_input!): directus_presets
  update_webhooks_items(filter: directus_webhooks_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_webhooks_input!): [directus_webhooks!]!
  update_webhooks_batch(filter: directus_webhooks_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_webhooks_input!]): [directus_webhooks!]!
  update_webhooks_item(id: ID!, data: update_directus_webhooks_input!): directus_webhooks
  update_settings(data: update_directus_settings_input!): directus_settings
  update_notifications_items(filter: directus_notifications_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_notifications_input!): [directus_notifications!]!
  update_notifications_batch(filter: directus_notifications_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_notifications_input!]): [directus_notifications!]!
  update_notifications_item(id: ID!, data: update_directus_notifications_input!): directus_notifications
  update_panels_items(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_panels_input!): [directus_panels!]!
  update_panels_batch(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_panels_input!]): [directus_panels!]!
  update_panels_item(id: ID!, data: update_directus_panels_input!): directus_panels
  update_shares_items(filter: directus_shares_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_shares_input!): [directus_shares!]!
  update_shares_batch(filter: directus_shares_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_shares_input!]): [directus_shares!]!
  update_shares_item(id: ID!, data: update_directus_shares_input!): directus_shares
  update_flows_items(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_flows_input!): [directus_flows!]!
  update_flows_batch(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_flows_input!]): [directus_flows!]!
  update_flows_item(id: ID!, data: update_directus_flows_input!): directus_flows
  update_operations_items(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_operations_input!): [directus_operations!]!
  update_operations_batch(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_operations_input!]): [directus_operations!]!
  update_operations_item(id: ID!, data: update_directus_operations_input!): directus_operations
  update_dashboards_items(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_dashboards_input!): [directus_dashboards!]!
  update_dashboards_batch(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_dashboards_input!]): [directus_dashboards!]!
  update_dashboards_item(id: ID!, data: update_directus_dashboards_input!): directus_dashboards
  update_translations_items(filter: directus_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_translations_input!): [directus_translations!]!
  update_translations_batch(filter: directus_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_translations_input!]): [directus_translations!]!
  update_translations_item(id: ID!, data: update_directus_translations_input!): directus_translations
  update_policies_items(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_policies_input!): [directus_policies!]!
  update_policies_batch(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_policies_input!]): [directus_policies!]!
  update_policies_item(id: ID!, data: update_directus_policies_input!): directus_policies
  update_access_items(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_access_input!): [directus_access!]!
  update_access_batch(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_access_input!]): [directus_access!]!
  update_access_item(id: ID!, data: update_directus_access_input!): directus_access
  update_comments_items(filter: directus_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_comments_input!): [directus_comments!]!
  update_comments_batch(filter: directus_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_comments_input!]): [directus_comments!]!
  update_comments_item(id: ID!, data: update_directus_comments_input!): directus_comments
  update_versions_items(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_versions_input!): [directus_versions!]!
  update_versions_batch(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_versions_input!]): [directus_versions!]!
  update_versions_item(id: ID!, data: update_directus_versions_input!): directus_versions
  update_files_items(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_files_input!): [directus_files!]!
  update_files_batch(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_files_input!]): [directus_files!]!
  update_files_item(id: ID!, data: update_directus_files_input!): directus_files
  delete_permissions_items(ids: [ID]!): delete_many
  delete_permissions_item(id: ID!): delete_one
  delete_folders_items(ids: [ID]!): delete_many
  delete_folders_item(id: ID!): delete_one
  delete_users_items(ids: [ID]!): delete_many
  delete_users_item(id: ID!): delete_one
  delete_roles_items(ids: [ID]!): delete_many
  delete_roles_item(id: ID!): delete_one
  delete_presets_items(ids: [ID]!): delete_many
  delete_presets_item(id: ID!): delete_one
  delete_webhooks_items(ids: [ID]!): delete_many
  delete_webhooks_item(id: ID!): delete_one
  delete_notifications_items(ids: [ID]!): delete_many
  delete_notifications_item(id: ID!): delete_one
  delete_panels_items(ids: [ID]!): delete_many
  delete_panels_item(id: ID!): delete_one
  delete_shares_items(ids: [ID]!): delete_many
  delete_shares_item(id: ID!): delete_one
  delete_flows_items(ids: [ID]!): delete_many
  delete_flows_item(id: ID!): delete_one
  delete_operations_items(ids: [ID]!): delete_many
  delete_operations_item(id: ID!): delete_one
  delete_dashboards_items(ids: [ID]!): delete_many
  delete_dashboards_item(id: ID!): delete_one
  delete_translations_items(ids: [ID]!): delete_many
  delete_translations_item(id: ID!): delete_one
  delete_policies_items(ids: [ID]!): delete_many
  delete_policies_item(id: ID!): delete_one
  delete_access_items(ids: [ID]!): delete_many
  delete_access_item(id: ID!): delete_one
  delete_comments_items(ids: [ID]!): delete_many
  delete_comments_item(id: ID!): delete_one
  delete_versions_items(ids: [ID]!): delete_many
  delete_versions_item(id: ID!): delete_one
  delete_files_items(ids: [ID]!): delete_many
  delete_files_item(id: ID!): delete_one
}

type Subscription {
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  page_contact_contact_address_mutated(event: EventEnum): page_contact_contact_address_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  image_box_mutated(event: EventEnum): image_box_mutated
  party_location_mutated(event: EventEnum): party_location_mutated
  directus_policies_mutated(event: EventEnum): directus_policies_mutated
  page_member_statements_mutated(event: EventEnum): page_member_statements_mutated
  member_product_mutated(event: EventEnum): member_product_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_comments_mutated(event: EventEnum): directus_comments_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  config_mutated(event: EventEnum): config_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  programs_mutated(event: EventEnum): programs_mutated
  programs_directus_users_mutated(event: EventEnum): programs_directus_users_mutated
  page_contact_mutated(event: EventEnum): page_contact_mutated
  page_programs_mutated(event: EventEnum): page_programs_mutated
  page_agb_mutated(event: EventEnum): page_agb_mutated
  quote_mutated(event: EventEnum): quote_mutated
  info_box_mutated(event: EventEnum): info_box_mutated
  page_impressum_mutated(event: EventEnum): page_impressum_mutated
  page_team_mutated(event: EventEnum): page_team_mutated
  page_program_programs_3_mutated(event: EventEnum): page_program_programs_3_mutated
  page_team_directus_users_mutated(event: EventEnum): page_team_directus_users_mutated
  page_program_programs_mutated(event: EventEnum): page_program_programs_mutated
  page_team_directus_users_1_mutated(event: EventEnum): page_team_directus_users_1_mutated
  page_team_directus_users_2_mutated(event: EventEnum): page_team_directus_users_2_mutated
  page_program_programs_1_mutated(event: EventEnum): page_program_programs_1_mutated
  party_tips_mutated(event: EventEnum): party_tips_mutated
  page_program_programs_2_mutated(event: EventEnum): page_program_programs_2_mutated
  page_program_mutated(event: EventEnum): page_program_mutated
  page_receive_mutated(event: EventEnum): page_receive_mutated
  page_history_mutated(event: EventEnum): page_history_mutated
  page_member_mutated(event: EventEnum): page_member_mutated
  contact_address_mutated(event: EventEnum): contact_address_mutated
  page_receive_nodes_mutated(event: EventEnum): page_receive_nodes_mutated
  page_history_nodes_mutated(event: EventEnum): page_history_nodes_mutated
  orders_mutated(event: EventEnum): orders_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
  events_mutated(event: EventEnum): events_mutated
  statements_mutated(event: EventEnum): statements_mutated
  post_mutated(event: EventEnum): post_mutated
  iframe_mutated(event: EventEnum): iframe_mutated
  events_event_shows_mutated(event: EventEnum): events_event_shows_mutated
  post_directus_users_mutated(event: EventEnum): post_directus_users_mutated
  post_editor_nodes_mutated(event: EventEnum): post_editor_nodes_mutated
  event_shows_mutated(event: EventEnum): event_shows_mutated
  post_files_mutated(event: EventEnum): post_files_mutated
  events_editor_nodes_mutated(event: EventEnum): events_editor_nodes_mutated
  tags_mutated(event: EventEnum): tags_mutated
  post_tags_1_mutated(event: EventEnum): post_tags_1_mutated
  audio_player_files_mutated(event: EventEnum): audio_player_files_mutated
  audio_player_mutated(event: EventEnum): audio_player_mutated
  page_join_mutated(event: EventEnum): page_join_mutated
  page_join_nodes_mutated(event: EventEnum): page_join_nodes_mutated
  page_internship_nodes_mutated(event: EventEnum): page_internship_nodes_mutated
  internships_mutated(event: EventEnum): internships_mutated
  page_internship_internships_mutated(event: EventEnum): page_internship_internships_mutated
  page_internship_mutated(event: EventEnum): page_internship_mutated
  page_classes_mutated(event: EventEnum): page_classes_mutated
  page_classes_nodes_mutated(event: EventEnum): page_classes_nodes_mutated
  page_history_image_link_mutated(event: EventEnum): page_history_image_link_mutated
  classes_mutated(event: EventEnum): classes_mutated
  page_classes_classes_mutated(event: EventEnum): page_classes_classes_mutated
  page_home_mutated(event: EventEnum): page_home_mutated
  image_link_mutated(event: EventEnum): image_link_mutated
  promo_box_mutated(event: EventEnum): promo_box_mutated
  events_image_link_mutated(event: EventEnum): events_image_link_mutated
  page_contact_image_link_mutated(event: EventEnum): page_contact_image_link_mutated
  page_history_files_mutated(event: EventEnum): page_history_files_mutated
  page_history_files_1_mutated(event: EventEnum): page_history_files_1_mutated
  page_team_directus_users_3_mutated(event: EventEnum): page_team_directus_users_3_mutated
  page_team_directus_users_4_mutated(event: EventEnum): page_team_directus_users_4_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""GeoJSON value"""
scalar GraphQLGeoJSON

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

scalar permissions_me_type

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""Represents NULL values"""
scalar Void

enum auth_mode {
  json
  cookie
  session
}

enum EventEnum {
  create
  update
  delete
}

enum graphql_sdl_scope {
  items
  system
}

enum server_info_websocket_graphql_authentication {
  public
  handshake
  strict
}

enum server_info_websocket_rest_authentication {
  public
  handshake
  strict
}

union events_editor_nodes_item_union = iframe | image_box | quote | info_box | audio_player

union page_classes_nodes_item_union = image_box

union page_history_nodes_item_union = image_box

union page_internship_nodes_item_union = image_box

union page_join_nodes_item_union = info_box | audio_player

union page_receive_nodes_item_union = info_box

union post_editor_nodes_item_union = info_box | quote

type audio_player {
  id: ID!
  files(filter: audio_player_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [audio_player_files]
  files_func: count_functions
}

type audio_player_files {
  id: ID!
  audio_player_id(filter: audio_player_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): audio_player
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type audio_player_files_mutated {
  key: ID!
  event: EventEnum
  data: audio_player_files
}

type audio_player_mutated {
  key: ID!
  event: EventEnum
  data: audio_player
}

type auth_tokens {
  access_token: String
  expires: GraphQLBigInt
  refresh_token: String
}

type classes {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  date: Date
  date_func: date_functions
  time_start: Date
  time_start_func: time_functions
  time_end: Date
  time_end_func: time_functions
  location: String
  price: String
  teacher: String
  what_else: String
  email: String
  content: JSON
  content_func: count_functions
}

type classes_mutated {
  key: ID!
  event: EventEnum
  data: classes
}

type config {
  id: ID!
  front_end_url: String
}

type config_mutated {
  key: ID!
  event: EventEnum
  data: config
}

type contact_address {
  id: ID!
  name: String
  phone_number: String
  email: String
}

type contact_address_mutated {
  key: ID!
  event: EventEnum
  data: contact_address
}

type count_functions {
  count: Int
}

type date_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_collection {
  collection: String
}

type delete_field {
  collection: String
  field: String
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type delete_relation {
  collection: String
  field: String
}

type directus_access {
  id: ID!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
  sort: Int
}

type directus_access_aggregated {
  group: JSON
  countAll: Int
  count: directus_access_aggregated_count
  countDistinct: directus_access_aggregated_count
  avg: directus_access_aggregated_fields
  sum: directus_access_aggregated_fields
  avgDistinct: directus_access_aggregated_fields
  sumDistinct: directus_access_aggregated_fields
  min: directus_access_aggregated_fields
  max: directus_access_aggregated_fields
}

type directus_access_aggregated_count {
  id: Int
  role: Int
  user: Int
  policy: Int
  sort: Int
}

type directus_access_aggregated_fields {
  sort: Float
}

type directus_access_mutated {
  key: ID!
  event: EventEnum
  data: directus_access
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  comment: String
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_aggregated {
  group: JSON
  countAll: Int
  count: directus_activity_aggregated_count
  countDistinct: directus_activity_aggregated_count
  avg: directus_activity_aggregated_fields
  sum: directus_activity_aggregated_fields
  avgDistinct: directus_activity_aggregated_fields
  sumDistinct: directus_activity_aggregated_fields
  min: directus_activity_aggregated_fields
  max: directus_activity_aggregated_fields
}

type directus_activity_aggregated_count {
  id: Int
  action: Int
  user: Int
  timestamp: Int
  ip: Int
  user_agent: Int
  collection: Int
  item: Int
  comment: Int
  origin: Int
  revisions: Int
}

type directus_activity_aggregated_fields {
  id: Float
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_collections {
  collection: String
  meta: directus_collections_meta
  schema: directus_collections_schema
}

type directus_collections_meta {
  collection: String!
  icon: String
  note: String
  display_template: String
  hidden: Boolean!
  singleton: Boolean!
  translations: JSON
  archive_field: String
  archive_app_filter: Boolean!
  archive_value: String
  unarchive_value: String
  sort_field: String
  accountability: String
  color: String
  item_duplication_fields: JSON
  sort: Int
  group: String
  collapse: String!
  preview_url: String
  versioning: Boolean!
}

type directus_collections_schema {
  name: String
  comment: String
}

type directus_comments {
  id: ID!
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_comments_aggregated {
  group: JSON
  countAll: Int
  count: directus_comments_aggregated_count
  countDistinct: directus_comments_aggregated_count
}

type directus_comments_aggregated_count {
  id: Int
  collection: Int
  item: Int
  comment: Int
  date_created: Int
  date_updated: Int
  user_created: Int
  user_updated: Int
}

type directus_comments_mutated {
  key: ID!
  event: EventEnum
  data: directus_comments
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_aggregated {
  group: JSON
  countAll: Int
  count: directus_dashboards_aggregated_count
  countDistinct: directus_dashboards_aggregated_count
}

type directus_dashboards_aggregated_count {
  id: Int
  name: Int
  icon: Int
  note: Int
  date_created: Int
  user_created: Int
  color: Int
  panels: Int
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_extensions {
  bundle: String
  name: String!
  schema: directus_extensions_schema
  meta: directus_extensions_meta
}

type directus_extensions_meta {
  enabled: Boolean
}

type directus_extensions_schema {
  type: String
  local: Boolean
}

type directus_fields {
  collection: String
  field: String
  type: String
  meta: directus_fields_meta
  schema: directus_fields_schema
}

type directus_fields_meta {
  id: Int!
  collection: String!
  field: String!
  special: [String]
  interface: String
  options: JSON
  display: String
  display_options: JSON
  readonly: Boolean!
  hidden: Boolean!
  sort: Int
  width: String
  translations: JSON
  note: String
  conditions: JSON
  required: Boolean
  group: String
  validation: JSON
  validation_message: String
}

type directus_fields_schema {
  name: String
  table: String
  data_type: String
  default_value: String
  max_length: Int
  numeric_precision: Int
  numeric_scale: Int
  is_generated: Boolean
  generation_expression: String
  is_indexed: Boolean
  is_nullable: Boolean
  is_unique: Boolean
  is_primary_key: Boolean
  has_auto_increment: Boolean
  foreign_key_column: String
  foreign_key_table: String
  comment: String
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  created_on: Date
  created_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  uploaded_on: Date
  uploaded_on_func: datetime_functions

  """Automatically generated by the extension blurhasher"""
  blurhash: String
}

type directus_files_aggregated {
  group: JSON
  countAll: Int
  count: directus_files_aggregated_count
  countDistinct: directus_files_aggregated_count
  avg: directus_files_aggregated_fields
  sum: directus_files_aggregated_fields
  avgDistinct: directus_files_aggregated_fields
  sumDistinct: directus_files_aggregated_fields
  min: directus_files_aggregated_fields
  max: directus_files_aggregated_fields
}

type directus_files_aggregated_count {
  id: Int
  storage: Int
  filename_disk: Int
  filename_download: Int
  title: Int
  type: Int
  folder: Int
  uploaded_by: Int
  created_on: Int
  modified_by: Int
  modified_on: Int
  charset: Int
  filesize: Int
  width: Int
  height: Int
  duration: Int
  embed: Int
  description: Int
  location: Int
  tags: Int
  metadata: Int
  focal_point_x: Int
  focal_point_y: Int
  tus_id: Int
  tus_data: Int
  uploaded_on: Int

  """Automatically generated by the extension blurhasher"""
  blurhash: Int
}

type directus_files_aggregated_fields {
  filesize: Float
  width: Float
  height: Float
  duration: Float
  focal_point_x: Float
  focal_point_y: Float
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_aggregated {
  group: JSON
  countAll: Int
  count: directus_flows_aggregated_count
  countDistinct: directus_flows_aggregated_count
}

type directus_flows_aggregated_count {
  id: Int
  name: Int
  icon: Int
  color: Int
  description: Int
  status: Int
  trigger: Int
  accountability: Int
  options: Int
  operation: Int
  date_created: Int
  user_created: Int
  operations: Int
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_aggregated {
  group: JSON
  countAll: Int
  count: directus_folders_aggregated_count
  countDistinct: directus_folders_aggregated_count
}

type directus_folders_aggregated_count {
  id: Int
  name: Int
  parent: Int
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_aggregated {
  group: JSON
  countAll: Int
  count: directus_notifications_aggregated_count
  countDistinct: directus_notifications_aggregated_count
  avg: directus_notifications_aggregated_fields
  sum: directus_notifications_aggregated_fields
  avgDistinct: directus_notifications_aggregated_fields
  sumDistinct: directus_notifications_aggregated_fields
  min: directus_notifications_aggregated_fields
  max: directus_notifications_aggregated_fields
}

type directus_notifications_aggregated_count {
  id: Int
  timestamp: Int
  status: Int
  recipient: Int
  sender: Int
  subject: Int
  message: Int
  collection: Int
  item: Int
}

type directus_notifications_aggregated_fields {
  id: Float
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_aggregated {
  group: JSON
  countAll: Int
  count: directus_operations_aggregated_count
  countDistinct: directus_operations_aggregated_count
  avg: directus_operations_aggregated_fields
  sum: directus_operations_aggregated_fields
  avgDistinct: directus_operations_aggregated_fields
  sumDistinct: directus_operations_aggregated_fields
  min: directus_operations_aggregated_fields
  max: directus_operations_aggregated_fields
}

type directus_operations_aggregated_count {
  id: Int
  name: Int
  key: Int
  type: Int
  position_x: Int
  position_y: Int
  options: Int
  resolve: Int
  reject: Int
  flow: Int
  date_created: Int
  user_created: Int
}

type directus_operations_aggregated_fields {
  position_x: Float
  position_y: Float
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_aggregated {
  group: JSON
  countAll: Int
  count: directus_panels_aggregated_count
  countDistinct: directus_panels_aggregated_count
  avg: directus_panels_aggregated_fields
  sum: directus_panels_aggregated_fields
  avgDistinct: directus_panels_aggregated_fields
  sumDistinct: directus_panels_aggregated_fields
  min: directus_panels_aggregated_fields
  max: directus_panels_aggregated_fields
}

type directus_panels_aggregated_count {
  id: Int
  dashboard: Int
  name: Int
  icon: Int
  color: Int
  show_header: Int
  note: Int
  type: Int
  position_x: Int
  position_y: Int
  width: Int
  height: Int
  options: Int
  date_created: Int
  user_created: Int
}

type directus_panels_aggregated_fields {
  position_x: Float
  position_y: Float
  width: Float
  height: Float
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
}

type directus_permissions_aggregated {
  group: JSON
  countAll: Int
  count: directus_permissions_aggregated_count
  countDistinct: directus_permissions_aggregated_count
  avg: directus_permissions_aggregated_fields
  sum: directus_permissions_aggregated_fields
  avgDistinct: directus_permissions_aggregated_fields
  sumDistinct: directus_permissions_aggregated_fields
  min: directus_permissions_aggregated_fields
  max: directus_permissions_aggregated_fields
}

type directus_permissions_aggregated_count {
  id: Int
  collection: Int
  action: Int
  permissions: Int
  validation: Int
  presets: Int
  fields: Int
  policy: Int
}

type directus_permissions_aggregated_fields {
  id: Float
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_policies {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions]
  permissions_func: count_functions
  users(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  users_func: count_functions
  roles(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  roles_func: count_functions
}

type directus_policies_aggregated {
  group: JSON
  countAll: Int
  count: directus_policies_aggregated_count
  countDistinct: directus_policies_aggregated_count
}

type directus_policies_aggregated_count {
  id: Int
  name: Int
  icon: Int
  description: Int
  ip_access: Int

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Int
  admin_access: Int
  app_access: Int
  permissions: Int
  users: Int
  roles: Int
}

type directus_policies_mutated {
  key: ID!
  event: EventEnum
  data: directus_policies
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_aggregated {
  group: JSON
  countAll: Int
  count: directus_presets_aggregated_count
  countDistinct: directus_presets_aggregated_count
  avg: directus_presets_aggregated_fields
  sum: directus_presets_aggregated_fields
  avgDistinct: directus_presets_aggregated_fields
  sumDistinct: directus_presets_aggregated_fields
  min: directus_presets_aggregated_fields
  max: directus_presets_aggregated_fields
}

type directus_presets_aggregated_count {
  id: Int
  bookmark: Int
  user: Int
  role: Int
  collection: Int
  search: Int
  layout: Int
  layout_query: Int
  layout_options: Int
  refresh_interval: Int
  filter: Int
  icon: Int
  color: Int
}

type directus_presets_aggregated_fields {
  id: Float
  refresh_interval: Float
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_relations {
  collection: String
  field: String
  related_collection: String
  schema: directus_relations_schema
  meta: directus_relations_meta
}

type directus_relations_meta {
  id: Int
  many_collection: String
  many_field: String
  one_collection: String
  one_field: String
  one_collection_field: String
  one_allowed_collections: [String]
  junction_field: String
  sort_field: String
  one_deselect_action: String
}

type directus_relations_schema {
  table: String!
  column: String!
  foreign_key_table: String!
  foreign_key_column: String!
  constraint_name: String
  on_update: String!
  on_delete: String!
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_aggregated {
  group: JSON
  countAll: Int
  count: directus_revisions_aggregated_count
  countDistinct: directus_revisions_aggregated_count
  avg: directus_revisions_aggregated_fields
  sum: directus_revisions_aggregated_fields
  avgDistinct: directus_revisions_aggregated_fields
  sumDistinct: directus_revisions_aggregated_fields
  min: directus_revisions_aggregated_fields
  max: directus_revisions_aggregated_fields
}

type directus_revisions_aggregated_count {
  id: Int
  activity: Int
  collection: Int
  item: Int
  data: Int
  delta: Int
  parent: Int
  version: Int
}

type directus_revisions_aggregated_fields {
  id: Float
  activity: Float
  parent: Float
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  parent(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  children(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles]
  children_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_aggregated {
  group: JSON
  countAll: Int
  count: directus_roles_aggregated_count
  countDistinct: directus_roles_aggregated_count
}

type directus_roles_aggregated_count {
  id: Int
  name: Int
  icon: Int
  description: Int

  """$t:field_options.directus_roles.parent_note"""
  parent: Int

  """$t:field_options.directus_roles.children_note"""
  children: Int
  policies: Int
  users: Int
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions

  """
  This parameter determines the detail level in the BlurHash, affecting its complexity and length from high (detailed) to low (abstract).
  """
  blurhasher_detail_level: String

  """
  Enables regeneration of all BlurHashes for illustrations upon system restart.
  """
  blurhasher_regenerate_on_restart: Boolean
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_aggregated {
  group: JSON
  countAll: Int
  count: directus_shares_aggregated_count
  countDistinct: directus_shares_aggregated_count
  avg: directus_shares_aggregated_fields
  sum: directus_shares_aggregated_fields
  avgDistinct: directus_shares_aggregated_fields
  sumDistinct: directus_shares_aggregated_fields
  min: directus_shares_aggregated_fields
  max: directus_shares_aggregated_fields
}

type directus_shares_aggregated_count {
  id: Int
  name: Int
  collection: Int
  item: Int
  role: Int

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Int
  user_created: Int
  date_created: Int

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Int

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Int
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_aggregated_fields {
  times_used: Float

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Float
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_aggregated {
  group: JSON
  countAll: Int
  count: directus_translations_aggregated_count
  countDistinct: directus_translations_aggregated_count
}

type directus_translations_aggregated_count {
  id: Int
  language: Int
  key: Int
  value: Int
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  programs(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users]
  programs_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
}

type directus_users_aggregated {
  group: JSON
  countAll: Int
  count: directus_users_aggregated_count
  countDistinct: directus_users_aggregated_count
}

type directus_users_aggregated_count {
  id: Int
  first_name: Int
  last_name: Int
  email: Int
  password: Int
  location: Int
  title: Int
  description: Int
  tags: Int
  avatar: Int
  language: Int
  tfa_secret: Int
  status: Int
  role: Int
  token: Int
  last_access: Int
  last_page: Int
  provider: Int
  external_identifier: Int
  auth_data: Int
  email_notifications: Int
  appearance: Int
  theme_dark: Int
  theme_light: Int
  theme_light_overrides: Int
  theme_dark_overrides: Int
  programs: Int
  policies: Int
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  delta: JSON
  delta_func: count_functions
}

type directus_versions_aggregated {
  group: JSON
  countAll: Int
  count: directus_versions_aggregated_count
  countDistinct: directus_versions_aggregated_count
}

type directus_versions_aggregated_count {
  id: Int
  key: Int
  name: Int
  collection: Int
  item: Int
  hash: Int
  date_created: Int
  date_updated: Int
  user_created: Int
  user_updated: Int
  delta: Int
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_aggregated {
  group: JSON
  countAll: Int
  count: directus_webhooks_aggregated_count
  countDistinct: directus_webhooks_aggregated_count
  avg: directus_webhooks_aggregated_fields
  sum: directus_webhooks_aggregated_fields
  avgDistinct: directus_webhooks_aggregated_fields
  sumDistinct: directus_webhooks_aggregated_fields
  min: directus_webhooks_aggregated_fields
  max: directus_webhooks_aggregated_fields
}

type directus_webhooks_aggregated_count {
  id: Int
  name: Int
  method: Int
  url: Int
  status: Int
  data: Int
  actions: Int
  collections: Int
  headers: Int
  was_active_before_deprecation: Int
  migrated_flow: Int
}

type directus_webhooks_aggregated_fields {
  id: Float
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type event_shows {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  date: Date
  date_func: date_functions
  opening_time: Date
  opening_time_func: time_functions
  starting_time: Date
  starting_time_func: time_functions
  program: String
  place: String
  website: String
  content: JSON
  content_func: count_functions
  button_label: String
  button_url: String
  imagebox(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_box
}

type event_shows_mutated {
  key: ID!
  event: EventEnum
  data: event_shows
}

type events {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String

  """www.rabe.ch/events/slug"""
  slug: String
  content: JSON
  content_func: count_functions
  title_info: String
  title_image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  color: String
  promo_title: String
  promo_text: String
  promo_button_label: String
  promo_button_url: String
  promo_status: String
  partner_title: String
  shows(filter: events_event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_event_shows]
  shows_func: count_functions
  editor_nodes(filter: events_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_editor_nodes]
  editor_nodes_func: count_functions
  partner_logos(filter: events_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [events_image_link]
  partner_logos_func: count_functions
}

type events_editor_nodes {
  id: ID!
  events_id(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): events
  item: events_editor_nodes_item_union
  collection: String
}

type events_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: events_editor_nodes
}

type events_event_shows {
  id: ID!
  events_id(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): events
  event_shows_id(filter: event_shows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): event_shows
  sort: GraphQLBigInt
}

type events_event_shows_mutated {
  key: ID!
  event: EventEnum
  data: events_event_shows
}

type events_image_link {
  id: ID!
  events_id(filter: events_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): events
  image_link_id(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_link
  sort: GraphQLBigInt
}

type events_image_link_mutated {
  key: ID!
  event: EventEnum
  data: events_image_link
}

type events_mutated {
  key: ID!
  event: EventEnum
  data: events
}

type iframe {
  id: ID!
  code: String
}

type iframe_mutated {
  key: ID!
  event: EventEnum
  data: iframe
}

type image_box {
  id: ID!
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  text: String
  title: String
}

type image_box_mutated {
  key: ID!
  event: EventEnum
  data: image_box
}

type image_link {
  id: ID!
  url: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type image_link_mutated {
  key: ID!
  event: EventEnum
  data: image_link
}

type info_box {
  id: ID!
  title: String
  text: JSON
  text_func: count_functions
}

type info_box_mutated {
  key: ID!
  event: EventEnum
  data: info_box
}

type internships {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  program: String
  duration: String
  workload: String
  start: String
  deadline: Date
  deadline_func: date_functions
  email: String
  content: JSON
  content_func: count_functions
  title: String
}

type internships_mutated {
  key: ID!
  event: EventEnum
  data: internships
}

type member_product {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  label: String
  price: Float!
  name: String!
}

type member_product_mutated {
  key: ID!
  event: EventEnum
  data: member_product
}

type orders {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  status: String
  price: Float!
  name: String!
  token: String
  first_name: String!
  family_name: String!
  email: String!
  address: String!
  plz: String!
  city: String!
  phone_number: String
}

type orders_mutated {
  key: ID!
  event: EventEnum
  data: orders
}

type page_agb {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
}

type page_agb_mutated {
  key: ID!
  event: EventEnum
  data: page_agb
}

type page_classes {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_classes_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_classes_nodes]
  editor_nodes_func: count_functions
  classes(filter: page_classes_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_classes_classes]
  classes_func: count_functions
}

type page_classes_classes {
  id: ID!
  page_classes_id(filter: page_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_classes
  classes_id(filter: classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): classes
  sort: GraphQLBigInt
}

type page_classes_classes_mutated {
  key: ID!
  event: EventEnum
  data: page_classes_classes
}

type page_classes_mutated {
  key: ID!
  event: EventEnum
  data: page_classes
}

type page_classes_nodes {
  id: ID!
  page_classes_id(filter: page_classes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_classes
  item: page_classes_nodes_item_union
  collection: String
}

type page_classes_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_classes_nodes
}

type page_contact {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  street: String
  street_number: String
  plz: String
  city: String
  phone_number: String
  email: String
  studio_phone_number: String
  studio_email: String
  ombuds_name: String
  ombuds_street: String
  ombuds_street_number: String
  ombuds_plz: String
  ombuds_city: String
  ombuds_name_2: String
  ombuds_street_2: String
  ombuds_street_number_2: String
  ombuds_plz_2: String
  ombuds_city_2: String
  ombuds_postfach: String
  ombuds_postfach_2: String
  location: GraphQLGeoJSON
  partner_logos(filter: page_contact_image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_image_link]
  partner_logos_func: count_functions
  contact_addresses(filter: page_contact_contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_contact_contact_address]
  contact_addresses_func: count_functions
}

type page_contact_contact_address {
  id: ID!
  page_contact_id(filter: page_contact_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_contact
  contact_address_id(filter: contact_address_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): contact_address
}

type page_contact_contact_address_mutated {
  key: ID!
  event: EventEnum
  data: page_contact_contact_address
}

type page_contact_image_link {
  id: ID!
  page_contact_id(filter: page_contact_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_contact
  image_link_id(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_link
  sort: GraphQLBigInt
}

type page_contact_image_link_mutated {
  key: ID!
  event: EventEnum
  data: page_contact_image_link
}

type page_contact_mutated {
  key: ID!
  event: EventEnum
  data: page_contact
}

type page_history {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  vision(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  statutes(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  protocols(filter: page_history_files_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files_1]
  protocols_func: count_functions
  editor_nodes(filter: page_history_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_nodes]
  editor_nodes_func: count_functions
  logos(filter: page_history_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_history_files]
  logos_func: count_functions
}

type page_history_files {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  sort: GraphQLBigInt
}

type page_history_files_1 {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  sort: GraphQLBigInt
}

type page_history_files_1_mutated {
  key: ID!
  event: EventEnum
  data: page_history_files_1
}

type page_history_files_mutated {
  key: ID!
  event: EventEnum
  data: page_history_files
}

type page_history_image_link {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  image_link_id(filter: image_link_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_link
  sort: GraphQLBigInt
}

type page_history_image_link_mutated {
  key: ID!
  event: EventEnum
  data: page_history_image_link
}

type page_history_mutated {
  key: ID!
  event: EventEnum
  data: page_history
}

type page_history_nodes {
  id: ID!
  page_history_id(filter: page_history_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_history
  item: page_history_nodes_item_union
  collection: String
}

type page_history_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_history_nodes
}

type page_home {
  id: ID!
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  promo_box(filter: promo_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): promo_box
}

type page_home_mutated {
  key: ID!
  event: EventEnum
  data: page_home
}

type page_impressum {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
}

type page_impressum_mutated {
  key: ID!
  event: EventEnum
  data: page_impressum
}

type page_internship {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  info_title: String
  info_text: JSON
  info_text_func: count_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_internship_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_internship_nodes]
  editor_nodes_func: count_functions
  internships(filter: page_internship_internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_internship_internships]
  internships_func: count_functions
}

type page_internship_internships {
  id: ID!
  page_internship_id(filter: page_internship_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_internship
  internships_id(filter: internships_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): internships
  sort: GraphQLBigInt
}

type page_internship_internships_mutated {
  key: ID!
  event: EventEnum
  data: page_internship_internships
}

type page_internship_mutated {
  key: ID!
  event: EventEnum
  data: page_internship
}

type page_internship_nodes {
  id: ID!
  page_internship_id(filter: page_internship_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_internship
  item: page_internship_nodes_item_union
  collection: String
}

type page_internship_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_internship_nodes
}

type page_join {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_join_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_join_nodes]
  editor_nodes_func: count_functions
}

type page_join_mutated {
  key: ID!
  event: EventEnum
  data: page_join
}

type page_join_nodes {
  id: ID!
  page_join_id(filter: page_join_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_join
  item: page_join_nodes_item_union
  collection: String
}

type page_join_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_join_nodes
}

type page_member {
  id: ID!
  content: JSON
  content_func: count_functions
}

type page_member_mutated {
  key: ID!
  event: EventEnum
  data: page_member
}

type page_member_statements {
  id: ID!
  page_member_id(filter: page_member_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_member
  statements_id(filter: statements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): statements
}

type page_member_statements_mutated {
  key: ID!
  event: EventEnum
  data: page_member_statements
}

type page_program {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  programs_group_1_title: String
  programs_group_2_title: String
  programs_group_3_title: String
  programs_group_1(filter: page_program_programs_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_2]
  programs_group_1_func: count_functions
  programs_group_2(filter: page_program_programs_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_1]
  programs_group_2_func: count_functions
  programs_group_3(filter: page_program_programs_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_program_programs_3]
  programs_group_3_func: count_functions
}

type page_program_mutated {
  key: ID!
  event: EventEnum
  data: page_program
}

type page_program_programs {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_1 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_1_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_1
}

type page_program_programs_2 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_2_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_2
}

type page_program_programs_3 {
  id: ID!
  page_program_id(filter: page_program_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_program
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
}

type page_program_programs_3_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs_3
}

type page_program_programs_mutated {
  key: ID!
  event: EventEnum
  data: page_program_programs
}

type page_programs {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  text: String
}

type page_programs_mutated {
  key: ID!
  event: EventEnum
  data: page_programs
}

type page_receive {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  content: JSON
  content_func: count_functions
  editor_nodes(filter: page_receive_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_receive_nodes]
  editor_nodes_func: count_functions
}

type page_receive_mutated {
  key: ID!
  event: EventEnum
  data: page_receive
}

type page_receive_nodes {
  id: ID!
  page_receive_id(filter: page_receive_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_receive
  item: page_receive_nodes_item_union
  collection: String
}

type page_receive_nodes_mutated {
  key: ID!
  event: EventEnum
  data: page_receive_nodes
}

type page_team {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  text: String
  members_program(filter: page_team_directus_users_2_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_2]
  members_program_func: count_functions
  members_management(filter: page_team_directus_users_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_1]
  members_management_func: count_functions
  members_staff(filter: page_team_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users]
  members_staff_func: count_functions
  members_it(filter: page_team_directus_users_3_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_3]
  members_it_func: count_functions
  members_rabe_info(filter: page_team_directus_users_4_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [page_team_directus_users_4]
  members_rabe_info_func: count_functions
}

type page_team_directus_users {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_1 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_1_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_1
}

type page_team_directus_users_2 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_2_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_2
}

type page_team_directus_users_3 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_3_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_3
}

type page_team_directus_users_4 {
  id: ID!
  page_team_id(filter: page_team_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): page_team
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type page_team_directus_users_4_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users_4
}

type page_team_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: page_team_directus_users
}

type page_team_mutated {
  key: ID!
  event: EventEnum
  data: page_team
}

type party_location {
  id: ID!
  url: String
  address_line_1: String
  address_line_2: String
  logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type party_location_mutated {
  key: ID!
  event: EventEnum
  data: party_location
}

type party_tips {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  date: Date
  date_func: datetime_functions
  title_2: String
  title_1: String
  party_location(filter: party_location_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): party_location

  """Label überschreibt das Start-Datum"""
  date_label: String
}

type party_tips_mutated {
  key: ID!
  event: EventEnum
  data: party_tips
}

type policy_me_globals_type {
  enforce_tfa: Boolean
  app_access: Boolean
  admin_access: Boolean
}

type post {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String!
  slug: String!
  program(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
  imagebox(filter: image_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): image_box
  content: JSON!
  content_func: count_functions
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  date_published: Date
  date_published_func: datetime_functions
  audio_files(filter: post_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_files]
  audio_files_func: count_functions
  tags(filter: post_tags_1_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_tags_1]
  tags_func: count_functions
  editor_nodes(filter: post_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_editor_nodes]
  editor_nodes_func: count_functions
  authors(filter: post_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post_directus_users]
  authors_func: count_functions
}

type post_directus_users {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type post_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: post_directus_users
}

type post_editor_nodes {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  item: post_editor_nodes_item_union
  collection: String
}

type post_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: post_editor_nodes
}

type post_files {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  sort: Int
}

type post_files_mutated {
  key: ID!
  event: EventEnum
  data: post_files
}

type post_mutated {
  key: ID!
  event: EventEnum
  data: post
}

type post_tags_1 {
  id: ID!
  post_id(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): post
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
}

type post_tags_1_mutated {
  key: ID!
  event: EventEnum
  data: post_tags_1
}

type programs {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  content: JSON
  content_func: count_functions
  promo_box(filter: promo_box_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): promo_box
  team(filter: programs_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [programs_directus_users]
  team_func: count_functions
  posts(filter: post_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [post]
  posts_func: count_functions
}

type programs_directus_users {
  id: ID!
  programs_slug(filter: programs_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): programs
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type programs_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: programs_directus_users
}

type programs_mutated {
  key: ID!
  event: EventEnum
  data: programs
}

type promo_box {
  id: ID!
  title: String!
  text: String
  button_label: String
  button_url: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  background_color: String
}

type promo_box_mutated {
  key: ID!
  event: EventEnum
  data: promo_box
}

type quote {
  id: ID!
  text: String
  info: String
  author: String
}

type quote_mutated {
  key: ID!
  event: EventEnum
  data: quote
}

type server_info {
  project: server_info_project
  rateLimit: Boolean
  rateLimitGlobal: Boolean
  websocket: server_info_websocket
  queryLimit: server_info_query_limit
}

type server_info_project {
  project_name: String
  project_descriptor: String
  project_logo: String
  project_color: String
  default_language: String
  public_foreground: String
  public_background: String
  public_note: String
  custom_css: String
  public_registration: Boolean
  public_registration_verify_email: Boolean
}

type server_info_query_limit {
  default: Int
  max: Int
}

type server_info_websocket {
  rest: server_info_websocket_rest
  graphql: server_info_websocket_graphql
  heartbeat: Int
}

type server_info_websocket_graphql {
  authentication: server_info_websocket_graphql_authentication
  path: String
}

type server_info_websocket_rest {
  authentication: server_info_websocket_rest_authentication
  path: String
}

type statements {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  text: String
  author: String
}

type statements_mutated {
  key: ID!
  event: EventEnum
  data: statements
}

type tags {
  id: ID!
  value: String
}

type tags_mutated {
  key: ID!
  event: EventEnum
  data: tags
}

type time_functions {
  hour: Int
  minute: Int
  second: Int
}

type users_me_tfa_generate_data {
  secret: String
  otpauth_url: String
}

input audio_player_files_filter {
  id: number_filter_operators
  audio_player_id: audio_player_filter
  directus_files_id: directus_files_filter
  _and: [audio_player_files_filter]
  _or: [audio_player_files_filter]
}

input audio_player_filter {
  id: number_filter_operators
  files: audio_player_files_filter
  files_func: count_function_filter_operators
  _and: [audio_player_filter]
  _or: [audio_player_filter]
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input classes_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  date: date_filter_operators
  date_func: date_function_filter_operators
  time_start: date_filter_operators
  time_start_func: time_function_filter_operators
  time_end: date_filter_operators
  time_end_func: time_function_filter_operators
  location: string_filter_operators
  price: string_filter_operators
  teacher: string_filter_operators
  what_else: string_filter_operators
  email: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  _and: [classes_filter]
  _or: [classes_filter]
}

input contact_address_filter {
  id: number_filter_operators
  name: string_filter_operators
  phone_number: string_filter_operators
  email: string_filter_operators
  _and: [contact_address_filter]
  _or: [contact_address_filter]
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_directus_access_input {
  id: ID
  role: create_directus_roles_input
  user: create_directus_users_input
  policy: create_directus_policies_input
  sort: Int
}

input create_directus_collections_fields_input {
  collection: String
  field: String
  type: String
  meta: directus_fields_meta_input
  schema: directus_fields_schema_input
}

input create_directus_collections_input {
  collection: String
  meta: directus_collections_meta_input
  schema: directus_collections_schema_input
  fields: [create_directus_collections_fields_input!]
}

input create_directus_comments_input {
  id: ID
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_updated: Date
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input create_directus_dashboards_input {
  id: ID
  name: String!
  icon: String
  note: String
  date_created: Date
  user_created: create_directus_users_input
  color: String
  panels: [create_directus_panels_input]
}

input create_directus_fields_input {
  collection: String
  field: String
  type: String
  meta: directus_fields_meta_input
  schema: directus_fields_schema_input
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  created_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date

  """Automatically generated by the extension blurhasher"""
  blurhash: String
}

input create_directus_flows_input {
  id: ID
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  operation: create_directus_operations_input
  date_created: Date
  user_created: create_directus_users_input
  operations: [create_directus_operations_input]
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_notifications_input {
  id: ID
  timestamp: Date
  status: String
  recipient: create_directus_users_input
  sender: create_directus_users_input
  subject: String!
  message: String
  collection: String
  item: String
}

input create_directus_operations_input {
  id: ID
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  resolve: create_directus_operations_input
  reject: create_directus_operations_input
  flow: create_directus_flows_input
  date_created: Date
  user_created: create_directus_users_input
}

input create_directus_panels_input {
  id: ID
  dashboard: create_directus_dashboards_input
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  date_created: Date
  user_created: create_directus_users_input
}

input create_directus_permissions_input {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: create_directus_policies_input
}

input create_directus_policies_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions: [create_directus_permissions_input]
  users: [create_directus_access_input]
  roles: [create_directus_access_input]
}

input create_directus_presets_input {
  id: ID
  bookmark: String
  user: create_directus_users_input
  role: create_directus_roles_input
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_options: JSON
  refresh_interval: Int
  filter: JSON
  icon: String
  color: String
}

input create_directus_relations_input {
  collection: String
  field: String
  related_collection: String
  schema: directus_relations_schema_input
  meta: directus_relations_meta_input
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  parent: create_directus_roles_input
  children: [create_directus_roles_input]
  policies: [create_directus_access_input]
  users: [create_directus_users_input]
}

input create_directus_shares_input {
  id: ID
  name: String
  collection: String!
  item: String!
  role: create_directus_roles_input

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created: create_directus_users_input
  date_created: Date

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

input create_directus_translations_input {
  id: ID
  language: String!
  key: String!
  value: String!
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  programs: [create_programs_directus_users_input]
  policies: [create_directus_access_input]
}

input create_directus_versions_input {
  id: ID
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_updated: Date
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
  delta: JSON
}

input create_directus_webhooks_input {
  id: ID
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  was_active_before_deprecation: Boolean!
  migrated_flow: create_directus_flows_input
}

input create_image_box_input {
  id: ID
  image: create_directus_files_input
  text: String
  title: String
}

input create_post_directus_users_input {
  id: ID
  post_id: create_post_input
  directus_users_id: create_directus_users_input
}

input create_post_editor_nodes_input {
  id: ID
  post_id: create_post_input
  item: String
  collection: String
}

input create_post_files_input {
  id: ID
  post_id: create_post_input
  directus_files_id: create_directus_files_input
  sort: Int
}

input create_post_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  title: String!
  slug: String!
  program: create_programs_input
  imagebox: create_image_box_input
  content: JSON!
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  date_published: Date
  audio_files: [create_post_files_input]
  tags: [create_post_tags_1_input]
  editor_nodes: [create_post_editor_nodes_input]
  authors: [create_post_directus_users_input]
}

input create_post_tags_1_input {
  id: ID
  post_id: create_post_input
  tags_id: create_tags_input
}

input create_programs_directus_users_input {
  id: ID
  programs_slug: create_programs_input
  directus_users_id: create_directus_users_input
}

input create_programs_input {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID!
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  image: create_directus_files_input
  content: JSON
  promo_box: create_promo_box_input
  team: [create_programs_directus_users_input]
  posts: [create_post_input]
}

input create_promo_box_input {
  id: ID
  title: String!
  text: String
  button_label: String
  button_url: String
  image: create_directus_files_input
  background_color: String
}

input create_tags_input {
  id: ID
  value: String
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input date_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_access_filter {
  id: string_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_collections_meta_input {
  collection: String!
  icon: String
  note: String
  display_template: String
  hidden: Boolean!
  singleton: Boolean!
  translations: JSON
  archive_field: String
  archive_app_filter: Boolean!
  archive_value: String
  unarchive_value: String
  sort_field: String
  accountability: String
  color: String
  item_duplication_fields: JSON
  sort: Int
  group: String
  collapse: String!
  preview_url: String
  versioning: Boolean!
}

input directus_collections_schema_input {
  name: String
  comment: String
}

input directus_comments_filter {
  id: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  _and: [directus_comments_filter]
  _or: [directus_comments_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_fields_meta_input {
  id: Int!
  collection: String!
  field: String!
  special: [String]
  interface: String
  options: JSON
  display: String
  display_options: JSON
  readonly: Boolean!
  hidden: Boolean!
  sort: Int
  width: String
  translations: JSON
  note: String
  conditions: JSON
  required: Boolean
  group: String
  validation: JSON
  validation_message: String
}

input directus_fields_schema_input {
  name: String
  table: String
  data_type: String
  default_value: String
  max_length: Int
  numeric_precision: Int
  numeric_scale: Int
  is_generated: Boolean
  generation_expression: String
  is_indexed: Boolean
  is_nullable: Boolean
  is_unique: Boolean
  is_primary_key: Boolean
  has_auto_increment: Boolean
  foreign_key_column: String
  foreign_key_table: String
  comment: String
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  created_on: date_filter_operators
  created_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  blurhash: string_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_notifications_filter {
  id: number_filter_operators
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  status: string_filter_operators
  recipient: directus_users_filter
  sender: directus_users_filter
  subject: string_filter_operators
  message: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  _and: [directus_notifications_filter]
  _or: [directus_notifications_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_permissions_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
}

input directus_policies_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  permissions: directus_permissions_filter
  permissions_func: count_function_filter_operators
  users: directus_access_filter
  users_func: count_function_filter_operators
  roles: directus_access_filter
  roles_func: count_function_filter_operators
  _and: [directus_policies_filter]
  _or: [directus_policies_filter]
}

input directus_presets_filter {
  id: number_filter_operators
  bookmark: string_filter_operators
  user: directus_users_filter
  role: directus_roles_filter
  collection: string_filter_operators
  search: string_filter_operators
  layout: string_filter_operators
  layout_query: string_filter_operators
  layout_query_func: count_function_filter_operators
  layout_options: string_filter_operators
  layout_options_func: count_function_filter_operators
  refresh_interval: number_filter_operators
  filter: string_filter_operators
  filter_func: count_function_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  _and: [directus_presets_filter]
  _or: [directus_presets_filter]
}

input directus_relations_meta_input {
  id: Int
  many_collection: String
  many_field: String
  one_collection: String
  one_field: String
  one_collection_field: String
  one_allowed_collections: [String]
  junction_field: String
  sort_field: String
  one_deselect_action: String
}

input directus_relations_schema_input {
  table: String!
  column: String!
  foreign_key_table: String!
  foreign_key_column: String!
  constraint_name: String
  on_update: String!
  on_delete: String!
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_filter
  children_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_shares_filter {
  id: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  role: directus_roles_filter
  password: hash_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_start: date_filter_operators
  date_start_func: datetime_function_filter_operators
  date_end: date_filter_operators
  date_end_func: datetime_function_filter_operators
  times_used: number_filter_operators
  max_uses: number_filter_operators
  _and: [directus_shares_filter]
  _or: [directus_shares_filter]
}

input directus_translations_filter {
  id: string_filter_operators
  language: string_filter_operators
  key: string_filter_operators
  value: string_filter_operators
  _and: [directus_translations_filter]
  _or: [directus_translations_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  programs: programs_directus_users_filter
  programs_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input directus_webhooks_filter {
  id: number_filter_operators
  name: string_filter_operators
  method: string_filter_operators
  url: string_filter_operators
  status: string_filter_operators
  data: boolean_filter_operators
  actions: string_filter_operators
  collections: string_filter_operators
  headers: string_filter_operators
  headers_func: count_function_filter_operators
  was_active_before_deprecation: boolean_filter_operators
  migrated_flow: directus_flows_filter
  _and: [directus_webhooks_filter]
  _or: [directus_webhooks_filter]
}

input event_shows_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  date: date_filter_operators
  date_func: date_function_filter_operators
  opening_time: date_filter_operators
  opening_time_func: time_function_filter_operators
  starting_time: date_filter_operators
  starting_time_func: time_function_filter_operators
  program: string_filter_operators
  place: string_filter_operators
  website: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  button_label: string_filter_operators
  button_url: string_filter_operators
  imagebox: image_box_filter
  _and: [event_shows_filter]
  _or: [event_shows_filter]
}

input events_editor_nodes_filter {
  id: string_filter_operators
  events_id: events_filter
  collection: string_filter_operators
  _and: [events_editor_nodes_filter]
  _or: [events_editor_nodes_filter]
  item__iframe: iframe_filter
  item__image_box: image_box_filter
  item__quote: quote_filter
  item__info_box: info_box_filter
  item__audio_player: audio_player_filter
}

input events_event_shows_filter {
  id: number_filter_operators
  events_id: events_filter
  event_shows_id: event_shows_filter
  sort: big_int_filter_operators
  _and: [events_event_shows_filter]
  _or: [events_event_shows_filter]
}

input events_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  slug: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  title_info: string_filter_operators
  title_image: directus_files_filter
  color: string_filter_operators
  promo_title: string_filter_operators
  promo_text: string_filter_operators
  promo_button_label: string_filter_operators
  promo_button_url: string_filter_operators
  promo_status: string_filter_operators
  partner_title: string_filter_operators
  shows: events_event_shows_filter
  shows_func: count_function_filter_operators
  editor_nodes: events_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  partner_logos: events_image_link_filter
  partner_logos_func: count_function_filter_operators
  _and: [events_filter]
  _or: [events_filter]
}

input events_image_link_filter {
  id: number_filter_operators
  events_id: events_filter
  image_link_id: image_link_filter
  sort: big_int_filter_operators
  _and: [events_image_link_filter]
  _or: [events_image_link_filter]
}

input geometry_filter_operators {
  _eq: GraphQLGeoJSON
  _neq: GraphQLGeoJSON
  _intersects: GraphQLGeoJSON
  _nintersects: GraphQLGeoJSON
  _intersects_bbox: GraphQLGeoJSON
  _nintersects_bbox: GraphQLGeoJSON
  _null: Boolean
  _nnull: Boolean
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input iframe_filter {
  id: number_filter_operators
  code: string_filter_operators
  _and: [iframe_filter]
  _or: [iframe_filter]
}

input image_box_filter {
  id: number_filter_operators
  image: directus_files_filter
  text: string_filter_operators
  title: string_filter_operators
  _and: [image_box_filter]
  _or: [image_box_filter]
}

input image_link_filter {
  id: number_filter_operators
  url: string_filter_operators
  image: directus_files_filter
  _and: [image_link_filter]
  _or: [image_link_filter]
}

input info_box_filter {
  id: number_filter_operators
  title: string_filter_operators
  text: string_filter_operators
  text_func: count_function_filter_operators
  _and: [info_box_filter]
  _or: [info_box_filter]
}

input internships_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  program: string_filter_operators
  duration: string_filter_operators
  workload: string_filter_operators
  start: string_filter_operators
  deadline: date_filter_operators
  deadline_func: date_function_filter_operators
  email: string_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  title: string_filter_operators
  _and: [internships_filter]
  _or: [internships_filter]
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input page_classes_classes_filter {
  id: number_filter_operators
  page_classes_id: page_classes_filter
  classes_id: classes_filter
  sort: big_int_filter_operators
  _and: [page_classes_classes_filter]
  _or: [page_classes_classes_filter]
}

input page_classes_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_classes_nodes_filter
  editor_nodes_func: count_function_filter_operators
  classes: page_classes_classes_filter
  classes_func: count_function_filter_operators
  _and: [page_classes_filter]
  _or: [page_classes_filter]
}

input page_classes_nodes_filter {
  id: string_filter_operators
  page_classes_id: page_classes_filter
  collection: string_filter_operators
  _and: [page_classes_nodes_filter]
  _or: [page_classes_nodes_filter]
  item__image_box: image_box_filter
}

input page_contact_contact_address_filter {
  id: number_filter_operators
  page_contact_id: page_contact_filter
  contact_address_id: contact_address_filter
  _and: [page_contact_contact_address_filter]
  _or: [page_contact_contact_address_filter]
}

input page_contact_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  street: string_filter_operators
  street_number: string_filter_operators
  plz: string_filter_operators
  city: string_filter_operators
  phone_number: string_filter_operators
  email: string_filter_operators
  studio_phone_number: string_filter_operators
  studio_email: string_filter_operators
  ombuds_name: string_filter_operators
  ombuds_street: string_filter_operators
  ombuds_street_number: string_filter_operators
  ombuds_plz: string_filter_operators
  ombuds_city: string_filter_operators
  ombuds_name_2: string_filter_operators
  ombuds_street_2: string_filter_operators
  ombuds_street_number_2: string_filter_operators
  ombuds_plz_2: string_filter_operators
  ombuds_city_2: string_filter_operators
  ombuds_postfach: string_filter_operators
  ombuds_postfach_2: string_filter_operators
  location: geometry_filter_operators
  partner_logos: page_contact_image_link_filter
  partner_logos_func: count_function_filter_operators
  contact_addresses: page_contact_contact_address_filter
  contact_addresses_func: count_function_filter_operators
  _and: [page_contact_filter]
  _or: [page_contact_filter]
}

input page_contact_image_link_filter {
  id: number_filter_operators
  page_contact_id: page_contact_filter
  image_link_id: image_link_filter
  sort: big_int_filter_operators
  _and: [page_contact_image_link_filter]
  _or: [page_contact_image_link_filter]
}

input page_history_files_1_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  directus_files_id: directus_files_filter
  sort: big_int_filter_operators
  _and: [page_history_files_1_filter]
  _or: [page_history_files_1_filter]
}

input page_history_files_filter {
  id: number_filter_operators
  page_history_id: page_history_filter
  directus_files_id: directus_files_filter
  sort: big_int_filter_operators
  _and: [page_history_files_filter]
  _or: [page_history_files_filter]
}

input page_history_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  vision: directus_files_filter
  statutes: directus_files_filter
  protocols: page_history_files_1_filter
  protocols_func: count_function_filter_operators
  editor_nodes: page_history_nodes_filter
  editor_nodes_func: count_function_filter_operators
  logos: page_history_files_filter
  logos_func: count_function_filter_operators
  _and: [page_history_filter]
  _or: [page_history_filter]
}

input page_history_nodes_filter {
  id: string_filter_operators
  page_history_id: page_history_filter
  collection: string_filter_operators
  _and: [page_history_nodes_filter]
  _or: [page_history_nodes_filter]
  item__image_box: image_box_filter
}

input page_internship_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  info_title: string_filter_operators
  info_text: string_filter_operators
  info_text_func: count_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_internship_nodes_filter
  editor_nodes_func: count_function_filter_operators
  internships: page_internship_internships_filter
  internships_func: count_function_filter_operators
  _and: [page_internship_filter]
  _or: [page_internship_filter]
}

input page_internship_internships_filter {
  id: number_filter_operators
  page_internship_id: page_internship_filter
  internships_id: internships_filter
  sort: big_int_filter_operators
  _and: [page_internship_internships_filter]
  _or: [page_internship_internships_filter]
}

input page_internship_nodes_filter {
  id: string_filter_operators
  page_internship_id: page_internship_filter
  collection: string_filter_operators
  _and: [page_internship_nodes_filter]
  _or: [page_internship_nodes_filter]
  item__image_box: image_box_filter
}

input page_join_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_join_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [page_join_filter]
  _or: [page_join_filter]
}

input page_join_nodes_filter {
  id: string_filter_operators
  page_join_id: page_join_filter
  collection: string_filter_operators
  _and: [page_join_nodes_filter]
  _or: [page_join_nodes_filter]
  item__info_box: info_box_filter
  item__audio_player: audio_player_filter
}

input page_member_filter {
  id: number_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  _and: [page_member_filter]
  _or: [page_member_filter]
}

input page_program_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  programs_group_1_title: string_filter_operators
  programs_group_2_title: string_filter_operators
  programs_group_3_title: string_filter_operators
  programs_group_1: page_program_programs_2_filter
  programs_group_1_func: count_function_filter_operators
  programs_group_2: page_program_programs_1_filter
  programs_group_2_func: count_function_filter_operators
  programs_group_3: page_program_programs_3_filter
  programs_group_3_func: count_function_filter_operators
  _and: [page_program_filter]
  _or: [page_program_filter]
}

input page_program_programs_1_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_1_filter]
  _or: [page_program_programs_1_filter]
}

input page_program_programs_2_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_2_filter]
  _or: [page_program_programs_2_filter]
}

input page_program_programs_3_filter {
  id: number_filter_operators
  page_program_id: page_program_filter
  programs_slug: programs_filter
  _and: [page_program_programs_3_filter]
  _or: [page_program_programs_3_filter]
}

input page_receive_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  content: string_filter_operators
  content_func: count_function_filter_operators
  editor_nodes: page_receive_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [page_receive_filter]
  _or: [page_receive_filter]
}

input page_receive_nodes_filter {
  id: string_filter_operators
  page_receive_id: page_receive_filter
  collection: string_filter_operators
  _and: [page_receive_nodes_filter]
  _or: [page_receive_nodes_filter]
  item__info_box: info_box_filter
}

input page_team_directus_users_1_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_1_filter]
  _or: [page_team_directus_users_1_filter]
}

input page_team_directus_users_2_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_2_filter]
  _or: [page_team_directus_users_2_filter]
}

input page_team_directus_users_3_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_3_filter]
  _or: [page_team_directus_users_3_filter]
}

input page_team_directus_users_4_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_4_filter]
  _or: [page_team_directus_users_4_filter]
}

input page_team_directus_users_filter {
  id: number_filter_operators
  page_team_id: page_team_filter
  directus_users_id: directus_users_filter
  _and: [page_team_directus_users_filter]
  _or: [page_team_directus_users_filter]
}

input page_team_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  text: string_filter_operators
  members_program: page_team_directus_users_2_filter
  members_program_func: count_function_filter_operators
  members_management: page_team_directus_users_1_filter
  members_management_func: count_function_filter_operators
  members_staff: page_team_directus_users_filter
  members_staff_func: count_function_filter_operators
  members_it: page_team_directus_users_3_filter
  members_it_func: count_function_filter_operators
  members_rabe_info: page_team_directus_users_4_filter
  members_rabe_info_func: count_function_filter_operators
  _and: [page_team_filter]
  _or: [page_team_filter]
}

input party_location_filter {
  id: number_filter_operators
  url: string_filter_operators
  address_line_1: string_filter_operators
  address_line_2: string_filter_operators
  logo: directus_files_filter
  _and: [party_location_filter]
  _or: [party_location_filter]
}

input post_directus_users_filter {
  id: number_filter_operators
  post_id: post_filter
  directus_users_id: directus_users_filter
  _and: [post_directus_users_filter]
  _or: [post_directus_users_filter]
}

input post_editor_nodes_filter {
  id: string_filter_operators
  post_id: post_filter
  collection: string_filter_operators
  _and: [post_editor_nodes_filter]
  _or: [post_editor_nodes_filter]
  item__info_box: info_box_filter
  item__quote: quote_filter
}

input post_files_filter {
  id: number_filter_operators
  post_id: post_filter
  directus_files_id: directus_files_filter
  sort: number_filter_operators
  _and: [post_files_filter]
  _or: [post_files_filter]
}

input post_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  slug: string_filter_operators
  program: programs_filter
  imagebox: image_box_filter
  content: string_filter_operators
  content_func: count_function_filter_operators
  preview_full_image: boolean_filter_operators
  short_description: string_filter_operators
  date_published: date_filter_operators
  date_published_func: datetime_function_filter_operators
  audio_files: post_files_filter
  audio_files_func: count_function_filter_operators
  tags: post_tags_1_filter
  tags_func: count_function_filter_operators
  editor_nodes: post_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  authors: post_directus_users_filter
  authors_func: count_function_filter_operators
  _and: [post_filter]
  _or: [post_filter]
}

input post_tags_1_filter {
  id: number_filter_operators
  post_id: post_filter
  tags_id: tags_filter
  _and: [post_tags_1_filter]
  _or: [post_tags_1_filter]
}

input programs_directus_users_filter {
  id: number_filter_operators
  programs_slug: programs_filter
  directus_users_id: directus_users_filter
  _and: [programs_directus_users_filter]
  _or: [programs_directus_users_filter]
}

input programs_filter {
  slug: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  image: directus_files_filter
  content: string_filter_operators
  content_func: count_function_filter_operators
  promo_box: promo_box_filter
  team: programs_directus_users_filter
  team_func: count_function_filter_operators
  posts: post_filter
  posts_func: count_function_filter_operators
  _and: [programs_filter]
  _or: [programs_filter]
}

input promo_box_filter {
  id: number_filter_operators
  title: string_filter_operators
  text: string_filter_operators
  button_label: string_filter_operators
  button_url: string_filter_operators
  image: directus_files_filter
  background_color: string_filter_operators
  _and: [promo_box_filter]
  _or: [promo_box_filter]
}

input quote_filter {
  id: number_filter_operators
  text: string_filter_operators
  info: string_filter_operators
  author: string_filter_operators
  _and: [quote_filter]
  _or: [quote_filter]
}

input statements_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  text: string_filter_operators
  author: string_filter_operators
  _and: [statements_filter]
  _or: [statements_filter]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input tags_filter {
  id: number_filter_operators
  value: string_filter_operators
  _and: [tags_filter]
  _or: [tags_filter]
}

input time_function_filter_operators {
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input update_directus_access_input {
  id: ID
  role: update_directus_roles_input
  user: update_directus_users_input
  policy: update_directus_policies_input
  sort: Int
}

input update_directus_collections_input {
  meta: directus_collections_meta_input
}

input update_directus_comments_input {
  id: ID
  collection: String
  item: String
  comment: String
  date_created: Date
  date_updated: Date
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input update_directus_dashboards_input {
  id: ID
  name: String
  icon: String
  note: String
  date_created: Date
  user_created: update_directus_users_input
  color: String
  panels: [update_directus_panels_input]
}

input update_directus_extensions_input_metaInput {
  enabled: Boolean
}

input update_directus_extensions_inputInput {
  meta: update_directus_extensions_input_metaInput
}

input update_directus_fields_input {
  collection: String
  field: String
  type: String
  meta: directus_fields_meta_input
  schema: directus_fields_schema_input
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  created_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date

  """Automatically generated by the extension blurhasher"""
  blurhash: String
}

input update_directus_flows_input {
  id: ID
  name: String
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  operation: update_directus_operations_input
  date_created: Date
  user_created: update_directus_users_input
  operations: [update_directus_operations_input]
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_notifications_input {
  id: ID
  timestamp: Date
  status: String
  recipient: update_directus_users_input
  sender: update_directus_users_input
  subject: String
  message: String
  collection: String
  item: String
}

input update_directus_operations_input {
  id: ID
  name: String
  key: String
  type: String
  position_x: Int
  position_y: Int
  options: JSON
  resolve: update_directus_operations_input
  reject: update_directus_operations_input
  flow: update_directus_flows_input
  date_created: Date
  user_created: update_directus_users_input
}

input update_directus_panels_input {
  id: ID
  dashboard: update_directus_dashboards_input
  name: String
  icon: String
  color: String
  show_header: Boolean
  note: String
  type: String
  position_x: Int
  position_y: Int
  width: Int
  height: Int
  options: JSON
  date_created: Date
  user_created: update_directus_users_input
}

input update_directus_permissions_input {
  id: ID
  collection: String
  action: String
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: update_directus_policies_input
}

input update_directus_policies_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  permissions: [update_directus_permissions_input]
  users: [update_directus_access_input]
  roles: [update_directus_access_input]
}

input update_directus_presets_input {
  id: ID
  bookmark: String
  user: update_directus_users_input
  role: update_directus_roles_input
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_options: JSON
  refresh_interval: Int
  filter: JSON
  icon: String
  color: String
}

input update_directus_relations_input {
  collection: String
  field: String
  related_collection: String
  schema: directus_relations_schema_input
  meta: directus_relations_meta_input
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  parent: update_directus_roles_input
  children: [update_directus_roles_input]
  policies: [update_directus_access_input]
  users: [update_directus_users_input]
}

input update_directus_settings_input {
  id: ID
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo: update_directus_files_input
  public_foreground: update_directus_files_input
  public_background: update_directus_files_input
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  custom_css: String
  storage_default_folder: update_directus_folders_input
  basemaps: JSON
  mapbox_key: String
  module_bar: JSON
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  public_favicon: update_directus_files_input
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  default_theme_dark: String
  theme_dark_overrides: JSON
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role: update_directus_roles_input

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON

  """
  This parameter determines the detail level in the BlurHash, affecting its complexity and length from high (detailed) to low (abstract).
  """
  blurhasher_detail_level: String

  """
  Enables regeneration of all BlurHashes for illustrations upon system restart.
  """
  blurhasher_regenerate_on_restart: Boolean
}

input update_directus_shares_input {
  id: ID
  name: String
  collection: String
  item: String
  role: update_directus_roles_input

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created: update_directus_users_input
  date_created: Date

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

input update_directus_translations_input {
  id: ID
  language: String
  key: String
  value: String
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  programs: [update_programs_directus_users_input]
  policies: [update_directus_access_input]
}

input update_directus_versions_input {
  id: ID
  key: String
  name: String
  collection: String
  item: String
  hash: String
  date_created: Date
  date_updated: Date
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
  delta: JSON
}

input update_directus_webhooks_input {
  id: ID
  name: String
  method: String
  url: String
  status: String
  data: Boolean
  actions: [String]
  collections: [String]
  headers: JSON
  was_active_before_deprecation: Boolean
  migrated_flow: update_directus_flows_input
}

input update_image_box_input {
  id: ID
  image: update_directus_files_input
  text: String
  title: String
}

input update_post_directus_users_input {
  id: ID
  post_id: update_post_input
  directus_users_id: update_directus_users_input
}

input update_post_editor_nodes_input {
  id: ID
  post_id: update_post_input
  item: String
  collection: String
}

input update_post_files_input {
  id: ID
  post_id: update_post_input
  directus_files_id: update_directus_files_input
  sort: Int
}

input update_post_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  slug: String
  program: update_programs_input
  imagebox: update_image_box_input
  content: JSON
  preview_full_image: Boolean

  """Maximal zwei Sätze"""
  short_description: String
  date_published: Date
  audio_files: [update_post_files_input]
  tags: [update_post_tags_1_input]
  editor_nodes: [update_post_editor_nodes_input]
  authors: [update_post_directus_users_input]
}

input update_post_tags_1_input {
  id: ID
  post_id: update_post_input
  tags_id: update_tags_input
}

input update_programs_directus_users_input {
  id: ID
  programs_slug: update_programs_input
  directus_users_id: update_directus_users_input
}

input update_programs_input {
  """
  Dies wird gebraucht für die URL der Sendung: www.rabe.ch/sendungen/slug Am besten der Name der Sendung eintragen.
  """
  slug: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  image: update_directus_files_input
  content: JSON
  promo_box: update_promo_box_input
  team: [update_programs_directus_users_input]
  posts: [update_post_input]
}

input update_promo_box_input {
  id: ID
  title: String
  text: String
  button_label: String
  button_url: String
  image: update_directus_files_input
  background_color: String
}

input update_tags_input {
  id: ID
  value: String
}